"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[8368],{96060:e=>{e.exports=JSON.parse('{"label":"lisp","permalink":"/docs/tags/lisp","allTagsPath":"/docs/tags","count":29,"items":[{"id":"lisp-interpreter-in-c/basic-features","title":"01 Basic features of C","description":"document","permalink":"/docs/lisp-interpreter-in-c/basic-features"},{"id":"lisp-interpreter-in-py/chapter-01","title":"01 Why study interpreters and compilers?","description":"I will give you three reasons.","permalink":"/docs/lisp-interpreter-in-py/chapter-01"},{"id":"lisp-interpreter-in-py/chapter-02","title":"02","description":"On this section, we\'ll create a new version of the calculator from calc1.py that will be able to:","permalink":"/docs/lisp-interpreter-in-py/chapter-02"},{"id":"lisp-interpreter-in-c/interactive-prompt","title":"02 An Interactive Prompt","description":"document","permalink":"/docs/lisp-interpreter-in-c/interactive-prompt"},{"id":"lisp-interpreter-in-py/chapter-03","title":"03","description":"Today I\'m going to talk about how to parse (recognize) and interpret arithmetic expressions that have any number of plus or minus operators in it, for example \\"7 - 3 + 2 - 1\\".","permalink":"/docs/lisp-interpreter-in-py/chapter-03"},{"id":"lisp-interpreter-in-c/language-grammar","title":"03 Language Grammar","description":"document","permalink":"/docs/lisp-interpreter-in-c/language-grammar"},{"id":"lisp-interpreter-in-py/chapter-04","title":"04","description":"In the previous article you have learned how to parse (recognize) and interpret arithmetic expressions with any number of plus or minus oprators in them. You also learned about syntax diagrams and how they can be used to specify the syntax of a programming language.","permalink":"/docs/lisp-interpreter-in-py/chapter-04"},{"id":"lisp-interpreter-in-c/parsing","title":"04 Parsing","description":"document","permalink":"/docs/lisp-interpreter-in-c/parsing"},{"id":"lisp-interpreter-in-py/chapter-05","title":"05","description":"We\'re going to use all the knowledge you\'ve gained from previous articles in the series and learn how to parse and interpret arithmetic expressions that have any number of addition, subtraction, multiplication, and division operators.","permalink":"/docs/lisp-interpreter-in-py/chapter-05"},{"id":"lisp-interpreter-in-c/evaluation","title":"05 Evaluation","description":"document","permalink":"/docs/lisp-interpreter-in-c/evaluation"},{"id":"lisp-interpreter-in-py/chapter-06","title":"06","description":"In this article, we\'re wrapping up our discussion of arithmetic expressions by adding parenthesized expressions to the grammar and implementing an interpreter that will be able to evaluate parenthesized expressions with arbitrarily deep nesting, like 7 + 3 * (10 / (12 / 3 ) + 1 ) -1.","permalink":"/docs/lisp-interpreter-in-py/chapter-06"},{"id":"lisp-interpreter-in-c/error-handling","title":"06 Error Handling","description":"document","permalink":"/docs/lisp-interpreter-in-c/error-handling"},{"id":"lisp-interpreter-in-py/chapter-07","title":"07","description":"Up until now, we had our interpreter and parser code mixed together and the interpreter would evaluate an expression as soon as the parser recognized a certain language construct like addition, subtraction, multiplication, or division. Such interpreters are called syntax-directed interpreters. They usually make a single pass over the input and are suitable for basic language applications. In order to analyze more complex Pascal programming language constructs, we need to build an intermediate representation (IR). Our parser will be responsible for building an IR and our interpreter will use it to interpret the input represented as the IR.","permalink":"/docs/lisp-interpreter-in-py/chapter-07"},{"id":"lisp-interpreter-in-c/s-expressions","title":"07 S-Expressions","description":"document","permalink":"/docs/lisp-interpreter-in-c/s-expressions"},{"id":"lisp-interpreter-in-py/chapter-08","title":"08","description":"In this article, we\'ll talk about unary operators, namely unary plus (+) and unary minus (-) operators.","permalink":"/docs/lisp-interpreter-in-py/chapter-08"},{"id":"lisp-interpreter-in-c/q-expressions","title":"08 Q-Expressions","description":"document","permalink":"/docs/lisp-interpreter-in-c/q-expressions"},{"id":"lisp-interpreter-in-py/chapter-09","title":"09","description":"Here is what we\'re going to go through:","permalink":"/docs/lisp-interpreter-in-py/chapter-09"},{"id":"lisp-interpreter-in-c/variables","title":"09 Variables","description":"document","permalink":"/docs/lisp-interpreter-in-c/variables"},{"id":"lisp-interpreter-in-py/chapter-10","title":"10","description":"In this article we will update our interpreter to parse and interpret our very first complete Pascal program. The program can also be compiled by the Free Pascal compiler, fpc.","permalink":"/docs/lisp-interpreter-in-py/chapter-10"},{"id":"lisp-interpreter-in-c/functions","title":"10 Functions","description":"document","permalink":"/docs/lisp-interpreter-in-c/functions"},{"id":"lisp-interpreter-in-py/chapter-11","title":"11","description":"Recap what we\'ve learned so far:","permalink":"/docs/lisp-interpreter-in-py/chapter-11"},{"id":"lisp-interpreter-in-c/conditionals","title":"11 Conditionals","description":"document","permalink":"/docs/lisp-interpreter-in-c/conditionals"},{"id":"lisp-interpreter-in-py/chapter-12","title":"12","description":"In this article we are going to take a few more baby steps and learn how to parse Pascal procedure declarations.","permalink":"/docs/lisp-interpreter-in-py/chapter-12"},{"id":"lisp-interpreter-in-c/strings","title":"12 Strings","description":"document","permalink":"/docs/lisp-interpreter-in-c/strings"},{"id":"lisp-interpreter-in-py/chapter-13","title":"13 Introduction to semantic analysis","description":"While our Pascal program can be grammatically correct and the parser can successfully build an abstract syntax tree, the program still can contain some pretty serious errors. To catch those errors we need to use the abstract syntax tree and the informaiton from the symbol table.","permalink":"/docs/lisp-interpreter-in-py/chapter-13"},{"id":"lisp-interpreter-in-c/standard-library","title":"13 Standard Library","description":"document","permalink":"/docs/lisp-interpreter-in-c/standard-library"},{"id":"lisp-interpreter-in-py/chapter-14","title":"14","description":"This is what we\'re going to learn today:","permalink":"/docs/lisp-interpreter-in-py/chapter-14"},{"id":"lisp-interpreter-in-c/index","title":"Before start","description":"The whole online documents.","permalink":"/docs/lisp-interpreter-in-c/index"},{"id":"lisp-interpreter-in-py/chapter-00","title":"Before start","description":"Tutorial starts here, it tells us to build a simple lisp interpreter from scratch in Python.","permalink":"/docs/lisp-interpreter-in-py/chapter-00"}]}')}}]);