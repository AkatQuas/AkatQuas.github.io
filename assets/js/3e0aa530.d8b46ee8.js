"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[6767],{3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>m});var n=r(67294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var s=n.createContext({}),p=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},c=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},f="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),f=p(r),d=a,m=f["".concat(s,".").concat(d)]||f[d]||u[d]||o;return r?n.createElement(m,i(i({ref:t},c),{},{components:r})):n.createElement(m,i({ref:t},c))}));function m(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[f]="string"==typeof e?e:a,i[1]=l;for(var p=2;p<o;p++)i[p]=r[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},36114:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>f,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var n=r(87462),a=(r(67294),r(3905));const o={title:"Traverse directories in nodejs",categories:["command line"],tags:["nodejs"]},i=void 0,l={permalink:"/blog/2019/09/24/traverse-directories-in-node",source:"@site/blog/2019-09-24-traverse-directories-in-node.md",title:"Traverse directories in nodejs",description:"This is a simple implementation for traversing directories in Nodejs.",date:"2019-09-24T00:00:00.000Z",formattedDate:"September 24, 2019",tags:[{label:"nodejs",permalink:"/blog/tags/nodejs"}],readingTime:.91,hasTruncateMarker:!0,authors:[],frontMatter:{title:"Traverse directories in nodejs",categories:["command line"],tags:["nodejs"]},prevItem:{title:"Read input from command line in node",permalink:"/blog/2019/10/28/read-from-terminal-in-node"},nextItem:{title:"\u7981\u6b62 body \u5143\u7d20\u5728\u6d6e\u5c42\u4e0b\u6eda\u52a8",permalink:"/blog/2019/08/17/mute-body-element-when-popup-shows"}},s={authorsImageUrls:[]},p=[],c={toc:p};function f(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,n.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"This is a simple implementation for traversing directories in Nodejs."),(0,a.kt)("p",null,"Please use more robust modules, for example ",(0,a.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/walk"},"walk"),", in production."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"const fse = require('fs-extra');\nconst path = require('path');\n\nconst isNotDot = (filepath) => {\n  const REG = /^\\..+/i;\n  return !REG.test(filepath);\n};\n\n/**\n * calculate the relative path from `start` to `end`\n * @param {String} start starting filepath\n * @param {String} end ending filepath\n * @returns {String}\n */\nfunction relativePath(start, end) {\n  return path.relative(start, end);\n}\n\n/**\n * walk a directory to get a flatterned array of files\n * @param {string} dir The directory path\n * @param {{filter: Function, skipDot: boolean}} p the relative path origin\n * @returns {Array<{ purename, fullpath }>}\n */\nfunction walk(dir, opt) {\n  let children = fse.readdirSync(dir);\n  const skipDot = opt.skipDot || true;\n  if (skipDot) {\n    children = children.filter(isNotDot);\n  }\n  if (opt.filter) {\n    children = children.filter(opt.filter);\n  }\n  let res = [];\n  children.forEach((f) => {\n    const filepath = path.resolve(dir, f);\n    const stat = fse.statSync(filepath);\n    if (stat.isFile()) {\n      res.push({\n        purename: path.basename(filepath),\n        fullpath: filepath,\n      });\n    } else if (stat.isDirectory()) {\n      res = res.concat(walk(filepath, opt));\n    }\n  });\n  return res;\n}\n")))}f.isMDXComponent=!0}}]);