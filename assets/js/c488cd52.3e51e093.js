"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[3253],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>k});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function p(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):p(p({},t),e)),n},s=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),u=c(n),f=a,k=u["".concat(l,".").concat(f)]||u[f]||m[f]||o;return n?r.createElement(k,p(p({ref:t},s),{},{components:n})):r.createElement(k,p({ref:t},s))}));function k(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,p=new Array(o);p[0]=f;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[u]="string"==typeof e?e:a,p[1]=i;for(var c=2;c<o;c++)p[c]=n[c];return r.createElement.apply(null,p)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},52009:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>p,default:()=>u,frontMatter:()=>o,metadata:()=>i,toc:()=>c});var r=n(87462),a=(n(67294),n(3905));const o={title:"Type vs Interface",tags:["typescript"]},p=void 0,i={permalink:"/blog/2022/04/04/type-vs-interface",source:"@site/blog/2022-04-04-type-vs-interface.md",title:"Type vs Interface",description:"It's recommended to go through the section Item 13: Know the Differences Between type and interface in the book Effective TypeScript written by Dan Vanderkam.",date:"2022-04-04T00:00:00.000Z",formattedDate:"April 4, 2022",tags:[{label:"typescript",permalink:"/blog/tags/typescript"}],readingTime:1.655,hasTruncateMarker:!0,authors:[],frontMatter:{title:"Type vs Interface",tags:["typescript"]},prevItem:{title:"Electron \u5e94\u7528\u7684\u7406\u60f3\u67b6\u6784\u8bbe\u8ba1",permalink:"/blog/2022/05/09/electron-application-architecture"},nextItem:{title:"\u91cd\u6784 Electron \u5e94\u7528\u4e4b\u540e\u7684\u611f\u609f",permalink:"/blog/2022/03/25/refactor-an-application"}},l={authorsImageUrls:[]},c=[],s={toc:c};function u(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"It's recommended to go through the section ",(0,a.kt)("strong",{parentName:"p"},"Item 13: Know the Differences Between type and interface")," in the book ",(0,a.kt)("a",{parentName:"p",href:"https://effectivetypescript.com/"},(0,a.kt)("strong",{parentName:"a"},"Effective TypeScript")," written by Dan Vanderkam"),".")),(0,a.kt)("p",null,"In most cases, they are interchangeable when doing ",(0,a.kt)("em",{parentName:"p"},"type gymnastics"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"type TA = { };\ninterface IA = {};\n\ntype TB = TA & {};\ninterface IB extends IA {};\n\nclass A implements TA {};\nclass AA implements IA {};\n")),(0,a.kt)("p",null,"However, there are some features you can only express with ",(0,a.kt)("inlineCode",{parentName:"p"},"type"),", not ",(0,a.kt)("inlineCode",{parentName:"p"},"interface"),"."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Union")),(0,a.kt)("p",null,"There's no syntax available when writing unions with ",(0,a.kt)("inlineCode",{parentName:"p"},"interface"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"type TC = TA | IA | {};\n// oops, there's no union of interfaces.\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Tuple")),(0,a.kt)("p",null,"You can't create a tuple directly from ",(0,a.kt)("inlineCode",{parentName:"p"},"interface"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"type Pair = [number, string];\ntype StringList = string[];\n// oops, there's no tuple directly from interface\n")),(0,a.kt)("p",null,"However, here's a trick way to express tuple in interface"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"interface ITuple {\n  0: number;\n  1: string;\n  length: 2;\n}\n\nconst x: ITuple = [42, '42'];\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Mapped types")),(0,a.kt)("p",null,"It's invalid to distribute types in ",(0,a.kt)("inlineCode",{parentName:"p"},"interface"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"type Fruit = 'apple' | 'orange' | 'banana';\n\n// this is ok in type\ntype FruitCount = {\n  [key in Fruit]: number;\n};\n\n// oops, this is invalid\ninterface FruitCount {\n  // error, ts(7061)\n  [key in Fruit]: number;\n}\n")),(0,a.kt)("p",null,"In general, it's more safe and robust to use ",(0,a.kt)("inlineCode",{parentName:"p"},"type"),"."),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"I set up ",(0,a.kt)("inlineCode",{parentName:"p"},"consistent-type-definitions")," rule in my eslint config."),(0,a.kt)("p",{parentName:"blockquote"},(0,a.kt)("inlineCode",{parentName:"p"},"@typescript-eslint/consistent-type-definitions: [ 'error', 'type']"))),(0,a.kt)("p",null,"But, ",(0,a.kt)("inlineCode",{parentName:"p"},"interface")," does have one ability that ",(0,a.kt)("inlineCode",{parentName:"p"},"type")," doesn't."),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"I haven't find more, maybe add more in the future.")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Declaration merging (augment)")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"interface IA {\n  name: string;\n}\ninterface IA {\n  age: number;\n}\n\nconst a: IA = { name: 'n', age: 2 };\n")),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"There's one ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/microsoft/TypeScript/wiki/Performance#preferring-interfaces-over-intersections"},"blog")," provided by TypeScript team that talks about the preferences when considering compile performance. Take a look if you're interested.")),(0,a.kt)("p",null,"In conclusion, You'd better know the differences between ",(0,a.kt)("inlineCode",{parentName:"p"},"interface")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"type"),", and make the decision that's suitable for your project."))}u.isMDXComponent=!0}}]);