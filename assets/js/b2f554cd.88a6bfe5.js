"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[1477],{30010:e=>{e.exports=JSON.parse('{"blogPosts":[{"id":"/2022/11/23/excerpt-on-unit-test","metadata":{"permalink":"/blog/2022/11/23/excerpt-on-unit-test","source":"@site/blog/2022-11-23-excerpt-on-unit-test.md","title":"\u5355\u5143\u6d4b\u8bd5\u7684\u5b9e\u8df5","description":"\u6982\u8ff0","date":"2022-11-23T00:00:00.000Z","formattedDate":"November 23, 2022","tags":[{"label":"unit test","permalink":"/blog/tags/unit-test"}],"readingTime":5.595,"hasTruncateMarker":true,"authors":[],"frontMatter":{"title":"\u5355\u5143\u6d4b\u8bd5\u7684\u5b9e\u8df5","tags":["unit test"]},"nextItem":{"title":"\u8bbe\u8ba1\u4e00\u4e2a CLI \u5de5\u5177","permalink":"/blog/2022/06/11/design-a-cli-tool"}},"content":"## \u6982\u8ff0\\n\\n[\u4e4b\u524d](./2019-11-23-tdd-n-bdd.md) \u548c [\u4e4b\u524d](./2021-05-06-tdd-in-frontend.md) \u5bf9\u51e0\u4e2a\u6d4b\u8bd5\u6846\u67b6\u505a\u8fc7\u4e00\u4e9b\u6d45\u5c1d\u5219\u6b62\u7684\u7ec3\u4e60\uff0c\u4f46\u662f\u5bf9\u4e8e\u6d4b\u8bd5\u76ee\u7684\uff0c\u6d4b\u8bd5\u65b9\u5f0f\u4e0d\u751a\u7406\u89e3\u3002\u6700\u8fd1\u8bfb\u4e86\u4e00\u7bc7\u6587\u7ae0\u611f\u89c9\u9887\u6709\u542f\u53d1\uff0c\u7ed3\u5408\u4e00\u4e0b\u5176\u4ed6\u5b66\u4e60\u8d44\u6599\uff0c\u5728\u6b64\u62fe\u4eba\u7259\u6167\u3002\\n\\n\u8f6f\u4ef6\u5de5\u7a0b\u4e2d\u7684\u6d4b\u8bd5\uff0c\u6574\u4f53\u76ee\u6807\u662f\u4e3a\u4e86\u4fdd\u8bc1\u9879\u76ee\u4ee3\u7801\u7684\u53ef\u7528\u6027\uff0c\u7a33\u5b9a\u6027\uff0c\u529f\u80fd\u7b26\u5408\u9884\u671f\u3002\u4e3b\u8981\u662f\u901a\u8fc7\u81ea\u52a8\u5316\u7684\u624b\u6bb5\uff0c\u5bf9\u4ee3\u7801\u3001\u7ec4\u4ef6\u3001\u5e94\u7528\u8fdb\u884c\u6d4b\u8bd5\uff0c\u4ee5\u786e\u4fdd\u4ee3\u7801\u7684\u53ef\u7528\u6027\u4e0e\u7a33\u5b9a\u6027\u3002\\n\\n\u672c\u6587\u4e3b\u8981\u8bb2\u7684\u662f\u5355\u5143\u6d4b\u8bd5\u7684\u5b9e\u8df5\u3002\\n\\n\x3c!--truncate--\x3e\\n\\n## \u6d4b\u8bd5\u601d\u8def\\n\\n> \u4ece\u6d4b\u8bd5\u76ee\u7684\u51fa\u53d1\uff0c\u53cd\u63a8\u6d4b\u8bd5\u8fc7\u7a0b\uff0c\u6709\u5229\u4e8e\u6d4b\u8bd5\u7528\u4f8b\u7684\u7f16\u5199\u3002\\n\\n\u5355\u5143\u6d4b\u8bd5\u7684\u6d4b\u8bd5\u5bf9\u8c61\u901a\u5e38\u662f\u5bf9\u9879\u76ee\u4ee3\u7801\u4e2d\u7c92\u5ea6\u8f83\u5c0f\u7684\u5185\u5bb9\uff0c\u5e38\u89c1\u7684\u5982\u51fd\u6570\uff0c\u7ec4\u4ef6\u3002\\n\\n\u6d4b\u8bd5\u76ee\u7684\u5f53\u7136\u662f\u8be5\u5355\u5143\u7684\u8fd0\u884c\u4e0e\u9884\u671f\u76f8\u7b26\u3002\\n\\n\u6bd4\u65b9\u8bf4\uff1a\\n\\n- \u5bf9\u4e8e\u7eaf\u51fd\u6570\uff0c\u7ed9\u5b9a\u8f93\u5165\uff0c\u51fd\u6570\u7684\u8fd0\u884c\u7ed3\u679c\u5e94\u5f53\u548c\u9884\u671f\u8f93\u51fa\u4e00\u81f4\u3002\\n\\n- \u5bf9\u4e8e\u7ec4\u4ef6\uff0c\u7ed9\u5b9a\u5c5e\u6027 props \uff0c\u7ec4\u4ef6\u6e32\u67d3\u7ed3\u679c\u4e2d\u5e94\u5f53\u5305\u542b\u9884\u671f\u7684\u5143\u7d20\u3002\\n\\n\u4e8b\u5b9e\u4e0a\u7684\u67d0\u4e9b\u5f85\u6d4b\u8bd5\u7684\u51fd\u6570\u4f1a\u6709\u526f\u4f5c\u7528 side-effect\uff0c\u7ec4\u4ef6\u4e5f\u4f1a\u4f9d\u8d56\u5176\u4ed6\u7ec4\u4ef6\uff0c\u6b64\u65f6\u4e3a\u8fd9\u4e2a\u5355\u5143\u8fdb\u884c\u6d4b\u8bd5\u7684\u65f6\u5019\uff0c\u5c31\u9700\u8981\u5bf9\u5b83\u7684\u4f9d\u8d56\u8fdb\u884c\u6a21\u62df\uff0c\u4fd7\u79f0\u6253\u6869 stub (mock)\u3002\\n\\n\u5bf9\u4e8e\u4e0d\u540c\u5f62\u5f0f\u7684\u526f\u4f5c\u7528\uff0c\u6253\u6869\u5f62\u5f0f\u4e5f\u4e0d\u4e00\u6837\u3002\\n\\n| \u526f\u4f5c\u7528\u5f62\u5f0f                         | \u6253\u6869\u601d\u8def                                                                                                                                                        |\\n| :--------------------------------- | :-------------------------------------------------------------------------------------------------------------------------------------------------------------- |\\n| \u4f9d\u8d56\u5e76\u4fee\u6539\u5916\u90e8\u72b6\u6001                 | \u6a21\u62df\u72b6\u6001\uff0c\u786e\u4fdd\u5176\u5728\u8fd0\u884c\u524d\u540e\u7684\u53d8\u66f4\u7b26\u5408\u9884\u671f\u3002                                                                                                                      |\\n| \u4f9d\u8d56\u5916\u90e8\u51fd\u6570\uff0c\u4f46\u4e0d\u4f9d\u8d56\u8fd4\u56de\u7ed3\u679c     | \u6a21\u62df\u51fd\u6570\uff0c\u786e\u4fdd\u5176\u8c03\u7528\u53c2\u6570\u3001\u8c03\u7528\u6b21\u6570\u7b26\u5408\u9884\u671f\u3002                                                                                                                    |\\n| \u4f9d\u8d56\u5916\u90e8\u51fd\u6570\uff0c\u540c\u65f6\u4f9d\u8d56\u5bf9\u5e94\u8fd4\u56de\u7ed3\u679c | \u6a21\u62df\u51fd\u6570\uff0c\u5e76\u4e14\u4ee5\u5165\u53c2\u6b63\u786e\u7684\u6a21\u62df\u4e0d\u540c\u8f93\u51fa\u3002\u786e\u4fdd\u5f85\u6d4b\u51fd\u6570\u6309\u7167\u8fd4\u56de\u7ed3\u679c\u7684\u8fd0\u884c\u7b26\u5408\u9884\u671f\u3002                                                                                |\\n| \u4f9d\u8d56\u5b50\u7ec4\u4ef6\uff0c\u4ec5\u6e32\u67d3\u65e0\u4ea4\u4e92           | shallow render\uff0c\u786e\u4fdd\u5b50\u7ec4\u4ef6\u5b58\u5728\u5373\u53ef\u3002\u53c2\u8003 [enzyme shallow][enzyme-shallow] \uff0c [vitest stub and shallow][vitest-stubs-shallow-mount]                              |\\n| \u4f9d\u8d56\u5b50\u7ec4\u4ef6\uff0c\u4f9d\u8d56\u4ea4\u4e92               | full render\uff0c\u5b50\u7ec4\u4ef6\u8ddf\u666e\u901a\u5b50\u5143\u7d20\u5730\u4f4d\u76f8\u5f53\u3002\u6a21\u62df\u89e6\u53d1\u4e8b\u4ef6\u529f\u80fd\uff0c\u9884\u671f\u56de\u8c03\u6b63\u786e\u6267\u884c\u3002\u53c2\u8003 [enzyme mount][enzyme-mount] \uff0c [vitest component][vitest-component-instance] |\\n| \u4f9d\u8d56\u5b9a\u65f6\u5668 timer                   | \u5404\u4e2a\u6d4b\u8bd5\u5e93\u5747\u4f1a\u63d0\u4f9b fakeTimer \u3002\u9884\u671f\u968f\u7740\u65f6\u95f4\u7684\u53d8\u5316\uff0c\u51fd\u6570\u8c03\u7528\u3001\u72b6\u6001\u53d8\u66f4\u5e94\u5f53\u7b26\u5408\u9884\u671f\u3002                                                                             |\\n\\n## \u6d4b\u8bd5\u5b9e\u8df5\\n\\n### \u7eaf\u51fd\u6570\\n\\n\u7eaf\u51fd\u6570\u7684\u6d4b\u8bd5\u6bd4\u8f83\u7b80\u5355\uff0c\u4e0d\u8fc7\u7f16\u5199\u6d4b\u8bd5\u7528\u4f8b\u65f6\uff0c\u9700\u8981\u628a\u6240\u6709\u5206\u652f\u8986\u76d6\u3002\\n\\n```typescript\\nexport function calculate(\\n  operand1: number,\\n  operand2: number,\\n  operator: \'+\' | \'-\'\\n): number {\\n  switch (operator) {\\n    case \'+\':\\n      return operand1 + operand2;\\n    case \'-\':\\n      return operand1 - operand2;\\n    default:\\n      throw new Error(\'Unknown operator\');\\n  }\\n}\\n\\ntest(\'calculate\', () => {\\n  expect(calculate(2, 3, \'+\')).toBe(5);\\n  expect(calculate(3, 2, \'-\')).toBe(1);\\n  // @ts-expect-error\\n  expect(() => calculate(2, 2, \'*\')).toThrow(/Unknown operator/);\\n});\\n```\\n\\n### \u5916\u90e8\u72b6\u6001\\n\\n\u4e3a\u4e86\u4fbf\u4e8e\u6d4b\u8bd5\u51fd\u6570\u8fd0\u884c\u65f6\u4fee\u6539\u5916\u90e8\u72b6\u6001\u7684\u60c5\u5f62\uff0c\u9700\u8981\u5c06\u72b6\u6001\u5bfc\u51fa\uff0c\u6216\u81f3\u5c11\u63d0\u4f9b\u4e00\u79cd\u65b9\u5f0f\u80fd\u591f\u8bfb\u53d6\u72b6\u6001\u3002\u5982\u679c\u662f\u5176\u4ed6\u5168\u5c40\u72b6\u6001\u540c\u7406\u3002\\n\\n```typescript\\n// directly export\\nexport const store = {\\n  count: 1,\\n};\\n\\n// export an API for accessing\\nexport const getCount = () => store.count;\\n\\nexport const increment = (value = 1) => {\\n  store.count += value;\\n};\\n\\n// reset the store\\nbeforeEach(() => {\\n  store.count = 10;\\n});\\n\\ntest(\'store\', () => {\\n  expect(store.count).toBe(10);\\n  increment(20);\\n  expect(getCount()).toBe(30);\\n});\\n```\\n\\n### \u51fd\u6570\u4f9d\u8d56\\n\\n\u5bf9\u4e8e\u4f9d\u8d56\u51fd\u6570\u7684\u573a\u666f\u53ef\u4ee5\u6709\u4e24\u79cd\u5b9e\u8df5\u65b9\u5f0f\u3002\u65b9\u5f0f\u4e00\uff0c\u89c2\u5bdf\u3002\u6ce8\u610f\u8981\u5c06\u76ee\u6807\u5bfc\u51fa\uff0c\u5e76\u4e14\u5728\u5bf9\u8c61\u4e2d\u89c2\u5bdf\u3002\\n\\n```typescript\\nexport const howOld = (name: string, age: number) => {\\n  console.log(`${name} is ${age} years old`);\\n};\\n\\nexport const report = () => {\\n  howOld(\'Bob\', 12);\\n};\\n\\n// group as object so that jest can spyOn\\nimport * as functions from \'./functions\';\\ntest(\'function\', () => {\\n  const spy = jest.spyOn(functions, \'howOld\');\\n  expect(spy).toHaveBeenCalledTimes(0);\\n  functions.report();\\n  expect(spy).toHaveBeenCalledTimes(1);\\n  expect(spy).toHaveBeenCalledWith(\'Bob\', 12);\\n});\\n```\\n\\n\u65b9\u5f0f\u4e8c\uff0cmock \u51fd\u6570\u3002\u6821\u9a8c\u601d\u8def\u4e0e\u524d\u8005\u4e00\u76f4\u3002mock \u51fd\u6570\u65f6\uff0c\u4e5f\u9700\u8981\u5b9e\u73b0\u5bf9\u5e94\u7684\u8fd4\u56de\u7ed3\u679c\uff0c\u4ee5\u8fbe\u5230\u6d4b\u8bd5\u76ee\u7684\u3002\\n\\n```typescript\\nexport const report = (fn: (name: string, age: number) => string): string => {\\n  return fn(\'Alice\', 12);\\n};\\n\\ntest(\'function\', () => {\\n  const spy = jest.fn().mockReturnValue(\'default\');\\n  expect(spy).toHaveBeenCalledTimes(0);\\n  expect(report(spy)).toBe(\'default\');\\n  expect(spy).toHaveBeenCalledTimes(1);\\n  expect(spy).toHaveBeenCalledWith(\'Alice\', 12);\\n});\\n```\\n\\n### \u5b50\u7ec4\u4ef6\u4f9d\u8d56\\n\\n\u5b50\u7ec4\u4ef6\u7684\u4f9d\u8d56\u53ef\u4ee5\u76f4\u63a5\u8bfb\u6587\u6863 [enzyme shallow][enzyme-shallow] \u3001 [vitest stub and shallow][vitest-stubs-shallow-mount] \u3001 [enzyme mount][enzyme-mount] \u3001 [vitest component][vitest-component-instance] \u7684\u4f8b\u5b50\uff0c\u6b64\u5904\u4e0d\u518d\u5197\u4f59\u3002\\n\\n\u6d4b\u8bd5\u6838\u5fc3\u76ee\u6807\u4e3b\u8981\u5305\u62ec\uff1a\\n\\n- \u786e\u4fdd\u7ec4\u4ef6\u6b63\u786e\u6e32\u67d3\uff1b\\n\\n- \u786e\u4fdd\u7ec4\u4ef6\u4ea4\u4e92\u4e8b\u4ef6\u89e6\u53d1\u65f6\uff0c\u56de\u8c03\u6b63\u786e\u6267\u884c\u6216\u72b6\u6001\u53d8\u66f4\u7b26\u5408\u9884\u671f\uff1b\\n\\n- \u786e\u4fdd\u7ec4\u4ef6\u6e32\u67d3\u65f6 hooks \u7b49\u526f\u4f5c\u7528\u6b63\u786e\u6267\u884c\u3002\\n\\n[enzyme-shallow]: https://enzymejs.github.io/enzyme/docs/api/shallow.html \'Shallow Rendering API\'\\n[enzyme-mount]: https://enzymejs.github.io/enzyme/docs/api/mount.html \'Full Rendering API (mount(...))\'\\n[vitest-stubs-shallow-mount]: https://test-utils.vuejs.org/guide/advanced/stubs-shallow-mount.html \'Stubs and Shallow Mount\'\\n[vitest-component-instance]: https://test-utils.vuejs.org/guide/advanced/component-instance.html \'Component Instance\'"},{"id":"/2022/06/11/design-a-cli-tool","metadata":{"permalink":"/blog/2022/06/11/design-a-cli-tool","source":"@site/blog/2022-06-11-design-a-cli-tool.md","title":"\u8bbe\u8ba1\u4e00\u4e2a CLI \u5de5\u5177","description":"\u81ea\u4ece\u63a5\u624b\u7f16\u8f91\u5668\u7684 CLI \u5de5\u5177\u4ee5\u6765\uff0c\u6211\u5bf9\u539f\u59cb\u7684\u4ee3\u7801\u8bbe\u8ba1\u6df1\u6076\u75db\u7edd\u3002\u53ea\u662f\u65e0\u5948\u91cd\u6784\u3001\u5347\u7ea7\u7b49\u8fdf\u8fdf\u65e0\u6cd5\u63d0\u4e0a\u65e5\u7a0b\uff0c\u6240\u4ee5\u53ea\u80fd\u5728\u8fd9\u91cc\u505a\u5927\u68a6\u3002","date":"2022-06-11T00:00:00.000Z","formattedDate":"June 11, 2022","tags":[{"label":"architecture","permalink":"/blog/tags/architecture"},{"label":"nodejs","permalink":"/blog/tags/nodejs"}],"readingTime":6.935,"hasTruncateMarker":true,"authors":[],"frontMatter":{"title":"\u8bbe\u8ba1\u4e00\u4e2a CLI \u5de5\u5177","tags":["architecture","nodejs"]},"prevItem":{"title":"\u5355\u5143\u6d4b\u8bd5\u7684\u5b9e\u8df5","permalink":"/blog/2022/11/23/excerpt-on-unit-test"},"nextItem":{"title":"\u67b6\u6784\u8bbe\u8ba1\u7684\u4e00\u4e9b\u54f2\u5b66\u7ecf\u9a8c","permalink":"/blog/2022/05/30/architecture-design-imo"}},"content":"\u81ea\u4ece\u63a5\u624b\u7f16\u8f91\u5668\u7684 CLI \u5de5\u5177\u4ee5\u6765\uff0c\u6211\u5bf9\u539f\u59cb\u7684\u4ee3\u7801\u8bbe\u8ba1\u6df1\u6076\u75db\u7edd\u3002\u53ea\u662f\u65e0\u5948\u91cd\u6784\u3001\u5347\u7ea7\u7b49\u8fdf\u8fdf\u65e0\u6cd5\u63d0\u4e0a\u65e5\u7a0b\uff0c\u6240\u4ee5\u53ea\u80fd\u5728\u8fd9\u91cc\u505a\u5927\u68a6\u3002\\n\\n## \u5e38\u89c1\u5de5\u5177\\n\\n\u5728 Node \u4e2d\uff0c\u6211\u63a5\u89e6\u8fc7\u7684 CLI \u5f00\u53d1\u5de5\u5177\u6709\\n\\n- [common-bin](https://www.npmjs.com/package/common-bin)\\n- [commander](https://www.npmjs.com/package/commander)\\n- [oclif](https://oclif.io/)\\n\\n\u76f8\u6bd4\u8f83\u800c\u8a00\uff0c\u524d\u4e24\u4e2a `common-bin` \u548c `commander` \u53ea\u80fd\u7b97\u662f CLI \u7684\u5f00\u53d1\u5de5\u5177\u5957\u4ef6 (library) \uff0c\u800c `oclif` \u53ef\u4ee5\u79f0\u5f97\u4e0a CLI \u5f00\u53d1\u6846\u67b6\u3002\\n\\n\u7528 Web \u751f\u6001\u53bb\u7c7b\u6bd4\uff0c\u524d\u4e24\u8005\u597d\u6bd4\u5c31\u662f `React` \u548c `Vue` \uff0c\u5c5e\u4e8e Web **UI library** \u3002\u4f5c\u4e3a\u6838\u5fc3\u5e93\uff0c\u5b83\u4eec\u53ea\u63d0\u4f9b\u4e86 MVVM \u7684\u529f\u80fd\uff0c\u8bf8\u5982 **router** \u3001**store** \u3001**http** \u7b49\u90fd\u9700\u8981\u540c\u751f\u6001\u4e0b\u7684\u5176\u4ed6 library \u652f\u6301\u3002\\n\\n\x3c!--truncate--\x3e\\n\\n\u800c `oclif` \u66f4\u63a5\u8fd1 `Angular` \u8fd9\u79cd\u7ed3\u7ed3\u5b9e\u5b9e\u7684 Web \u6846\u67b6\u3002\u9664\u4e86\u6709\u5f00\u7bb1\u5373\u7528\uff0c\u7701\u53bb\u7edd\u5927\u90e8\u5206\u7684\u5de5\u5177\u7c7b\u9009\u578b\u70e6\u607c\u7684\u4f18\u70b9\uff0c\u8fd8\u6709 [schematics](https://oclif.io/docs/generator_commands) \u8fd9\u79cd\u597d\u4e1c\u897f\u5e2e\u52a9\u5f00\u53d1\u63d0\u6548\u3002\u6211\u8fd9\u91cc\u6709\u4e2a [\u793a\u4f8b\u9879\u76ee](https://github.com/AkatQuas/kiddo-plays/tree/master/angular-playlist/schematics/hello-world) \u53ef\u4ee5\u5e26\u4f60\u5165\u95e8 [Angular \u7684 schematics](https://angular.io/guide/schematics)\u3002\\n\\n## \u8bbe\u8ba1 CLI\\n\\n\u629b\u5f00\u57fa\u7840\u5de5\u5177\u7684\u9009\u578b\uff0c\u4e00\u6b3e\u7406\u60f3\u7684 CLI \u5de5\u5177\u4f7f\u7528\u65b9\u5f0f\u8bbe\u8ba1\u4e3a\\n\\n```bash\\n# \u547d\u4ee4       \u5168\u5c40\u9009\u9879         \u5b50\u547d\u4ee4          \u547d\u4ee4\u9009\u9879          \u53c2\u6570...\\ncommand [global option] [sub command] [command option] [parameter...]\\n```\\n\\n> \u6709\u4e00\u4e9b\u6587\u7ae0\u4f1a\u7528 flag \u6765\u6307\u4ee3 option \uff0c\u672c\u6587\u5168\u7528 option \u3002\\n\\n### \u6267\u884c\u8fc7\u7a0b Execution\\n\\n\u5728\u672c\u8bbe\u8ba1\u4e2d\uff0cCLI \u7684\u6267\u884c\u8fc7\u7a0b\u4e3a\\n\\n1. \u547d\u4ee4\u542f\u52a8\\n\\n1. \u8f7d\u5165\u76f8\u5173\u914d\u7f6e\uff0c\u6743\u91cd\u4ece \u5168\u5c40 - \u9879\u76ee - \u73af\u5883\u53d8\u91cf - \u9009\u9879 \u9010\u7ea7\u5347\u9ad8\\n\\n1. \u89e3\u6790\u9009\u9879\u4e0e\u53c2\u6570\\n\\n   1. \u8c03\u6574\u914d\u7f6e\u9879\uff0c\u53ef\u9009\u8fc7\u7a0b\\n   1. \u786e\u5b9a\u5177\u4f53\u6267\u884c\u547d\u4ee4\\n   1. \u786e\u5b9a\u6267\u884c\u53c2\u6570\\n\\n1. \u6267\u884c\u547d\u4ee4\uff0c\u8f93\u51fa\u7ed3\u679c\u6216\u5904\u7406\u5f02\u5e38\\n\\n\u56e0\u6b64\uff0c\u8981\u91cd\u70b9\u8bbe\u8ba1\u4ee5\u4e0b\u51e0\u4e2a\u65b9\u9762\uff1a\\n\\n- \u914d\u7f6e Configuration\\n\\n- \u53c2\u6570\u89e3\u6790 Argument Vector\\n\\n- \u547d\u4ee4\u6267\u884c Command Execution\\n\\n- \u9519\u8bef\u5904\u7406 Error Handling\\n\\n- \u4ea4\u4e92 User Experience\\n\\n### \u914d\u7f6e Configuration\\n\\n\u914d\u7f6e\u7684\u4f5c\u7528\u4e3b\u8981\u662f\u5e2e\u52a9\u786e\u5b9a\u5f53\u524d\u547d\u4ee4\u6267\u884c\u7684\u4e0a\u4e0b\u6587\u73af\u5883 (Context) \uff0c\u6240\u4ee5\u914d\u7f6e\u8981\u5c3d\u53ef\u80fd\u65e9\u5730\u5b8c\u6210\u5b9e\u4f8b\u5316\u3002\\n\\n> \u5728\u540e\u7eed\u7684\u53c2\u6570\u89e3\u6790\u8fc7\u7a0b\u4e2d\uff0c\u4e5f\u8bb8\u4f1a\u5bf9\u914d\u7f6e\u8fdb\u884c\u4fee\u6539\u3002\u8fd9\u4e2a\u4fee\u6539\u4f9d\u7136\u8981\u65e9\u4e8e\u771f\u5b9e\u7684\u547d\u4ee4\u6267\u884c\u3002\\n\\n\u524d\u9762\u63d0\u5230\u914d\u7f6e\u7684\u6743\u91cd\u95ee\u9898\uff0c\u5176\u5b9e\u5c31\u662f\u4e00\u4e2a\u914d\u7f6e\u8986\u76d6\u95ee\u9898\u3002\\n\\n**\u5168\u5c40\u914d\u7f6e**\\n\\n\u6743\u91cd\u6700\u4f4e\u3002\u5168\u5c40\u914d\u7f6e\u4e3b\u8981\u662f\u4e3a\u4e86 **\u515c\u5e95 (fallback)** \u6216\u8005 **\u9ed8\u8ba4 (default)** \uff0c\u907f\u514d\u9047\u5230\u6267\u884c\u65f6\u914d\u7f6e\u672a\u5b9a\u4e49\u7684\u9519\u8bef\u3002\\n\\n**\u9879\u76ee\u914d\u7f6e**\\n\\n\u6743\u91cd\u9ad8\u4e00\u7ea7\uff0c\u53ef\u9009\u3002\u9879\u76ee\u7684\u5b58\u5728\u80fd\u591f\u5b9e\u73b0\u9879\u76ee\u4e4b\u95f4\u7684\u914d\u7f6e\u81ea\u5b9a\u4e49\uff0c\u907f\u514d\u9879\u76ee\u4e4b\u95f4\u540c\u65f6\u5199\u5168\u5c40\u914d\u7f6e\u800c\u5f15\u8d77\u51b2\u7a81\u3002\\n\\n**\u73af\u5883\u53d8\u91cf**\\n\\n\u6743\u91cd\u9ad8\u4e00\u7ea7\uff0c\u53ef\u9009\u3002\u73af\u5883\u53d8\u91cf\u7684\u5b58\u5728\u610f\u5473\u7740\u5728 CLI \u771f\u5b9e\u6267\u884c\u65f6\uff0c\u4e34\u65f6\u4fee\u6539\u67d0\u4e2a\u914d\u7f6e\u9879\u4f46\u662f\u4e0d\u6539\u52a8\u914d\u7f6e\u6587\u4ef6\u3002\\n\\n**\u9009\u9879**\\n\\n\u6743\u91cd\u6700\u9ad8\uff0c\u53ef\u9009\u3002\u4e0e\u73af\u5883\u53d8\u91cf\u7684\u4f5c\u7528\u4e00\u6837\uff0c\u53ea\u662f\u5448\u73b0\u4e3a\u4e0d\u540c\u7684\u4fee\u6539\u5f62\u5f0f\uff0c\u4fee\u6539\u65f6\u673a\u3002\u73af\u5883\u53d8\u91cf\u53ef\u4ee5\u5728\u914d\u7f6e\u5b9e\u4f8b\u5316\u7684\u65f6\u5019\u5c31\u53ef\u4ee5\u751f\u6548\uff0c\u800c\u9009\u9879\u81f3\u5c11\u8981\u7b49\u5230\u53c2\u6570\u89e3\u6790\u4e4b\u540e\uff0c\u624d\u80fd\u5bf9\u914d\u7f6e\u9879\u8fdb\u884c\u4fee\u6539\u3002\\n\\n### \u53c2\u6570\u89e3\u6790 Argument Vector\\n\\n\u53c2\u6570\u89e3\u6790\u4e3b\u8981\u4f5c\u7528\u662f\u4e3a\u4e86\u786e\u5b9a\u5177\u4f53\u6267\u884c\u7684\u547d\u4ee4\u63a5\u53d7\u5230\u7684\u662f\u4ec0\u4e48\u9009\u9879\uff0c\u4ec0\u4e48\u53c2\u6570\u3002\\n\\n\u89e3\u6790\u4e3b\u8981\u5c31\u662f\u6821\u9a8c\u5b58\u5728\u6027\u4e0e\u5408\u6cd5\u6027\u3002\\n\\n\u5b58\u5728\u6027\u662f\u6307\u4f20\u5165\u7684\u9009\u9879\u3001\u53c2\u6570\u662f\u88ab\u5b9a\u4e49\u8fc7\u7684\uff0c\u9047\u5230\u65e0\u6cd5\u8bc6\u522b\u7684\u5c31\u629b\u51fa\u9519\u8bef\u3002\\n\\n\u5408\u6cd5\u6027\u662f\u6307\u9009\u9879\u3001\u53c2\u6570\u80fd\u591f\u6b63\u786e\u7684\u8f6c\u6362\u5230\u76ee\u6807\u6570\u636e\u7c7b\u578b\u3002\\n\\n\u89e3\u6790\u5b8c\u6210\u540e\u4f1a\u6d89\u53ca\u5230\u4e24\u4e2a\u7ec6\u8282\uff0c **\u6267\u884c\u547d\u4ee4** \u548c **\u547d\u4ee4\u53c2\u6570** \u3002\\n\\n\u4e00\u7ea7\u547d\u4ee4\u8bbe\u8ba1\u5bf9\u7edd\u5927\u591a\u6570 CLI \u6765\u8bf4\u5df2\u7ecf\u8db3\u591f\u4e86\u3002\u590d\u6742\u573a\u666f\u5982 git \u624d\u6d89\u53ca **\u5b50\u547d\u4ee4 (sub command)** \u3002\u4e0d\u8fc7\u5b50\u547d\u4ee4\u7684\u8bbe\u8ba1\u6709\u52a9\u4e8e\u5212\u5206\u547d\u4ee4\u7684 **\u6a21\u5757 (module boundary)** \u3002\\n\\n\u547d\u4ee4\u53c2\u6570\u7684\u5b9a\u4f4d\u5c31\u7b49\u540c\u4e8e\u8c03\u7528\u51fd\u6570\u65f6\u7684\u4f20\u53c2\u3002\u8fd9\u5df2\u7ecf\u662f\u5c5e\u4e8e\u5177\u4f53\u903b\u8f91\u7684\u8303\u56f4\u4e86\uff0c\u4e0d\u505a\u5c55\u5f00\u3002\\n\\n### \u547d\u4ee4\u6267\u884c Command Execution\\n\\n\u547d\u4ee4\u6267\u884c\u53ef\u4ee5\u662f\u7531\u4e00\u7ea7\u547d\u4ee4\u76f4\u63a5\u8c03\u7528\u5177\u4f53\u51fd\u6570\u6765\u5b8c\u6210\u3002\u8fd9\u79cd\u505a\u6cd5\u663e\u5f97\u592a\u6734\u7d20\u4e86\u3002\\n\\n\u501f\u52a9\u7b56\u7565\u6a21\u5f0f\uff0c\u547d\u4ee4\u6267\u884c\u901a\u8fc7\u5206\u53d1\uff0c\u5728\u5177\u4f53\u5b9e\u73b0\u7c7b\u4e2d\u53bb\u6267\u884c\u3002\u5206\u53d1\u7684\u5f62\u5f0f\u53ef\u4ee5\u4e0e\u524d\u9762\u63d0\u5230\u7684 _\u6a21\u5757\u5212\u5206_ \u7ed3\u5408\u8d77\u6765\uff0c\u6709\u5229\u4e8e\u4ee3\u7801\u7ed3\u6784\u8bbe\u8ba1\u3002\\n\\n### \u9519\u8bef\u5904\u7406 Error Handling\\n\\n\u5728 [\u6267\u884c\u8fc7\u7a0b](#\u6267\u884c\u8fc7\u7a0b-execution) \u4e2d\u53ef\u4ee5\u770b\u5230\u6574\u4f53\u8fc7\u7a0b\u662f\u4e32\u884c\u7684\u3002\u56e0\u6b64\u9519\u8bef\u5904\u7406\u8bbe\u8ba1\u663e\u5f97\u6bd4\u8f83\u5bb9\u6613\uff1a\\n\\n- \u6574\u4f53\u4e0a\u505a\u4e00\u4e2a\u5168\u5c40\u515c\u5e95\u9519\u8bef\u5904\u7406\u3002\\n\\n- \u6d41\u7a0b\u7684\u6bcf\u4e00\u6b65\u90fd\u53ef\u4ee5\u629b\u51fa\u5404\u81ea\u7684\u9519\u8bef\u5904\u7406\u3002\\n\\n\u4e25\u683c\u6765\u8bf4\uff0c\u9519\u8bef\u5904\u7406\u4e0d\u7b97\u662f CLI \u5de5\u5177\u5fc5\u8981\u5185\u5bb9\uff0c\u4f46\u662f\u826f\u597d\u7684\u9519\u8bef\u5904\u7406\u8bbe\u8ba1\u6709\u76ca\u4e8e\u5bf9 CLI \u7684\u6574\u4f53\u67b6\u6784\u3002\\n\\n### \u4ea4\u4e92 User Experience\\n\\n\u90e8\u5206\u573a\u666f\u4e0b\uff0c\u9700\u8981\u4e0e\u7528\u6237\u8fdb\u884c\u4ea4\u4e92\u6216\u8005\u4fe1\u606f\u5c55\u793a\uff0c\u5982\u8be2\u95ee\u5bc6\u7801 (prompt) \uff0c\u786e\u8ba4\u6b65\u9aa4\u6267\u884c (confirm) \uff0c\u8fdb\u5ea6\u6761 (progress) \u7b49\u3002\\n\\n\u826f\u597d\u7684\u4ea4\u4e92\u53cd\u9988\u80fd\u591f\u964d\u4f4e\u7528\u6237\u6267\u884c\u547d\u4ee4\u65f6\u7684\u7b49\u5f85\u7126\u8651\u3002\\n\\n### \u5176\u4ed6 Miscellany\\n\\n\u4ee5\u4e0b\u7701\u7565\u4e00\u4e9b\u6bd4\u8f83\u5c0f\u7684\u7ec6\u8282\u8bbe\u8ba1\uff0c\u6709\u5174\u8da3\u7684\u8bfb\u8005\u5efa\u8bae\u81ea\u5df1\u5b9e\u8df5\u3001\u81ea\u5df1\u603b\u7ed3\u3002\\n\\n- \u547d\u4ee4\u522b\u540d (command alias)\\n- \u6d4b\u8bd5 (testing)\\n- \u8c03\u8bd5 (debugger)\\n- \u65e5\u5fd7 (logger)\\n- \u6587\u6863 (documentation)\\n- \u8f93\u51fa\u683c\u5f0f (output)\\n- \u81ea\u52a8\u8865\u5168 (`<tab>` autocomplete)\\n\\n## \u603b\u7ed3 Wrap up\\n\\n\u4ece\u8f6f\u4ef6\u7684\u5c42\u9762\u6765\u770b\uff0cCLI \u5de5\u5177\u53ea\u662f\u4e00\u4e2a\u5f88\u5c0f\u7684\u5e94\u7528\u3002\u90a3\u4e9b\u9002\u7528\u4e8e\u8bbe\u8ba1\u4e00\u4e2a\u5065\u58ee\u7684\u5e94\u7528\u7684\u539f\u5219\uff0c\u540c\u6837\u9002\u7528\u4e8e CLI \u8bbe\u8ba1\u3002"},{"id":"/2022/05/30/architecture-design-imo","metadata":{"permalink":"/blog/2022/05/30/architecture-design-imo","source":"@site/blog/2022-05-30-architecture-design-imo.md","title":"\u67b6\u6784\u8bbe\u8ba1\u7684\u4e00\u4e9b\u54f2\u5b66\u7ecf\u9a8c","description":"\u7ecf\u8fc7\u591a\u4e2a\u9879\u76ee\u7684\u6d17\u793c\uff0c\u5f97\u5230\u4e86\u4e00\u4e9b\u7b80\u5355\u7684\u67b6\u6784\u8bbe\u8ba1\u7ecf\u9a8c\uff0c\u4e0b\u9762\u7684\u5185\u5bb9\u4ece\u7a0b\u5e8f\u89d2\u5ea6\u6765\u5c55\u5f00\uff0c\u4e0d\u6d89\u53ca\u4ea7\u54c1\u5c42\u9762\u7684\u529f\u80fd\u8bbe\u8ba1\u3002","date":"2022-05-30T00:00:00.000Z","formattedDate":"May 30, 2022","tags":[{"label":"architecture","permalink":"/blog/tags/architecture"},{"label":"philosophy","permalink":"/blog/tags/philosophy"}],"readingTime":4.555,"hasTruncateMarker":true,"authors":[],"frontMatter":{"title":"\u67b6\u6784\u8bbe\u8ba1\u7684\u4e00\u4e9b\u54f2\u5b66\u7ecf\u9a8c","tags":["architecture","philosophy"]},"prevItem":{"title":"\u8bbe\u8ba1\u4e00\u4e2a CLI \u5de5\u5177","permalink":"/blog/2022/06/11/design-a-cli-tool"},"nextItem":{"title":"Electron \u5e94\u7528\u7684\u7406\u60f3\u67b6\u6784\u8bbe\u8ba1","permalink":"/blog/2022/05/09/electron-application-architecture"}},"content":"\u7ecf\u8fc7\u591a\u4e2a\u9879\u76ee\u7684\u6d17\u793c\uff0c\u5f97\u5230\u4e86\u4e00\u4e9b\u7b80\u5355\u7684\u67b6\u6784\u8bbe\u8ba1\u7ecf\u9a8c\uff0c\u4e0b\u9762\u7684\u5185\u5bb9\u4ece\u7a0b\u5e8f\u89d2\u5ea6\u6765\u5c55\u5f00\uff0c\u4e0d\u6d89\u53ca\u4ea7\u54c1\u5c42\u9762\u7684\u529f\u80fd\u8bbe\u8ba1\u3002\\n\\n\u6240\u8c13\u67b6\u6784\u8bbe\u8ba1\uff0c\u6838\u5fc3\u8981\u70b9\u5c31\u4e24\u4e2a\u95ee\u9898\\n\\n1. \u6a21\u5757\u5212\u5206\uff0c\u5212\u5206\u4f9d\u636e\u662f\u4ec0\u4e48\\n\\n1. \u6a21\u5757\u8054\u7cfb\uff0c\u8054\u7cfb\u5a92\u4ecb\u662f\u4ec0\u4e48\\n\\n\x3c!--truncate--\x3e\\n\\n## \u6a21\u5757\u5212\u5206 Module Boundary\\n\\n\u5212\u5206\u6a21\u5757\uff0c\u80cc\u540e\u7684\u610f\u4e49\u5c31\u662f\u5c01\u88c5\uff0c\u5404\u79cd\u8bbe\u8ba1\u6a21\u5f0f\u7684\u539f\u5219\u5747\u6709\u6307\u5bfc\uff0c\u968f\u4fbf\u5217\u51e0\u4e2a\uff0c _\u5355\u4e00\u804c\u8d23\u539f\u5219\uff08Single Responsibility Principle\uff09_ \uff0c _\u5f00\u95ed\u539f\u5219\uff08Open-Close Principle\uff09_ \uff0c _\u4f9d\u8d56\u5012\u7f6e\u539f\u5219\uff08Dependence Inversion Principle\uff09_ \u3002\\n\\n\u5212\u5206\u6a21\u5757\u7684\u597d\u5904\u592a\u591a\u4e86\uff0c\u590d\u7528\u3001\u5355\u6d4b\u3001\u66ff\u6362\u3001\u5c01\u88c5\uff0c\u4e0d\u4e00\u800c\u8db3\u3002\\n\\n\u4e0a\u5347\u5230\u5e94\u7528\u5c42\u9762\uff0c\u6a21\u5757\u6709\u65f6\u5019\u4e5f\u88ab\u79f0\u4e3a\u7ec4\u4ef6\u3002\u5404\u4e2a\u7ec4\u4ef6\u6309\u7167\u67d0\u79cd\u5212\u5206\uff0c\u5904\u7406\u81ea\u8eab\u5173\u5fc3\u7684\u4e1a\u52a1\u903b\u8f91\uff0c\u901a\u8fc7\u67d0\u79cd\u901a\u4fe1\u673a\u5236\uff0c\u4e0e\u5176\u4ed6\u6a21\u5757\u8054\u7cfb\u3002\\n\\n## \u6a21\u5757\u8054\u7cfb Module Connection\\n\\n\u6a21\u5757\u4e4b\u95f4\u7684\u8054\u7cfb\uff0c\u662f\u67b6\u6784\u7684\u6838\u5fc3\u6240\u5728\uff0c\u4e5f\u662f\u5404\u79cd\u4e0d\u540c\u67b6\u6784\u6a21\u578b\u7684\u7279\u70b9\u3002\\n\\n\u6bd4\u5982 SpringBoot \u4e2d\u7684 _\u4f9d\u8d56\u6ce8\u5165_ \u65b9\u5f0f\uff0c\u5c06\u5404\u4e2a Service \u8054\u7cfb\u8d77\u6765\u4e86\u3002\\n\\n[Egg.js](https://www.eggjs.org/) \u4f5c\u4e3a\u4e00\u4e2a\u5c01\u88c5 Koa \u7684 NodeJS \u670d\u52a1\u7aef\u6846\u67b6\uff0cApplication / Context \u5bf9\u8c61\u4e2d\u4f1a\u6302\u8f7d\u591a\u4e2a\u5b9e\u4f8b\u3002\u8fd9\u4e9b\u5b9e\u4f8b\u5176\u5b9e\u5df2\u7ecf\u6709\u53d8\u76f8\u7684 \u201c\u4f9d\u8d56\u6ce8\u5165\u201d \uff08injection\uff09 \u610f\u5473\u3002\\n\\n\u9664\u4e86\u4f9d\u8d56\u6ce8\u5165\u4e0b\uff0c\u6a21\u5757\u4e4b\u95f4\u76f4\u63a5\u4f9d\u8d56\uff08\u5f15\u7528\uff09\u4e4b\u5916\uff0c\u8fd8\u6709 _\u4e8b\u4ef6\u9a71\u52a8\uff08Event-Driven\uff09_ \uff0c\u901a\u8fc7\u67d0\u4e2a\u5168\u5c40\u6216\u5355\u4f8b\u7684\u4e8b\u4ef6\u89e6\u53d1\uff0c\u5c06\u5404\u4e2a\u6a21\u5757\u8054\u7cfb\u8d77\u6765\u3002\\n\\nVS Code \u7684\u547d\u4ee4\u7cfb\u7edf\u5c31\u662f\u5982\u6b64\u3002\u5168\u5c40\u62e5\u6709\u4e00\u4e2a Command \u7cfb\u7edf\uff0c\u4e0d\u540c\u7684\u6a21\u5757\u5411 Command \u6ce8\u518c\u547d\u4ee4\uff0c\u56de\u8c03\u51fd\u6570\u3002\u5176\u4ed6\u6a21\u5757\u8c03\u7528 \u547d\u4ee4\uff0c\u4f20\u5165\u53c2\u6570\uff0c\u7b49\u5f85\u6267\u884c\u7ed3\u679c\u3002\\n\\n\u4e8b\u4ef6\u9a71\u52a8\u6709\u5f88\u591a\u79cd\u53d8\u5f62\uff0c\u5982 _\u6d88\u606f\u961f\u5217_ \uff0c _\u53d1\u5e03-\u8ba2\u9605_ \uff0c _\u751f\u4ea7\u8005-\u6d88\u8d39\u8005_ \u7b49\u7b49\u3002\\n\\n\u4e0a\u5347\u5230\u8de8\u8fdb\u7a0b\u3001\u8de8\u5e94\u7528\u7684\u5c42\u9762\uff0c\u4ea7\u751f\u4e86 socket\uff0cIPC \u548c \u7f51\u7edc \u7b49\u8054\u7cfb\u5a92\u4ecb\u3002\u6b64\u65f6\uff0c\u8003\u8651\u7684\u67b6\u6784\u4e3b\u4f53\u53d1\u751f\u4e86\u5347\u7ea7\u3002\\n\\n\u6bd4\u65b9\u8bf4\uff0c\u5f53\u8bbe\u8ba1\u4e00\u4e2a\u64cd\u4f5c\u7cfb\u7edf\u65f6\uff0c\u5e94\u7528\u89c6\u4f5c\u6a21\u5757\uff0c\u5404\u81ea\u642c\u7816\uff0c\u5e94\u7528\u4e4b\u95f4\u8054\u7cfb\u5219\u53ef\u4ee5\u901a\u8fc7 socket \u901a\u4fe1\uff08\u5f53\u7136\u8fd8\u6709\u5176\u4ed6\u7684\u65b9\u5f0f\uff09\u3002\\n\\n\u6bd4\u65b9\u8bf4\uff0c\u8bbe\u8ba1 kubernetes \u7684\u65f6\u5019\uff0c\u4e0d\u540c\u90fd Service \u5e94\u7528\u89c6\u4f5c\u6a21\u5757\uff0c\u901a\u8fc7 Ingress \u8fdb\u884c\u8054\u7cfb\uff08\u6b64\u5904\u5c4f\u853d\u4e86\u5f88\u591a\u7ec6\u8282\uff0c\u4e0d\u505a\u8fc7\u591a\u5c55\u5f00\uff09\u3002\\n\\n> \u5199\u8fd9\u4e24\u5c0f\u8282\u65f6\uff0c\u6211\u8111\u4e2d\u7a81\u7136\u60f3\u8d77\u4e86 Structure and Interpretation of Computer Programs \u8fd9\u672c\u4e66\u3002\u8be5\u4e66\u5728\u89e3\u91ca\u8ba1\u7b97\u673a\u7a0b\u5e8f\u6267\u884c\u3001\u5b9e\u73b0\u7684\u8fc7\u7a0b\u4e2d\uff0c\u4e5f\u89e3\u91ca\u4e86\u7a0b\u5e8f\u8bbe\u8ba1\u7684\u4e00\u4e9b\u539f\u5219\u3002\u6781\u529b\u63a8\u8350\u3002\\n\\n## \u54f2\u5b66\u601d\u8003\\n\\n\u5927\u90e8\u5206\u8bbe\u8ba1\u6a21\u5f0f\u4e66\u7c4d\u901a\u5e38\u4f1a\u7ed9\u51fa\u4e00\u4e9b\u5b9e\u9645\u4f8b\u5b50\uff0c\u89e3\u91ca\u8bbe\u8ba1\uff0c\u987a\u5e26\u7ed9\u51fa\u4e00\u4e9b\u8bbe\u8ba1\u539f\u5219\u3002\u4f46\u662f\u9003\u4e0d\u5f00\u4e0a\u9762\u4e24\u70b9\u8003\u91cf\u3002\\n\\n\u73b0\u5728\u628a\u4e0a\u8ff0\u8bbe\u8ba1\u601d\u8def\u63a8\u5e7f\u5230\u516c\u53f8\u67b6\u6784\u8bbe\u8ba1\u3002\\n\\n\u4e00\u4e2a\u516c\u53f8\u9700\u8981\u5404\u4e2a\u90e8\u95e8\uff0c\u5982\u91c7\u8d2d\u3001\u751f\u4ea7\u3001\u4ed3\u50a8\u3001\u8fd0\u8425\u3001\u5e02\u573a\u3001\u9500\u552e\u3001\u5ba2\u670d\u3001\u7814\u53d1\u3001\u884c\u653f\u3001GP \u7b49\u7b49\uff0c\u89e3\u51b3\u516c\u53f8\u5b58\u7eed\u3001\u53d1\u5c55\u65f6\u7684\u5404\u79cd\u4e8b\u60c5\u3002\u8fd9\u5c31\u662f\u6a21\u5757\u5212\u5206\u3002\\n\\n\u5404\u4e2a\u90e8\u95e8\u4e4b\u95f4\u901a\u8fc7\u529e\u516c\u534f\u540c\u8f6f\u4ef6\u6c9f\u901a\u3001\u5bf9\u9f50\u76ee\u6807\u3001\u540c\u6b65\u4fe1\u606f\u3001\u4efb\u52a1\u6d3e\u53d1\u4e0e\u63a8\u8fdb\u3002\u8fd9\u5c31\u662f\u6a21\u5757\u8054\u7cfb\u3002\\n\\n\u518d\u5f80\u4e0a\uff0c\u53ef\u4ee5\u63a8\u5e7f\u5230\u5404\u79cd\u793e\u4f1a\u7ec4\u7ec7\uff0c\u6211\u5c31\u4e0d\u4e3e\u4f8b\u4e86\uff08\u624b\u52a8\u72d7\u5934\uff09\u3002\\n\\n\u76f4\u63a5\u5230\u6700\u9ad8\u5883\u754c\\n\\n1. \u6a21\u5757\u5212\u5206\uff0c\u5c31\u662f\u5c06\u6574\u4f53\u62c6\u89e3\u5230\u5c40\u90e8\uff0c\u5206\u3002\\n1. \u6a21\u5757\u8054\u7cfb\uff0c\u5c31\u662f\u5c40\u90e8\u91cd\u65b0\u7ec4\u6210\u6574\u4f53\uff0c\u5408\u3002\\n\\n\u6536\u56de\u5230\u8fd9\u7bc7\u6587\u7ae0\uff0c\u5404\u4e2a\u5c0f\u8282\u5206\u522b\u5c55\u793a\u89c2\u70b9\uff0c\u8fd9\u5c31\u662f\u5206\uff0c\u6240\u6709\u5c0f\u8282\u7684\u4e3b\u7ebf\u5c31\u662f\u4e3a\u4e86\u8bf4\u660e\u67b6\u6784\u8bbe\u8ba1\uff0c\u8fd9\u5c31\u662f\u5408\u3002\\n\\nQ.E.D"},{"id":"/2022/05/09/electron-application-architecture","metadata":{"permalink":"/blog/2022/05/09/electron-application-architecture","source":"@site/blog/2022-05-09-electron-application-architecture.md","title":"Electron \u5e94\u7528\u7684\u7406\u60f3\u67b6\u6784\u8bbe\u8ba1","description":"\u6700\u8fd1\u5728\u6298\u817e Electron \u76f8\u5173\u7684\u5e94\u7528\uff0c\u4e00\u53e3\u6c14\u8ddf\u7740 Udemy \u7684\u6559\u7a0b\u5b66\u4e86\u4e00\u4e9b\u5165\u95e8\u7ea7\u7684\u5f00\u53d1\u5b9e\u8df5\uff0c\u5982 Electron for Desktop Apps Build Desktop Apps With JavaScript \u3002\u8fd9\u4e9b\u8bfe\u7a0b\u901a\u8fc7\u51e0\u4e2a\u5c0f\u5de7\u7684\u5e94\u7528\u6765\u4ecb\u7ecd\u5982\u4f55\u4f7f\u7528 Electron \u5f00\u53d1\uff0c\u90fd\u662f\u6bd4\u8f83\u9002\u5408\u65b0\u624b\u5165\u95e8\u3002","date":"2022-05-09T00:00:00.000Z","formattedDate":"May 9, 2022","tags":[{"label":"electron","permalink":"/blog/tags/electron"},{"label":"architecture","permalink":"/blog/tags/architecture"}],"readingTime":10.215,"hasTruncateMarker":true,"authors":[],"frontMatter":{"title":"Electron \u5e94\u7528\u7684\u7406\u60f3\u67b6\u6784\u8bbe\u8ba1","tags":["electron","architecture"]},"prevItem":{"title":"\u67b6\u6784\u8bbe\u8ba1\u7684\u4e00\u4e9b\u54f2\u5b66\u7ecf\u9a8c","permalink":"/blog/2022/05/30/architecture-design-imo"},"nextItem":{"title":"Type vs Interface","permalink":"/blog/2022/04/04/type-vs-interface"}},"content":"\u6700\u8fd1\u5728\u6298\u817e Electron \u76f8\u5173\u7684\u5e94\u7528\uff0c\u4e00\u53e3\u6c14\u8ddf\u7740 Udemy \u7684\u6559\u7a0b\u5b66\u4e86\u4e00\u4e9b\u5165\u95e8\u7ea7\u7684\u5f00\u53d1\u5b9e\u8df5\uff0c\u5982 [Electron for Desktop Apps: The Complete Developer\'s Guide](https://www.udemy.com/course/electron-react-tutorial/)\uff0c\u6216\u8005 [Electron From Scratch: Build Desktop Apps With JavaScript](https://www.udemy.com/course/electron-from-scratch/) \u3002\u8fd9\u4e9b\u8bfe\u7a0b\u901a\u8fc7\u51e0\u4e2a\u5c0f\u5de7\u7684\u5e94\u7528\u6765\u4ecb\u7ecd\u5982\u4f55\u4f7f\u7528 Electron \u5f00\u53d1\uff0c\u90fd\u662f\u6bd4\u8f83\u9002\u5408\u65b0\u624b\u5165\u95e8\u3002\\n\\n\u4f46\u662f\u54b1\u4e5f\u60f3\u8fbe\u5230\u767b\u5802\u5165\u5ba4\u7684\u5c42\u6b21\u5440\uff0cVS Code \u7684\u4ee3\u7801\u5b9e\u5728\u96be\u5543\u3002\u6240\u4ee5\u627e\u4e86\u51e0\u4e2a\u9879\u76ee\u590d\u6742\u5ea6\u4e2d\u7b49\u7684\u5f00\u6e90\u9879\u76ee\u5b66\u4e60\u4e86\u4e00\u6ce2\u3002\\n\\n## Motrix\\n\\n[Motrix](https://github.com/agalwood/Motrix) \u662f\u4e00\u4e2a\u754c\u9762\u975e\u5e38\u53cb\u597d\u7684\u4e0b\u8f7d\u5668\uff0c\u4e3b\u8981\u6280\u672f\u6808\u5305\u62ec\u4e86 Electron \u3001 Vue \u3001webpack \u7b49\u3002\\n\\n\u4ee3\u7801\u7ed3\u6784\u5f88\u6e05\u6670\uff0c\u89e3\u51b3\u95ee\u9898\u65f6\u4f7f\u7528\u7684 npm package \u4e5f\u5f88\u7b80\u5355\u3002\u503c\u5f97\u5b66\u4e60\u3002\\n\\n\x3c!--truncate--\x3e\\n\\n\u4e0b\u9762\u7b80\u5355\u8bf4\u660e\u4e00\u4e0b Motrix \u4e2d Main \u548c Renderer \u7684\u67b6\u6784\u5212\u5206\u3002\\n\\n> \u867d\u7136 Main \u91cc\u9762\u6ca1\u91c7\u7528\u5df2\u6709\u7684 DI \u6846\u67b6\uff0c\u4f46\u662f\u5176\u4e2d\u5355\u4f8b\u6a21\u5f0f\u7684\u4f7f\u7528\u5904\u5904\u53ef\u89c1\u3002\\n>\\n> \u6269\u5c55 Electron \u7c7b\u578b\u7684 [d.ts](https://github.com/vercel/hyper/blob/canary/app/extend-electron.d.ts) \u3002\\n\\n**Main \u8d1f\u8d23\u7684\u529f\u80fd**\\n\\n- \u5b9e\u4f8b\u5316 Launcher \uff0c\u4e3b\u8981\u5904\u7406 app \u5c42\u9762\u7684\u4e8b\u4ef6\uff0c\u5982 \u6587\u4ef6\u6253\u5f00\uff0c\u5355\u4f8b\u7a97\u53e3 \u7b49\u3002\\n\\n- \u5b9e\u4f8b\u5316 Application \u5e94\u7528\u6a21\u5757\uff0c\u54cd\u5e94 renderer \u7684\u4e8b\u4ef6\uff0c\u7136\u540e\u4ea4\u7ed9\u5404\u4e2a\u5355\u4f8b\u53bb\u6267\u884c\u3002\\n\\n- Application \u7ee7\u627f\u4e8e Node \u539f\u751f\u7684 EventEmitter \uff0c\u5185\u90e8\u7ef4\u62a4\u7684\u5355\u4f8b\u5305\u62ec\u6709\\n\\n  - \u914d\u7f6e Configuration \uff08\u4f9d\u8d56\u4e8e [electron-store](https://github.com/sindresorhus/electron-store)\uff09\\n  - \u83dc\u5355 Menu\\n  - \u7cfb\u7edf\u6258\u76d8 Tray\\n  - \u4e0b\u8f7d\u5f15\u64ce Aria2 \uff08\u4e0b\u8f7d\u5de5\u5177\uff09\\n  - \u7a0b\u5e8f\u575e Dock\uff08macOS \u4e13\u5c5e\uff09\\n  - Touch Bar \uff08macOS \u4e13\u5c5e\uff09\\n  - \u7535\u6c60\u6a21\u5757 \uff08electron \u63d0\u4f9b\u7684 [powerSaveBlocker](https://www.electronjs.org/ru/docs/latest/api/power-save-blocker)\uff09\\n  - \u6587\u4ef6\u5904\u7406 \uff08\u5e94\u7528\u6253\u5f00 BT \u6587\u4ef6\u76f4\u63a5\u6253\u5f00\u65f6\u54cd\u5e94\uff09\\n  - \u7a97\u53e3\u7ba1\u7406 \uff08renderer \u542f\u52a8\u7684 BrowserWindow \u7edf\u4e00\u7ba1\u7406\uff09\\n\\n**Renderer \u8d1f\u8d23\u7684\u529f\u80fd**\\n\\n\u4e3b\u8981\u8d1f\u8d23\u7528\u6237\u7684\u4ea4\u4e92\uff0c\u4e3b\u8981\u4f7f\u7528\u4e86 Vue \u4f5c\u4e3a UI library\u3002\u7ec4\u4ef6\u901a\u8fc7 Vuex \u89e6\u53d1\uff0c\u518d\u501f\u7531 [ipcRenderer](https://www.electronjs.org/docs/latest/api/ipc-renderer) \u4e0e Main \u8fdb\u884c\u901a\u4fe1\u3002\\n\\nVuex \u627f\u62c5\u4e86\u72b6\u6001\u7ba1\u7406\u7684\u804c\u8d23\uff0cVueRouter \u627f\u62c5\u4e86 SPA \u4e2d\u9875\u9762\u5207\u6362\u7684\u804c\u8d23\u3002\\n\\n> \u5728 Main \u4e2d\uff0c[ipcMain](https://www.electronjs.org/docs/latest/api/ipc-main) \u76d1\u542c\u5230\u7684\u4e8b\u4ef6\u53c8\u56de\u901a\u8fc7 Application \u8fdb\u884c emit \uff0c\u89e6\u53d1\u540e\u7eed\u52a8\u4f5c\u3002\\n\\n**\u6574\u4f53**\\n\\n\u5957\u7528\u4e3b\u6d41 web \u5e94\u7528\u7684\u89c6\u89d2\uff0c\u5c31\u80fd\u5f88\u5bb9\u6613\u7406\u89e3 Motrix \u7684\u67b6\u6784\u8bbe\u8ba1\u3002\\n\\n- Main \u76f8\u5f53\u4e8e\u4e00\u4e2a Server\uff0c\u5904\u7406\u5404\u79cd\u6d89\u53ca OS \u7684\u64cd\u4f5c\uff0c\u5982\u6570\u636e\u6301\u4e45\u5316\u3001\u7cfb\u7edf\u7ea7\u7684\u4e8b\u4ef6\u54cd\u5e94\u3002\\n- Renderer \u76f8\u5f53\u4e8e Web \u754c\u9762\uff0c\u54cd\u5e94\u7edd\u5927\u90e8\u5206\u7684\u7528\u6237\u4ea4\u4e92\uff0cRenderer \u51e0\u4e4e\u6ca1\u6709\u4efb\u4f55 OS \u76f8\u5173\u7684\u5de5\u4f5c\u91cf\u3002\\n- ipcMain / ipcRenderer \u7ea6\u7b49\u4e8e\u7f51\u7edc\uff0c\u627f\u8f7d\u4e86\u901a\u4fe1\u804c\u8d23\u3002\\n\\n## Hyper\\n\\n[hyper](https://github.com/vercel/hyper) \u7684\u662f\u4e00\u6b3e\u57fa\u4e8e Electron \u7684\u547d\u4ee4\u884c\u7ec8\u7aef\u3002\\n\\n**Renderer**\\n\\n\u53ef\u4ee5\u8bf4\u662f\u6807\u51c6\u7684 React \u5e94\u7528\u4e86\uff0c\u6280\u672f\u6808\u4e3b\u8981\u662f react + redux\u3002\\n\\n[\u7ec8\u7aef\u5b9e\u4f8b](https://github.com/vercel/hyper/blob/canary/lib/containers/terms.ts) \u5219\u5c01\u88c5\u4e86 [XTerm](https://www.npmjs.com/package/xterm)\u3002\\n\\n**Main**\\n\\n\u663e\u7136\uff0cRenderer \u4e0d\u592a\u4f1a\u6267\u884c\u5f88\u91cd\u7684\u8fdb\u7a0b\u903b\u8f91\uff0c\u5b83\u901a\u8fc7 ipcRenderer \u5411 Main \u53d1\u9001\u4efb\u52a1\u6d88\u606f\uff0cMain \u8fdb\u7a0b\u6267\u884c `exec` \u6216\u8005 `execFile` \uff0c\u5e76\u5c06\u7ed3\u679c `stdout` \u548c `stderr` \u7684\u4fe1\u606f\u53cd\u9988\u56de\u53bb\u3002\\n\\n**\u901a\u4fe1 Message**\\n\\n\u4f5c\u4e3a\u4e00\u4e2a\u7ec8\u7aef\uff0chyper \u514d\u4e0d\u4e86\u8981\u7ba1\u7406\u591a\u4e2a [BrowserWindow](https://www.electronjs.org/docs/latest/api/browser-window) \u5b9e\u4f8b\u3002\u4e3a\u4e86\u89e3\u51b3\u901a\u4fe1\u95ee\u9898\uff0chyper \u5728\u6bcf\u4e2a BrowserWindow \u521b\u5efa\u7684\u65f6\u5019\uff0cmain \u8fdb\u7a0b\u4e00\u65b9\u9762\u901a\u8fc7 Set \u5b58\u50a8\u4e86\u8be5\u5b9e\u4f8b\uff0c\u53e6\u4e00\u65b9\u9762\u7ed9\u8be5\u5b9e\u4f8b\u589e\u52a0\u4e86\u4e00\u4e2a [rpc \u5c5e\u6027](https://github.com/vercel/hyper/blob/canary/app/rpc.ts#L40-L46) \uff0c\u63d0\u4f9b\u4e86 _main->renderer_ \u6d88\u606f\u53d1\u9001\u7684\u5feb\u6377\u65b9\u5f0f\u3002\\n\u540c\u65f6\u5728 BrowserWindow \u5185\u90e8\uff0cwindow \u5168\u5c40\u4e5f\u6302\u4e86\u4e00\u4e2a [rpc \u5bf9\u8c61](https://github.com/vercel/hyper/blob/canary/lib/utils/rpc.ts)\uff0c\u63d0\u4f9b _renderer->main_ \u6d88\u606f\u53d1\u9001\u7684\u5feb\u6377\u65b9\u5f0f\u3002\\n\\n**\u547d\u4ee4 commands**\\n\\n`Main` \u548c `Renderer` \u90fd\u7ef4\u62a4\u4e86\u7684\u547d\u4ee4\u96c6 `Map<string,callback>` \u3002\u8fd9\u6837\u4e00\u6765\uff0c\u4e8b\u4ef6\u7684\u8c03\u7528\u5c31\u4f1a\u53d8\u5f97\u5f88\u5bb9\u6613\u3002\\n\\n\u53ef\u80fd\u662f\u56e0\u4e3a\u6ca1\u6709\u5177\u4f53\u573a\u666f\uff0chyper \u5e76\u6ca1\u6709\u5b9e\u73b0\u6ce8\u518c\u673a\u5236\u3002\\n\\n## Wexond Browser\\n\\n\u8fd9\u662f\u4e00\u4e2a\u5957 Electron \u7684\u6d4f\u89c8\u5668\u3002\\n\\n**Main**\\n\\n\u901a\u8fc7\u9605\u8bfb [application.ts](https://github.com/wexond/browser-base/blob/master/src/main/application.ts#L18-L28) \u7684\u4ee3\u7801\uff0c\u4e0d\u96be\u53d1\u73b0\u5176\u91c7\u7528\u4e86\u5355\u4f8b\u6a21\u5f0f\u3002\\n\\nStorageService \u8d1f\u8d23\u5b58\u50a8\uff0c\u5177\u4f53\u5a92\u4ecb\u91c7\u7528\u4e86 [nedb](https://github.com/louischatriot/nedb) \u3002\\n\\nWindowsService \u8d1f\u8d23\u7ba1\u7406\u591a\u4e2a [`AppWindow`](https://github.com/wexond/browser-base/blob/master/src/main/windows/app.ts) \uff08\u5c01\u88c5\u7684 BrowserWindow \uff09 \u5b9e\u4f8b\uff0c\u6bcf\u4e2a `AppWindow` \u5b9e\u4f8b\u901a\u8fc7 [`ViewManager`](https://github.com/wexond/browser-base/blob/master/src/main/view-manager.ts) \u7ba1\u7406\u591a\u4e2a [BrowserView](https://www.electronjs.org/docs/latest/api/browser-view) \u5b9e\u4f8b\uff0c\u8fd9\u4e9b [`View`](https://github.com/wexond/browser-base/blob/master/src/main/view.ts) \u5c31\u662f\u6700\u7ec8\u5448\u73b0 \u6d4f\u89c8\u5668\u5730\u5740 \u5185\u5bb9\u7684\u9875\u9762\u8f7d\u4f53\u3002\\n\\nDialogService \u5219\u4f1a\u6302\u5230 BrowserWindow \u4e0a\uff0c\u6210\u4e3a\u4e00\u4e9b\u7528\u6237\u4ea4\u4e92\u7ec4\u4ef6\uff0c\u4f8b\u5982 \u641c\u7d22\u6846 \u3002\\n\\nMain \u7684 [`webpack.config.js`](https://github.com/wexond/browser-base/blob/master/webpack.config.js#L62-L86) \u4e2d\u6709\u5173\u4e8e Hot Reload Electron \u7684\u601d\u8def\u53ef\u4ee5\u501f\u9274\u4e00\u6ce2\u3002\\n\\n**Renderer**\\n\\n`AppWindow` \u4f1a\u8f7d\u5165 app.html \uff0c\u6210\u4e3a\u4e00\u4e2a\u5177\u6709 Tab \u680f + \u5de5\u5177\u680f\uff08\u542b\u5730\u5740\u6846\uff09 + \u4e66\u7b7e\u680f + \u9875\u9762\u8f7d\u4f53\u7684 \u521d\u59cb\u5316 \u7a97\u53e3\u3002app.html \u5176\u5b9e\u5360\u636e\u7684\u5185\u5bb9\u975e\u5e38\u6709\u9650\uff0c\u53ea\u662f\u7a97\u53e3\u9876\u90e8\u4e00\u5c0f\u90e8\u5206\u3002\\n\\napp.html \u52a0\u8f7d\u5b8c\u6210\u540e\uff08\u8df3\u8fc7\u5f88\u591a\u5b9e\u4f8b\u5316\u8fc7\u7a0b\uff09\uff0c\u5176\u5185\u5728 store service \u4f1a ipcRenderer \u53d1\u9001\u4e00\u6761 `views-create-${windowId}` \u7684\u4e8b\u4ef6\uff0cMain \u8fdb\u7a0b\u4e2d\u5bf9\u5e94 `windowId` \u7684 BrowserWindow \u4f1a\u8c03\u7528\u5176\u4e13\u5c5e\u7684 `ViewManager` \u521b\u5efa\u5bf9\u5e94\u7684 tab \uff0c\u521b\u5efa\u5b8c\u4e4b\u540e\u8fdb\u884c select \uff0c\u9009\u62e9\u4e86\u6fc0\u6d3b\u7684 tab view \u9875\u9762 \u4e3b\u4f53\uff0c\u540c\u65f6\u4f1a setBounds \u5b8c\u5168\u5360\u636e\u7a97\u53e3\u7684\u4e0b\u534a\u90e8\u5206\u3002\\n\\n**\u901a\u4fe1**\\n\\n\u9879\u76ee\u4f7f\u7528\u4e86\u4e13\u95e8\u5c01\u88c5\u7684 [@wexond/rpc-electron](https://github.com/wexond/rpc) \u6765\u89e3\u51b3\u901a\u4fe1\u95ee\u9898\uff0c\u8fd9\u6837\u5728 Renderer \u548c Main \u4e4b\u95f4\u5c31\u4e0d\u9700\u8981\u76f4\u63a5\u7684 send / on \u4e8b\u4ef6\u4e86\uff0c\u800c\u4e14\u7c7b\u578b\u63a8\u5bfc\u53d8\u5f97\u66f4\u52a0\u65b9\u4fbf\u3002\u601d\u8def\u662f\u975e\u5e38\u597d\u7684\uff0c\u5177\u4f53\u5b9e\u73b0\u53ef\u4ee5\u770b\u5176\u6e90\u7801\u3002\\n\\n## VS Code\\n\\n> VS Code \u7684 Renderer \u6bd4 Main \u505a\u7684\u4e8b\u60c5\u8981\u91cd\u5f88\u591a\uff0c\u4e5f\u96be\u602a VS Code \u9010\u6e10\u5f00\u59cb\u5403\u5185\u5b58\u4e86\u3002\\n\\n\u5173\u4e8e VS Code\uff0c\u7f51\u4e0a\u5173\u4e8e VS Code \u67b6\u6784\u8bbe\u8ba1\u3001\u6e90\u7801\u5206\u6790\u7684\u6587\u7ae0\u4e00\u6293\u4e00\u5927\u628a\uff0c\u800c\u6211\u9274\u4e8e\u80fd\u529b\u6709\u9650\uff0c\u53ea\u80fd\u8bf4\u4e00\u70b9\u70b9\u76ae\u6bdb\u3002\\n\\n- VS Code \u81ea\u5df1\u5b9e\u73b0\u4e86\u4e00\u5957\u4f9d\u8d56\u6ce8\u5165\u4e86\uff0cDI \u7684\u4f7f\u7528\u6781\u5927\u5730\u7b80\u5316\u4e86\u4ee3\u7801\u4e4b\u95f4\u7684\u5f15\u7528\u95ee\u9898\u3002\\n- Renderer \u8fdb\u7a0b\u4e0d\u4ec5\u4ec5\u662f\u4e2a\u7528\u6237\u4ea4\u4e92\u54cd\u5e94\uff0c\u8fd8\u627f\u62c5\u4e86\u5927\u91cf\u7684 OS \u76f8\u5173\u5de5\u4f5c\uff0c\u4e3e\u4f8b\u5982\u6bcf\u4e2a\u7f16\u8f91\u5668\u7a97\u53e3\u90fd\u6709\u81ea\u5df1\u7684\u63d2\u4ef6\u8fdb\u7a0b\u3002\\n- [Event](https://github.com/microsoft/vscode/blob/main/src/vs/base/common/event.ts) \u7684\u8bbe\u8ba1\uff0c\u4f7f\u5f97\u4e8b\u4ef6\u76d1\u542c\u53d8\u5f97\u5bb9\u6613\u6eaf\u6e90\uff0c\u4e0d\u518d\u4f1a on / emit \u6ee1\u5929\u98de\u4e86\uff0c\u800c\u4e14\u7c7b\u578b\u63a8\u5bfc\u4e5f\u53d8\u7684\u5f88\u5bb9\u6613\u5b9e\u73b0\u3002\\n- \u547d\u4ee4\u7cfb\u7edf / Action \u7684\u8bbe\u8ba1\uff0c\u4f7f\u5f97 service \u7684\u4f9d\u8d56\u53ef\u4ee5\u5728\u4e00\u5b9a\u7a0b\u5ea6\u4e0a\u89e3\u8026\uff0c\u4e5f\u4e3a\u540e\u7eed extensions \u63d0\u4f9b\u547d\u4ee4\u8c03\u7528/\u547d\u4ee4\u6ce8\u518c\u7684\u81ea\u7531\u5e26\u6765\u4e86\u53ef\u80fd\u6027\u3002\uff08\u574f\u5904\u5c31\u662f \u8c03\u7528 \u4e0d\u80fd\u5728\u7b2c\u4e00\u65f6\u95f4\u6eaf\u6e90\u5230 \u6ce8\u518c\uff09\\n- ProxyChannel \u53d6\u4ee3\u4e86\u76f4\u63a5\u4f7f\u7528 ipcMain / ipcRenderer \u7684\u901a\u4fe1\uff0c\u80fd\u591f\u652f\u6301 browser window \u4e4b\u95f4\u7684\u901a\u4fe1\u3002\\n- \uff08\u60f3\u5230\u4e86\u518d\u8865\u5145\uff0c\u5176\u5b9e\u5c31\u662f\u9e3d\u4e86\u7684\u610f\u601d\uff09\\n\\n## \u91cd\u65b0\u8bbe\u8ba1\\n\\n\u4e0b\u9762\u57fa\u4e8e Electron\uff0c\u8bbe\u8ba1\u4e00\u6b3e\u6211\u60f3\u8981\u7684\u684c\u9762\u5e94\u7528\u8f6f\u4ef6\u67b6\u6784\u3002\\n\\nMain \u548c Renderer \u5747\u91c7\u7528\u67d0\u79cd DI \u6846\u67b6\u3002\u4e0d\u540c\u7684 BrowserWindow \u4e2d\uff0c\u5404\u81ea\u5177\u6709\u72ec\u6709\u4e00\u9897 DI \u6811\u3002\uff08\u6211\u5c31\u662f\u8fd9\u4e48\u559c\u6b22\u4f9d\u8d56\u6ce8\u5165\uff09\\n\\nMain \u5fc5\u8981\u5730\u7ef4\u62a4\u4ee5\u4e0b\u529f\u80fd\\n\\n- **Store** \u6301\u4e45\u5316\u6570\u636e\u7684\u62bd\u8c61\\n- **Message** \u6d88\u606f\u4e2d\u5fc3\uff0c\u5c01\u88c5 ipcMain \u7684\u529f\u80fd\uff0c\u627f\u62c5 _Main<--\x3eRenderer_ \u4e4b\u95f4\u901a\u4fe1\u4efb\u52a1\\n- **Command** \u4ee5\u547d\u4ee4\u7cfb\u7edf\u4ee3\u66ff Service \u4e4b\u95f4\u7684\u76f4\u63a5\u4f9d\u8d56\\n- **Context** Main \u6267\u884c\u7684\u4e0a\u4e0b\u6587\uff0c\u57fa\u672c\u4e0a\u5c31\u662f app \u76f8\u5173\u529f\u80fd\u7684\u6269\u5c55\\n- **Logger** \u65e5\u5fd7\u7cfb\u7edf\\n- **Network** \u7edf\u4e00\u7684\u7f51\u7edc\u57fa\u7840\uff0c\u65b9\u4fbf\u4ee3\u7406\u7684\u914d\u7f6e\\n- **WindowManager** \u7ba1\u7406\u5404\u4e2a BrowserWindow \u7684\u5b9e\u4f8b\\n- **Configuration/Preference** \u914d\u7f6e\u5185\u5bb9\\n- **User** \u7528\u6237\u6570\u636e\\n- **Menu** \u5c01\u88c5 app \u76f8\u5173\u83dc\u5355\u529f\u80fd\uff0c\u53ef\u4ee5\u5b9e\u73b0\u83dc\u5355\u7684\u53d8\u66f4\\n- **AutoUpdater** \u5e94\u7528\u81ea\u52a8\u66f4\u65b0\u673a\u5236\\n\\nMain \u53ef\u9009\u7684\u529f\u80fd\u6709\\n\\n- **Metrics** \u76d1\u63a7\u7cfb\u7edf\\n- **Theme** \u4e3b\u9898\u914d\u8272\u652f\u6301\\n- **Tray** \u5c01\u88c5 Electron \u7684 Tray \u529f\u80fd\uff0c\u5b9e\u73b0\u7cfb\u7edf\u6258\u76d8\u56fe\u6807\u76f8\u5173\u529f\u80fd\\n- **Notification** \u5c01\u88c5\u540e\u7684\u901a\u77e5\u529f\u80fd\uff0c\u7cfb\u7edf\u7ea7\u522b\u7684\u6d88\u606f\u901a\u77e5\\n- **ChildProcess** \u67d0\u4e9b\u4efb\u52a1\u901a\u8fc7\u5b50\u8fdb\u7a0b\u7684\u5f62\u5f0f\u53bb\u6267\u884c\uff0c\u51cf\u8f7b Main \u7684\u538b\u529b\\n- **EventEmitter** service \u4e4b\u95f4\u53ef\u80fd\u5b58\u5728\u76f8\u4e92\u76d1\u542c\u7684\u9700\u8981\uff0c\u901a\u8fc7 \u751f\u4ea7\u8005-\u6d88\u8d39\u8005 \u7684\u6a21\u5f0f\u6765\u89e3\u51b3\u95ee\u9898\\n\\nRenderer \u5219\u54cd\u5e94\u7528\u6237\u4ea4\u4e92\uff0c\u5f62\u6001\u4e3a\u57fa\u7840 web \u5e94\u7528 + Node features\\n\\n- \u4efb\u610f\u7684\u524d\u7aef\u6846\u67b6\u3001UI \u5e93\u5747\u53ef\uff0c\u5448\u73b0 web\\n- **Store** \u72b6\u6001\u7ba1\u7406\u5de5\u5177\\n- **Router** \u8def\u7531\uff0c\u9875\u9762\u52a8\u6001\u5207\u6362\\n- **Network** \u5fc5\u8981\u7684\u7f51\u7edc\u8bf7\u6c42\u57fa\u7840\\n- **Message** \u6d88\u606f\u4e2d\u5fc3\uff0c\u4e0e Main \u901a\u4fe1\u7684\u552f\u4e00 \u201c\u63ae\u5ba2\u201d \uff0c\u5f88\u591a\u529f\u80fd\u9700\u8981 Main \u6765\u6267\u884c\u6216\u5206\u53d1\u3002\\n\\nRenderer \u53ef\u9009\u7684\u529f\u80fd\\n\\n- **ChildProcess** BrowserWindow \u4e5f\u662f\u4e2a Node \u73af\u5883\uff0c\u56e0\u6b64\u53ef\u4ee5\u5c06\u4efb\u52a1\u6d3e\u7ed9\u5b50\u8fdb\u7a0b\u3002\\n- **Command** \u547d\u4ee4\u7cfb\u7edf\uff0c\u89e3\u8026 Service\uff0c\u53c2\u8003 vscode \uff0c\u6bcf\u4e2a\u7f16\u8f91\u5668 window \u90fd\u6709\u4e00\u5757\u81ea\u5df1\u7684\u547d\u4ee4\u7cfb\u7edf\u5b9e\u4f8b\u3002\\n- **EventEmitter** service \u4e4b\u95f4\u53ef\u80fd\u5b58\u5728\u76f8\u4e92\u76d1\u542c\u7684\u9700\u8981\uff0c\u901a\u8fc7 \u751f\u4ea7\u8005-\u6d88\u8d39\u8005 \u7684\u6a21\u5f0f\u6765\u89e3\u51b3\u95ee\u9898\\n\\n> \u4e8b\u5b9e\u4e0a\uff0c\u4e0a\u8ff0\u8bbe\u8ba1\u601d\u8def\u53ef\u4ee5\u5e94\u7528\u5230 Electron \u4ee5\u5916\u7684\u4efb\u610f\u684c\u9762\u5e94\u7528\u5f00\u53d1\u3002\\n\\n\u90a3\u4e48\uff0c\u4f60\u4f1a\u600e\u4e48\u8bbe\u8ba1 Electron \u5e94\u7528\u5462\uff1f"},{"id":"/2022/04/04/type-vs-interface","metadata":{"permalink":"/blog/2022/04/04/type-vs-interface","source":"@site/blog/2022-04-04-type-vs-interface.md","title":"Type vs Interface","description":"It\'s recommended to go through the section Item 13: Know the Differences Between type and interface in the book Effective TypeScript written by Dan Vanderkam.","date":"2022-04-04T00:00:00.000Z","formattedDate":"April 4, 2022","tags":[{"label":"typescript","permalink":"/blog/tags/typescript"}],"readingTime":1.655,"hasTruncateMarker":true,"authors":[],"frontMatter":{"title":"Type vs Interface","tags":["typescript"]},"prevItem":{"title":"Electron \u5e94\u7528\u7684\u7406\u60f3\u67b6\u6784\u8bbe\u8ba1","permalink":"/blog/2022/05/09/electron-application-architecture"},"nextItem":{"title":"\u91cd\u6784 Electron \u5e94\u7528\u4e4b\u540e\u7684\u611f\u609f","permalink":"/blog/2022/03/25/refactor-an-application"}},"content":"> It\'s recommended to go through the section **Item 13: Know the Differences Between type and interface** in the book [**Effective TypeScript** written by Dan Vanderkam](https://effectivetypescript.com/).\\n\\nIn most cases, they are interchangeable when doing _type gymnastics_.\\n\\n```ts\\ntype TA = { };\\ninterface IA = {};\\n\\ntype TB = TA & {};\\ninterface IB extends IA {};\\n\\nclass A implements TA {};\\nclass AA implements IA {};\\n```\\n\\nHowever, there are some features you can only express with `type`, not `interface`.\\n\\n\x3c!--truncate--\x3e\\n\\n**Union**\\n\\nThere\'s no syntax available when writing unions with `interface`.\\n\\n```ts\\ntype TC = TA | IA | {};\\n// oops, there\'s no union of interfaces.\\n```\\n\\n**Tuple**\\n\\nYou can\'t create a tuple directly from `interface`.\\n\\n```ts\\ntype Pair = [number, string];\\ntype StringList = string[];\\n// oops, there\'s no tuple directly from interface\\n```\\n\\nHowever, here\'s a trick way to express tuple in interface\\n\\n```ts\\ninterface ITuple {\\n  0: number;\\n  1: string;\\n  length: 2;\\n}\\n\\nconst x: ITuple = [42, \'42\'];\\n```\\n\\n**Mapped types**\\n\\nIt\'s invalid to distribute types in `interface`.\\n\\n```ts\\ntype Fruit = \'apple\' | \'orange\' | \'banana\';\\n\\n// this is ok in type\\ntype FruitCount = {\\n  [key in Fruit]: number;\\n};\\n\\n// oops, this is invalid\\ninterface FruitCount {\\n  // error, ts(7061)\\n  [key in Fruit]: number;\\n}\\n```\\n\\nIn general, it\'s more safe and robust to use `type`.\\n\\n> I set up `consistent-type-definitions` rule in my eslint config.\\n>\\n> `@typescript-eslint/consistent-type-definitions: [ \'error\', \'type\']`\\n\\nBut, `interface` does have one ability that `type` doesn\'t.\\n\\n> I haven\'t find more, maybe add more in the future.\\n\\n**Declaration merging (augment)**\\n\\n```ts\\ninterface IA {\\n  name: string;\\n}\\ninterface IA {\\n  age: number;\\n}\\n\\nconst a: IA = { name: \'n\', age: 2 };\\n```\\n\\n> There\'s one [blog](https://github.com/microsoft/TypeScript/wiki/Performance#preferring-interfaces-over-intersections) provided by TypeScript team that talks about the preferences when considering compile performance. Take a look if you\'re interested.\\n\\nIn conclusion, You\'d better know the differences between `interface` and `type`, and make the decision that\'s suitable for your project."},{"id":"/2022/03/25/refactor-an-application","metadata":{"permalink":"/blog/2022/03/25/refactor-an-application","source":"@site/blog/2022-03-25-refactor-an-application.md","title":"\u91cd\u6784 Electron \u5e94\u7528\u4e4b\u540e\u7684\u611f\u609f","description":"\u81ea\u4ece\u8f6c\u5c97\u4ee5\u6765\uff0c\u57fa\u4e8e Electron \u5f00\u53d1\u7f16\u8f91\u5668\u5e94\u7528\u5df2\u7ecf\u5feb\u534a\u5e74\u4e86\uff0c\u4e3b\u8981\u8f7d\u4f53\u662f VS Code \u3002","date":"2022-03-25T00:00:00.000Z","formattedDate":"March 25, 2022","tags":[{"label":"methodology","permalink":"/blog/tags/methodology"},{"label":"architecture","permalink":"/blog/tags/architecture"}],"readingTime":3.205,"hasTruncateMarker":true,"authors":[],"frontMatter":{"title":"\u91cd\u6784 Electron \u5e94\u7528\u4e4b\u540e\u7684\u611f\u609f","tags":["methodology","architecture"]},"prevItem":{"title":"Type vs Interface","permalink":"/blog/2022/04/04/type-vs-interface"},"nextItem":{"title":"\u4eca\u5929\u7ed9\u6469\u6258\u8f66\u4e0a\u724c\u5566\uff5e","permalink":"/blog/2021/12/08/motobike"}},"content":"\u81ea\u4ece\u8f6c\u5c97\u4ee5\u6765\uff0c\u57fa\u4e8e Electron \u5f00\u53d1\u7f16\u8f91\u5668\u5e94\u7528\u5df2\u7ecf\u5feb\u534a\u5e74\u4e86\uff0c\u4e3b\u8981\u8f7d\u4f53\u662f VS Code \u3002\\n\\n\u73b0\u884c\u7684\u67b6\u6784\u4e3b\u8981\u662f\u5229\u7528 VS Code \u63d0\u4f9b\u7684\u63d2\u4ef6\u7cfb\u7edf\uff0c\u6ce8\u5165\u76f8\u5e94\u7684\u4e1a\u52a1\u5b9e\u73b0\u3002\u8be5\u65b9\u6848\u6709\u5f88\u5927\u7684\u6027\u80fd\u95ee\u9898\uff0c\u662f\u4e1a\u52a1\u7ec4\u4ef6\u53ea\u80fd VS Code \u7f16\u8f91\u5668\u542f\u52a8\u4e4b\u540e\uff0c\u624d\u80fd\u521d\u59cb\u5316\u3001\u5b9e\u4f8b\u5316\uff0c\u6027\u80fd\u6709\u5f88\u5927\u5f71\u54cd\u3002\u53e6\u5916\uff0c\u9274\u4e8e\u4e1a\u52a1\u5b9e\u73b0\u90fd\u8dd1\u5728 VSC \u7684\u63d2\u4ef6\u8fdb\u7a0b\u7cfb\u7edf\uff0c\u901a\u4fe1\u663e\u7136\u4f1a\u6210\u4e3a\u95ee\u9898\u3002\\n\\n\u5f53\u4e1a\u52a1\u590d\u6742\u5ea6\u4e0a\u5347\u4e4b\u540e\uff0c\u5f53\u524d\u7684\u8bbe\u8ba1\u65b9\u6848\u4f1a\u6210\u4e3a\u4e00\u4e2a\u74f6\u9888\u3002\\n\\n\u8fd9\u4e24\u4e2a\u6708\u521a\u597d\u8d76\u4e0a\u4e86\u91cd\u6784\uff0c\u4e3b\u8981\u601d\u8def\u5c31\u662f\u5c06\u7ec4\u4ef6\u6a21\u5757\u5316\uff0c VSC \u53d8\u6210\u5e94\u7528\u7684\u4e00\u4e2a\u6a21\u5757\uff0c\u4ea6\u5373\u7f16\u8f91\u533a\uff0c\u539f\u5148\u7684\u63d2\u4ef6\u5f0f\u7ec4\u4ef6\uff0c\u5347\u7ea7\u6210\u4e3a\u4e0e VSC \u540c\u7b49\u7ea7\u7684\u6a21\u5757\u3002\u6709\u8fd9\u6837\u7684\u8bbe\u8ba1\uff0c\u5e94\u7528\u7684\u6a2a\u5411\u6269\u5c55\u6027\u3001\u6a21\u5757\u95f4\u7684\u8054\u7cfb\u6027\u90fd\u80fd\u5f97\u5230\u5f88\u5927\u7684\u63d0\u5347\u3002\\n\\n\x3c!--truncate--\x3e\\n\\n\u90a3\u4e48\u6211\u611f\u609f\u5230\u7684\u662f\u4ec0\u4e48\uff1f\u5e76\u4e0d\u662f\u4ee3\u7801\u600e\u4e48\u91cd\u6784\u3001\u6a21\u5757\u600e\u4e48\u5b9e\u73b0\uff0c\u800c\u662f\u5173\u4e8e\u9879\u76ee\u7ba1\u7406\u3001\u5c55\u5f00\u3001\u63a8\u8fdb\u7684\u3002\\n\\n> [Angular](https://angular.io/) is the BEST! [Nx.dev](https://nx.dev/) also!\\n\\n1. \u5bf9\u9f50\u5404\u65b9\u76ee\u6807\u3002\\n\\n   \u8981\u5b8c\u6210\u4e00\u4e2a\u65f6\u95f4\u8de8\u5ea6\u957f\u3001\u5de5\u4f5c\u91cf\u5927\u7684\u9879\u76ee\uff0c\u7b2c\u4e00\u6761\u5c31\u662f\u5bf9\u9f50\u5404\u65b9\u76ee\u6807\uff0c\u660e\u786e\u9879\u76ee\u7684\u76ee\u6807\uff0c\u6536\u76ca\uff08\u5411\u4e0a\u7ba1\u7406\u7684\u65f6\u5019\u9700\u8981\uff09\u3002\u628a\u5404\u65b9\u7684 KPI / \u7ee9\u6548\u8003\u6838 \u62c9\u9f50\uff0c\u8fd9\u6837\u5bb9\u6613\u8ba9\u4ed6\u4eec\u5728\u8fd9\u4e2a\u4e8b\u60c5\u4e0a\u6295\u5165\uff0c\u4e5f\u6709\u7406\u7531\u7ed9\u4ed6\u4eec\u4ee5\u53cd\u9988\u3002\\n\\n1. \u5bf9\u9f50\u9879\u76ee\u65b9\u6848\u3002\\n\\n   \u51e1\u4e8b\u6b32\u5219\u7acb\uff0c\u4e0d\u9884\u5219\u5e9f\u3002\u9879\u76ee\u65b9\u6848\u6ca1\u6709\u8003\u8651\u5468\u5168\uff0c\u5404\u65b9\u534f\u8c03\u6ca1\u6709\u5230\u4f4d\uff0c\u5bb9\u6613\u51fa\u73b0\u4fe1\u606f\u5dee\uff0c\u6216\u8005\u91cd\u590d\u5de5\u4f5c\uff0c\u6700\u7ec8\u5c31\u662f\u5bfc\u81f4\u8fd4\u5de5\uff0c\u62d6\u57ae\u6218\u7ebf\u3002\\n\\n   \u5982\u679c\u662f\u9879\u76ee\u4e2d\u7684\u67d0\u4e00\u65b9\uff0c\u5efa\u8bae\u591a\u6295\u5165\uff0c\u4ee5\u5168\u5c40\u7684\u89c6\u89d2\u53bb\u5206\u6790\uff0c\u81ea\u8eab\u6a21\u5757\u6240\u5904\u7684\u4f4d\u7f6e\uff0c\u7136\u540e\u518d\u786e\u5b9a\u65b9\u6848\uff0c\u4e0e\u6574\u4f53\u65b9\u6848\u76f8\u7edf\u4e00\u3002\\n\\n   \u5982\u679c\u662f Owner\uff0c\u5219\u66f4\u8981\u6ce8\u610f\u5bf9\u9f50\u5404\u65b9\u7684\u65b9\u6848\u3001\u4fe1\u606f\u4e86\uff0c\u56e0\u4e3a\u6574\u4e2a\u9879\u76ee\u7684\u8d23\u4efb\u5728\u81ea\u5df1\u8eab\u4e0a\u3002\u4e0d\u7136\u4ee5\u540e\u62a5\u544a\u7684\u65f6\u5019\uff0c\u201c\u8d1f\u8d23 XX \u9879\u76ee\uff0c\u79ef\u6781\u63a8\u52a8 YY\u201d \u5c31\u4e0d\u597d\u8bf4\u54af\u3002\\n\\n1. \u5c0f\u5468\u671f\u5bf9\u9f50\u8fdb\u5ea6\uff0c\u53ca\u65f6\u66b4\u9732\u98ce\u9669\u70b9\u3002\\n\\n   \u8fd9\u4e2a\u7b97\u662f\u8001\u751f\u5e38\u8c08\u4e86\uff0c\u6709\u7684\u540c\u4e8b\u95f7\u58f0\u4e0d\u54cd\u7684\uff0c\u4e00\u95ee\u624d\u53d1\u73b0\u914d\u73af\u5883\u914d\u4e09\u5929\uff0c\u5f00\u53d1\u8fdb\u5ea6 `0` \u3002\\n\\n   \u5728\u5c0f\u516c\u53f8\u7ecf\u5e38\u641e\u6bcf\u65e5\u7ad9\u4f1a\u5c31\u662f\u8fd9\u4e2a\u9053\u7406\uff0c\u5c0f\u5730\u65b9\u8017\u4e0d\u8d77\u7684\u3002\uff08\u5e7a\u86fe\u5b50\u7684\u53e6\u8bf4\uff09\\n\\n\u5dee\u4e0d\u591a\u5c31\u8fd9\u4e9b\u4e86\uff0c\u7ed3\u5c3e\u653e\u4e2a\u7092\u996d\u5427\u3002\u65e0 P \u65e0\u4fee\uff0c\u7d2f\u4e86\u3002\\n\\n![](/images/life/cooked-rice.jpg)"},{"id":"/2021/12/08/motobike","metadata":{"permalink":"/blog/2021/12/08/motobike","source":"@site/blog/2021-12-08-motobike.md","title":"\u4eca\u5929\u7ed9\u6469\u6258\u8f66\u4e0a\u724c\u5566\uff5e","description":"\u56e0\u4e3a\u75ab\u60c5\u7ba1\u63a7\uff0c\u5c45\u4f4f\u6240\u5728\u5730\u7684\u8f66\u7ba1\u6240\u7684\u65b0\u8f66\u4e0a\u724c\u53ea\u80fd\u901a\u8fc7\u7ebf\u4e0a\u9884\u7ea6\u7684\u5f62\u5f0f\u53d6\u53f7\u3002","date":"2021-12-08T00:00:00.000Z","formattedDate":"December 8, 2021","tags":[{"label":"\u65e5\u5e38\u751f\u6d3b","permalink":"/blog/tags/\u65e5\u5e38\u751f\u6d3b"}],"readingTime":3.28,"hasTruncateMarker":true,"authors":[],"frontMatter":{"title":"\u4eca\u5929\u7ed9\u6469\u6258\u8f66\u4e0a\u724c\u5566\uff5e","tags":["\u65e5\u5e38\u751f\u6d3b"]},"prevItem":{"title":"\u91cd\u6784 Electron \u5e94\u7528\u4e4b\u540e\u7684\u611f\u609f","permalink":"/blog/2022/03/25/refactor-an-application"},"nextItem":{"title":"\u8003\u51fa\u6469\u6258\u8bc1\u5e76\u559c\u63d0\u65b0\u8f66","permalink":"/blog/2021/11/10/motobike-test"}},"content":"\u56e0\u4e3a\u75ab\u60c5\u7ba1\u63a7\uff0c\u5c45\u4f4f\u6240\u5728\u5730\u7684\u8f66\u7ba1\u6240\u7684\u65b0\u8f66\u4e0a\u724c\u53ea\u80fd\u901a\u8fc7\u7ebf\u4e0a\u9884\u7ea6\u7684\u5f62\u5f0f\u53d6\u53f7\u3002\\n\\n\u51ac\u5929\u7684\u65e9\u4e0a\u662f\u5f88\u51b7\u6e05\u7684\u3002\u6211\u65e9\u65e9\u5230\u4e86\u8f66\u7ba1\u6240\uff0c\u4f46\u662f\u8f66\u7ba1\u6240\u4e00\u5b9a\u8981\u7b49\u5230 8:30 \u624d\u5f00\u95e8\u3002\\n\\n\u4e0d\u8fc7\u9a8c\u8f66\u533a\u7684\u4eba\u5df2\u7ecf\u5f00\u59cb\u68c0\u67e5\u8f66\u8f86\u4e86\u3002\u8f85\u8b66\u540c\u5fd7\u770b\u5230\u6211\u7684\u8f66\u4e0a\u8fd8\u6709\u5c3e\u7bb1\u5c31\u544a\u8bc9\u6211\uff0c\u201c\u7bb1\u5b50\u62c6\u6389\uff0c\u4e0b\u9762\u7684\u5851\u6599\u677f\u4e5f\u8981\u62c6\u6389\u201d\u3002\\n\\n\x3c!--truncate--\x3e\\n\\n\u6211\u4e00\u65f6\u6ca1\u4e86\u4e3b\u610f\uff0c\u5c31\u95ee\u54ea\u91cc\u6709\u6ca1\u6709\u4fee\u8f66\u94fa\u4e00\u6837\u7684\u3002\u8f85\u8b66\u540c\u5fd7\u53eb\u6211\u53bb\u5bf9\u9762\u5c0f\u533a\u78b0\u78b0\u8fd0\u6c14\u3002\\n\\n\u6211\u5ffd\u89c6\u4e86\u8f66\u57ab\u5b50\u4e0b\u5176\u5b9e\u539f\u5382\u6709\u4e00\u4e2a\u5c0f\u5de5\u5177\u888b\u7684\uff0c\u91cc\u9762\u521a\u597d\u6709\u6273\u624b\u7b49\u5de5\u5177\uff0c\u5f53\u7136\u8fd9\u662f\u540e\u8bdd\u4e86\u3002\\n\\n\u8fd0\u6c14\u6bd4\u8f83\u597d\uff0c\u5c0f\u533a\u4e00\u5c42\u5546\u94fa\u91cc\u9762\u6709\u4e00\u5bb6\u4fee\u7535\u74f6\u8f66\u7684\u94fa\u5b50\u3002\u6211\u5c31\u627e\u8001\u677f\u501f\u4e86\u70b9\u5de5\u5177\u81ea\u5df1\u62c6\u7bb1\u5b50\u3002 UY \u7684\u7bb1\u5b50\u5f88\u597d\u62c6\u3002\u62c6\u7684\u8fc7\u7a0b\u4e2d\uff0c\u8001\u677f\u7ed9\u6211\u6765\u4e86\u4e00\u53e5\u5f88\u6076\u5fc3\u4eba\u7684\u8bdd\uff1a\u201c\u4f60\u62c6\u968f\u4f60\u62c6\uff0c\u5f85\u4f1a\u513f\u88c5\u4e0d\u8981\u5728\u8fd9\u91cc\u88c5\u3002\u201d\\n\\n\u6211\u4e00\u542c\u5c31\u6025\u4e86\uff0c\u201c\u6211\u5c31\u501f\u4f60\u70b9\u5de5\u5177\uff0c\u53c8\u4e0d\u662f\u8ba9\u4f60\u52a8\u624b\u3002\u8fd9\u6837\u4e5f\u4e0d\u884c\uff1f\u201d\\n\\n\u201c\u6211\u8fd9\u91cc\u662f\u4fee\u7535\u74f6\u8f66\u7684\uff0c\u4e0d\u662f\u4fee\u6469\u6258\u8f66\u7684\u3002\u201d\\n\\n\u201c\u90a3\u6211\u7ed9\u4f60\u5341\u5757\u94b1\uff0c\u4f60\u5de5\u5177\u501f\u6211\uff0c\u6211\u81ea\u5df1\u88c5\u56de\u53bb\uff0c\u884c\u4e0d\u884c\uff1f\u201d\\n\\n\u201c\u4e0d\u884c\u3002\u201d \u8001\u677f\u8bf4\u5b8c\u5c31\u8d70\u5f00\u4e86\u3002\\n\\n\u6ca1\u529e\u6cd5\uff0c\u6211\u53ea\u597d\u5148\u53bb\u628a\u8f66\u7ed9\u9a8c\u4e86\u5148\uff0c\u7bb1\u5b50\u7b49\u4f1a\u513f\u5728\u8def\u4e0a\u627e\u4e2a\u65b0\u7684\u4fee\u8f66\u94fa\u518d\u89e3\u51b3\u5427\u3002\\n\\n\u9a8c\u8f66\u5012\u662f\u5f88\u987a\u5229\uff0c\u8f85\u8b66\u540c\u5fd7\u624b\u6cd5\u4e5f\u5f88\u719f\u7ec3\u3002\u4f46\u662f\u5462\uff0c\u6838\u9a8c\u6750\u6599\u7684\u65f6\u5019\uff0c\u8f85\u8b66\u540c\u5fd7\u8bf4\u6211\u63d0\u4f9b\u7684\u6750\u6599\u4e2d\u7f3a\u5c11\u4e00\u5f20\u84dd\u8272\u7684\u53d1\u7968\u6ce8\u518c\u8054\u3002\\n\\n\u6240\u4ee5\u6211\u8981\u5148\u53bb\u8f66\u884c\u627e\u8001\u677f\u627e\u56de\u6211\u7684\u53d1\u7968\u6ce8\u518c\u8054\u3002\\n\\n\u5c3e\u7bb1\u95ee\u9898\u8f6c\u673a\u5c31\u5728\u51fa\u73b0\u4e86\u3002\u5728\u8f66\u884c\u8001\u677f\u5bfb\u627e\u53d1\u7968\u7684\u65f6\u5019\uff0c\u6211\u5c31\u4e09\u4e0b\u4e94\u9664\u4e8c\u5730\u628a\u5c3e\u7bb1\u53c8\u7ed9\u88c5\u56de\u53bb\u4e86\u3002\u4e0d\u5f97\u4e0d\u8bf4\uff0c\u4ee5\u540e\u6362\u4e2a\u5927\u4e00\u70b9\u7684\u7bb1\u5b50\u4e5f\u5f88\u7b80\u5355\u4e86\u3002\\n\\n\u62ff\u5230\u4e86\u84dd\u8272\u7684\u6ce8\u518c\u767b\u8bb0\u8054\uff0c\u6211\u7acb\u523b\u8d76\u56de\u8f66\u7ba1\u6240\u53bb\u4ea4\u6750\u6599\u3002\u540e\u7eed\u7684\u6d41\u7a0b\u5c31\u987a\u7545\u7684\u5f88\u591a\u4e86\uff0c\u53d6\u53f7\u3001\u767b\u8bb0\u3001\u9009\u724c\u3001\u7f34\u8d39\u3002\\n\\n\u672c\u4eba\u5bf9\u724c\u7167\u7684\u53f7\u7801\u6ca1\u6709\u7279\u522b\u504f\u597d\uff0c\u968f\u624b\u9009\u7684 455 \uff0c\u63a5\u4e0b\u6765\u5c31\u7b49\u90ae\u653f\u5feb\u9012\u5bc4\u9001\u4e86\u3002\\n\\n\u8fd9\u91cc\u6709\u4e2a\u5c34\u5c2c\u7684\u5730\u65b9\uff0c\u5feb\u9012\u5458\u8bf4\u90ae\u653f\u5feb\u9012\u662f\u5230\u4ed8\u7684\u3002\u4f46\u662f\u6211\u9690\u7ea6\u8bb0\u5f97\u8f66\u7ba1\u6240\u7f34\u8d39\u7684\u8d39\u7528\u4e2d\u5df2\u7ecf\u5305\u542b\u4e86\u5feb\u9012\u8d39\uff0c\u96be\u9053\u771f\u7684\u662f\u6211\u8bb0\u9519\u4e86\uff1f\u3002\\n\\n\u4e0d\u8fc7\uff0c\u4eba\u8bc1\u8f66\u9f50\u5168\u4e86\uff0c\u5408\u6cd5\u5b89\u5168\u4e0a\u8def\uff01\\n\\n![](/images/life/motor-300km.png)"},{"id":"/2021/11/10/motobike-test","metadata":{"permalink":"/blog/2021/11/10/motobike-test","source":"@site/blog/2021-11-10-motobike-test.md","title":"\u8003\u51fa\u6469\u6258\u8bc1\u5e76\u559c\u63d0\u65b0\u8f66","description":"\u671f\u5f85\u4e86\u5f88\u4e45\uff0c\u7ec8\u4e8e\u8981\u8003\u6469\u6258\u4e86\u3002\u65e9\u4e0a\u5b89\u6392\u4e86\u79d1\u4e8c\u548c\u79d1\u4e09\uff0c\u5982\u679c\u79d1\u4e8c\u79d1\u4e09\u90fd\u901a\u8fc7\u4e86\uff0c\u5c31\u4f1a\u5b89\u6392\u4e0b\u5348\u7684\u79d1\u56db\u8003\u8bd5\u3002\u6240\u4ee5\u987a\u5229\u7684\u8bdd\u4e00\u5929\u5185\u5c31\u628a\u6469\u6258 D \u7167\u7ed9\u8003\u51fa\u6765\u4e86\u3002","date":"2021-11-10T00:00:00.000Z","formattedDate":"November 10, 2021","tags":[{"label":"\u65e5\u5e38\u751f\u6d3b","permalink":"/blog/tags/\u65e5\u5e38\u751f\u6d3b"}],"readingTime":4.195,"hasTruncateMarker":true,"authors":[],"frontMatter":{"title":"\u8003\u51fa\u6469\u6258\u8bc1\u5e76\u559c\u63d0\u65b0\u8f66","tags":["\u65e5\u5e38\u751f\u6d3b"]},"prevItem":{"title":"\u4eca\u5929\u7ed9\u6469\u6258\u8f66\u4e0a\u724c\u5566\uff5e","permalink":"/blog/2021/12/08/motobike"},"nextItem":{"title":"Fun with Chrome Devtools Protocol","permalink":"/blog/2021/08/18/chrome-devtools-protocol"}},"content":"\u671f\u5f85\u4e86\u5f88\u4e45\uff0c\u7ec8\u4e8e\u8981\u8003\u6469\u6258\u4e86\u3002\u65e9\u4e0a\u5b89\u6392\u4e86\u79d1\u4e8c\u548c\u79d1\u4e09\uff0c\u5982\u679c\u79d1\u4e8c\u79d1\u4e09\u90fd\u901a\u8fc7\u4e86\uff0c\u5c31\u4f1a\u5b89\u6392\u4e0b\u5348\u7684\u79d1\u56db\u8003\u8bd5\u3002\u6240\u4ee5\u987a\u5229\u7684\u8bdd\u4e00\u5929\u5185\u5c31\u628a\u6469\u6258 D \u7167\u7ed9\u8003\u51fa\u6765\u4e86\u3002\\n\\n\u8fd9\u4e2a\u65f6\u5019\uff0c\u5bcc\u9633\u7684\u6469\u6258\u8f66\u8003\u8bd5\u8fd8\u662f\u4eba\u529b\u76d1\u8003\u7684\uff0c\u5e76\u6ca1\u6709\u4f7f\u7528\u4e0a\u7ea2\u5916\u7ebf\u76d1\u8003\u3002\\n\\n\u6211\u5728\u8003\u79d1\u4e8c\u7684\u7b2c\u4e00\u628a\u7ed5\u6746\u56de\u7a0b\u7684\u65f6\u5019\uff0c\u56e0\u4e3a\u7d27\u5f20\uff08\u5176\u5b9e\u662f\u65b9\u5411\u6253\u65e9\u4e86\uff09\u800c\u64e6\u5230\u4e86\u6746\u5b50\u3002\u76d1\u8003\u5458\u7684\u54e8\u5b50\u7acb\u523b\u54cd\u4e86\u8d77\u6765\uff0c\u7b49\u4e8e\u662f\u6211\u7b2c\u4e00\u628a\u4e0d\u901a\u8fc7\u3002\\n\\n\x3c!--truncate--\x3e\\n\\n\u6211\u7684\u6559\u7ec3\u5fd9\u91cc\u5077\u95f2\u7684\u8fc7\u6765\uff0c\u8be2\u95ee\u6211\u548b\u56de\u4e8b\uff0c`\u4f60\u5f53\u65f6\u53c8\u6ca1\u6709\u6309\u7167\u6211\u7684\u70b9\u4f4d\u6559\u7684\u6765\u5b66\uff0c\u8f6c\u5f2f\u7684\u65f6\u5019\u8981\u591a\u8f6c\u4e00\u70b9\u3002`\\n\\n![](/images/life/motor-test-zs.png)\\n\\n\u4e00\u8d77\u8003\u8bd5\u7684\u5b66\u5458\u5efa\u8bae\u9053\uff0c\u201c\u56e0\u4e3a\u573a\u5730\u53cd\u5149\u660e\u663e\uff0c\u6240\u4ee5\u76d1\u8003\u5458\u662f\u4e0d\u5bb9\u6613\u53d1\u73b0\u5730\u9762\u538b\u7ebf\u95ee\u9898\u7684\u201d\u3002\u79d1\u4e8c\u7684\u7b2c\u4e8c\u628a\uff0c\u6211\u5728\u7ed5\u6760\u7684\u65f6\u5019\u8f6c\u5f2f\u6253\u65b9\u5411\u591a\u6253\u4e00\u70b9\uff0c\u5730\u9762\u4e0a\u7a0d\u5fae\u538b\u538b\u7ebf\u6ca1\u95ee\u9898\u7684\u3002\u5f53\u6211\u7ed5\u6760\u7ed3\u675f\u4e4b\u540e\uff0c\u53ef\u4ee5\u7528\u5982\u91ca\u91cd\u8d1f\u6765\u5f62\u5bb9\u3002\\n\\n\u79d1\u4e09\u53ef\u4ee5\u8bf4\u662f\u6781\u5176\u7b80\u5355\uff0c\u7ed5\u573a\u5730\u5f00\u4e00\u5708\u5c31\u597d\u4e86\uff0c\u6ce8\u610f\u8f6c\u5411\u706f\u7684\u4f7f\u7528\u5c31\u884c\u4e86\u3002\u4f46\u5c31\u662f\u8fd9\u6837\uff0c\u4e5f\u6709\u4eba\u6302\u8fc7\u4e00\u6b21\uff0c\u56e0\u4e3a\u5979\u8def\u7ebf\u8d70\u9519\u4e86\uff0c\u672a\u6309\u8981\u6c42\u8f66\u9053\u884c\u9a76\u3002\\n\\n![](/images/life/motor-test-field.png)\\n\\n\u65e9\u4e0a\u7684\u8003\u8bd5\u8fdb\u884c\u7684\u5f88\u5feb\uff0c\u6574\u4e2a\u8003\u573a\u5927\u6982 100 \u53f7\u4eba\uff0c\u901a\u8fc7\u7684\u6709\u8fd1 80 \u4eba\uff0c\u4e0d\u77e5\u9053\u7ea2\u5916\u7535\u5b50\u8003\u7684\u901a\u8fc7\u7387\u4f1a\u4e0d\u4f1a\u4e5f\u6709\u8fd9\u4e48\u9ad8\u3002\\n\\n\u4e2d\u5348\uff0c\u8ddf\u51e0\u4e2a\u540c\u884c\u7684\u5b66\u5458\u5230\u5bcc\u9633\u7684\u4e07\u8fbe\u5e7f\u573a\uff08\u9ad8\u6865\uff09\uff0c\u4e00\u8d77 AA \u5403\u4e86\u4e00\u987f\u8c2d\u9e2d\u8840\u706b\u9505\u3002\u5e7f\u573a\u5468\u56f4\u7684\u4e07\u8fbe\u623f\u5b50\u8fd8\u5728\u9020\uff0c\u5e76\u6ca1\u6709\u4ea4\u4ed8\u3002\u8fd9\u4e2a\u5730\u65b9\u5c31\u5728\u5730\u94c1 6 \u53f7\u7ebf\u9ad8\u6865\u7ad9\u7684\u9644\u8fd1\uff0c\u4ea4\u901a\u4e0a\u6765\u8bf4\u662f\u5f88\u65b9\u4fbf\u7684\uff0c\u4e0d\u5230\u4e00\u5c0f\u65f6\u5c31\u80fd\u5230\u6ee8\u6c5f\u4e86\u3002\u9ad8\u6865\u7684\u623f\u5b50\u6bd4\u6ee8\u6c5f\u7684\u623f\u5b50\u8981\u4fbf\u5b9c\u5f88\u591a\uff0c\u501f\u52a9\u5730\u94c1\uff0c\u6027\u4ef7\u6bd4\u7740\u5b9e\u63d0\u5347\u4e86\u4e0d\u5c11\u3002\\n\\n\u4e0b\u5348\u7684\u79d1\u56db\u5176\u5b9e\u7b80\u5355\u5f97\u5f88\uff0c\u4e0d\u503c\u4e00\u63d0\u3002\u4e8c\u697c\u8003\u8bd5\uff0c\u4e00\u697c\u62ff\u8bc1\uff0cC1D\uff0c\u5b9e\u4e60\u671f\u4e3a\u4e00\u5e74\u3002\\n\\n\u5f53\u5929\u5c31\u53bb\u8f66\u884c\u63d0\u8f66\u4e86\u3002\u63d0\u8f66\u524d\u6211\u8fd8\u95ee\u9898\u4e86\u4e00\u4e0b\u62e5\u6709\u5fcd\u8005 400 \u7389\u7c73\u540c\u5b66\uff0c\u6211\u8981\u662f\u63d0\u8f66\u5f00\u56de\u6765\u7684\u8def\u4e0a\uff0c\u6ca1\u6709\u5934\u76d4\u600e\u4e48\u641e\u5462\uff1f\u8001\u53f8\u673a\u7389\u7c73\u7684\u56de\u7b54\u662f `\u8bf7\u4f60\u5e26\u7740\u5934\u76d4\u53bb\u63d0\u8f66\uff0c\u8c22\u8c22\u3002`\\n\\n\u90a3\u6211\u53ea\u597d\u5750\u516c\u4ea4\u8f66\u5148\u56de\u5bb6\uff0c\u62ff\u4e0a\u6211\u7684 LS2 \u5934\u76d4\uff0c\u518d\u5750\u516c\u4ea4\u8f66\u53bb\u8f66\u884c\u63d0\u8f66\u3002\u6765\u56de\u6298\u817e 1 \u4e2a\u5c0f\u65f6\u591a\uff0c\u5230\u8f66\u884c\u7684\u65f6\u5019\u5feb 4 \u70b9\u534a\u4e86\u3002\\n\\n\u8f66\u5b50\u8001\u65e9\u5c31\u5b9a\u4e86\uff0cUY 125 \u767e\u5e74\u7248\u3002\u539f\u8f66\u81ea\u5e26\u5c3e\u7bb1\uff0c\u65e5\u5e38\u5c31\u662f\u6211\u653e\u5934\u76d4\u7684\u5730\u65b9\u3002\u8fd9\u4e2a\u65f6\u5019\u8001\u677f\u7ed9\u6211\u6765\u4e86\u4e00\u53e5 `\u73b0\u5728\u624d\u6765\u63d0\u8f66\uff0c\u4fdd\u9669\u4e0d\u4e00\u5b9a\u51fa\u7684\u6765\u554a\u3002\u4fdd\u9669\u51fa\u4e0d\u6765\uff0c\u4e34\u724c\u5c31\u4e0d\u597d\u7533\u8bf7\u4e86` \uff0c\u4f01\u56fe\u6d47\u4e00\u76c6\u51b7\u6c34\u5728\u6211\u5934\u4e0a\u3002\u597d\u5728\u624b\u7eed\u529e\u7684\u5feb\uff0c\u5237\u5361\u4ea4\u94b1\u3002\u8001\u677f\u5a18\u5728\u5fae\u4fe1\u4e0a\u627e\u4fdd\u9669\u4e1a\u52a1\u5458\u4e70\u4ea4\u5f3a\u9669\uff0c\u8d76\u5728\u4e86\u4e94\u70b9\u524d\u8ba9\u4fdd\u9669\u751f\u6548\u3002\u7136\u540e\u8001\u677f\u5a18\u7ed9\u6211\u4e2a\u8f66\u7ba1\u6240\u5730\u5740\uff0c\u6211\u53c8\u8d76\u5728\u4e86\u4e94\u70b9\u534a\u8f66\u7ba1\u6240\u4e0b\u73ed\u524d\u628a\u4e34\u724c\u7ed9\u7533\u8bf7\u51fa\u6765\u4e86\u3002\u7533\u8bf7\u4e34\u724c\u4e0d\u9700\u8981\u9a8c\u8f66\uff0c\u53ea\u9700\u8981\u6750\u6599\u5c31\u597d\u4e86\u3002\\n\\n\u6b64\u523b\uff0c\u53c8\u4e00\u4f4d\u9ad8\u8d35\u7684\u8e0f\u677f\u8f66\u4e3b\u767b\u573a\u4e86\u3002\\n\\n![](/images/life/motor-uy125.png)"},{"id":"/2021/08/18/chrome-devtools-protocol","metadata":{"permalink":"/blog/2021/08/18/chrome-devtools-protocol","source":"@site/blog/2021-08-18-chrome-devtools-protocol.md","title":"Fun with Chrome Devtools Protocol","description":"The Chrome DevTools Protocol allows for tools to instrument, inspect, debug and profile Chromium, Chrome and other Blink-based browsers.","date":"2021-08-18T00:00:00.000Z","formattedDate":"August 18, 2021","tags":[{"label":"chrome devtools","permalink":"/blog/tags/chrome-devtools"}],"readingTime":4.205,"hasTruncateMarker":true,"authors":[],"frontMatter":{"title":"Fun with Chrome Devtools Protocol","tags":["chrome devtools"]},"prevItem":{"title":"\u8003\u51fa\u6469\u6258\u8bc1\u5e76\u559c\u63d0\u65b0\u8f66","permalink":"/blog/2021/11/10/motobike-test"},"nextItem":{"title":"Class Asynchronous Initialization","permalink":"/blog/2021/07/13/initialize-class-asynchronously"}},"content":"The [Chrome DevTools Protocol](https://chromedevtools.github.io/devtools-protocol/) allows for tools to instrument, inspect, debug and profile Chromium, Chrome and other Blink-based browsers.\\n\\nThe most familiar [Chrome DevTools](https://developer.chrome.com/docs/devtools/) uses this protocol to help debugging webpages.\\n\\n\x3c!--truncate--\x3e\\n\\nUnder the hood, the protocol relies on _WebSocket_ to work, [wiki](https://github.com/cyrus-and/chrome-remote-interface/wiki/Connect-to-a-raw-WebSocket). The `commands` and `events` are serialized JSON objects on the protocol.\\n\\n<img src=\\"/images/chrome-devtools-protocol.png\\" alt=\\"chrome devtools protocol\\" />\\n\\nThe package [chrome-remote-interface](https://github.com/cyrus-and/chrome-remote-interface/) is a good tool, and we are going to demonstrate some cases with it.\\n\\n## Debugging a node process\\n\\nFirst let\'s start a node process with inspect option.\\n\\n```bash\\n$ node --inspect=9222 server.js\\n\\n# output\\nDebugger listening on ws://127.0.0.1:9222/d4231410-13e5-463d-a5ba-23d206432a35\\n#                       ^ debugger endpoint\\n\\n```\\n\\n<details>\\n\\n<summary>Example express server.</summary>\\n\\n```javascript\\nconst express = require(\'express\');\\nconst app = express();\\nconst port = 3000;\\n\\nconst marquee = [\'log\', \'warn\', \'debug\', \'error\'];\\n\\nlet id = 0;\\nfunction nonce() {\\n  id = (id + 1) % 4;\\n  const method = marquee[id];\\n  console[method](`${method} works`);\\n}\\n\\napp.get(\'/\', (req, res) => {\\n  nonce();\\n  res.send(\'Hello World!\');\\n});\\n\\napp.listen(port, () => {\\n  console.log(`Example app listening at http://localhost:${port}`);\\n});\\n```\\n\\n</details>\\n\\nWith `chrome-remote-interface`, it\'s very easy to connect to the debugger endpoint.\\n\\n```javascript\\nconst CDP = require(\'chrome-remote-interface\');\\n\\nconst client = await CDP({\\n  target: \'ws://127.0.0.1:9222/d4231410-13e5-463d-a5ba-23d206432a35\',\\n});\\nconst { Debugger, Console, Runtime } = client;\\nclient.on(\'Runtime.consoleAPICalled\', (params) => {\\n  console.log(\'received: \', params);\\n});\\nawait Runtime.runIfWaitingForDebugger();\\nawait Runtime.enable();\\nawait Debugger.enable({\\n  maxScriptsCacheSize: 10000000,\\n});\\nawait Console.enable();\\n```\\n\\nEach time the server process invokes methods on `console`, we would receive the payload.\\n\\n```txt\\nreceived:  {\\n  type: \'warning\',\\n  args: [ { type: \'string\', value: \'warn works\' } ],\\n  executionContextId: 1,\\n  timestamp: <timestamp in number>,\\n  stackTrace: {\\n    callFrames: [\\n      // ... omitted\\n    ]\\n  }\\n}\\nreceived:  {\\n  type: \'log\',\\n  args: [ { type: \'string\', value: \'Visit /\' } ],\\n  executionContextId: 1,\\n  timestamp: <timestamp in number>,\\n  stackTrace: {\\n    callFrames: [\\n      // ... omitted\\n    ]\\n  }\\n}\\n```\\n\\nAnd we will get the available protocol if visiting `http://localhost:9222/json/protocol`.\\n\\n<details>\\n\\n<summary> protocol json </summary>\\n\\n```json\\n{\\n  \\"domains\\": [\\n    {\\n      \\"description\\": \\"This domain is deprecated - use Runtime or Log instead.\\",\\n      \\"deprecated\\": true,\\n      \\"domain\\": \\"Console\\",\\n      \\"commands\\": [\\n        // ...\\n      ],\\n      \\"types\\": [\\n        // ...\\n      ]\\n      // ...\\n    },\\n    {\\n      \\"domain\\": \\"Debugger\\",\\n      \\"dependencies\\": [\\"Runtime\\"]\\n      // ...\\n    },\\n    {\\n      \\"domain\\": \\"HeapProfiler\\",\\n      \\"dependencies\\": [\\"Runtime\\"],\\n      \\"experimental\\": true\\n      // ...\\n    },\\n    {\\n      \\"domain\\": \\"Profiler\\",\\n      \\"dependencies\\": [\\"Runtime\\", \\"Debugger\\"]\\n      // ...\\n    },\\n    {\\n      \\"domain\\": \\"Runtime\\",\\n      \\"events\\": [\\n        {\\n          \\"name\\": \\"consoleAPICalled\\",\\n          \\"parameters\\": [\\n            // ...\\n          ],\\n          \\"description\\": \\"Issued when console API was called.\\"\\n        }\\n        // ...\\n      ]\\n    },\\n    {\\n      \\"deprecated\\": true,\\n      \\"domain\\": \\"Schema\\",\\n      \\"description\\": \\"This domain is deprecated.\\"\\n      // ...\\n    },\\n    {\\n      \\"experimental\\": true,\\n      \\"domain\\": \\"NodeTracing\\"\\n      // ...\\n    },\\n    {\\n      \\"domain\\": \\"NodeWorker\\",\\n      \\"experimental\\": true\\n      // ...\\n    },\\n    {\\n      \\"domain\\": \\"NodeRuntime\\",\\n      \\"experimental\\": true\\n      // ...\\n    }\\n  ],\\n  \\"version\\": { \\"major\\": \\"1\\", \\"minor\\": \\"0\\" }\\n}\\n```\\n\\n</details>\\n\\nAccording to the [document](https://chromedevtools.github.io/devtools-protocol/v8/), the protocol in node only has few domains. We\'re very limited to debug the remote node process.\\n\\n## Debugging a webpage\\n\\nThis is much easier to debug a webpage since we could use the already powerful Devtools built with Chrome.\\n\\nThe quick way is to open `chrome://inspect/#pages` and you can start debugging.\\n\\nBut how to debug the webpage using `chrome-remote-interface` ?\\n\\nFirst, we need some webpage running with available debugging port.\\n\\nIn this case, we\'ll start with the electron [quick-start project](https://github.com/electron/electron-quick-start).\\n\\nAfter cloning and installing the dependencies, add a line before `app.whenReady()` in `main.js` to enable remote debugging.\\n\\n```diff\\n+ app.commandLine.appendSwitch(\'remote-debugging-port\', \'9222\');\\n\\n// This method will be called when Electron has finished\\n// initialization and is ready to create browser windows.\\n// Some APIs can only be used after this event occurs.\\napp.whenReady().then(() => {\\n```\\n\\nSo the time we start the application using `npx electron .`\uff0c it would output something like this\\n\\n```bash\\nDevTools listening on ws://127.0.0.1:9222/devtools/browser/a1df1a72-9dce-42ad-80ed-d8765dbb7520\\n#                       ^ devtools debug endpoint\\n```\\n\\nHowever, this websocket url is only a devtools debug endpoint, not the chrome devtool protocol debug endpoint. We have to visit the `http://localhost:9222/json` to find out the real `webSocketDebuggerUrl` for `chrome-remote-interface` to connect.\\n\\n<details>\\n\\n<summary> Example output </summary>\\n\\n```json\\n[\\n  {\\n    \\"description\\": \\"\\",\\n    \\"devtoolsFrontendUrl\\": \\"/devtools/inspector.html?ws=localhost:9222/devtools/page/D6F9769D8A20DCF2E8F574D231F9A8C6\\",\\n    \\"id\\": \\"D6F9769D8A20DCF2E8F574D231F9A8C6\\",\\n    \\"title\\": \\"Hello Vanilla!\\",\\n    \\"type\\": \\"page\\",\\n    \\"url\\": \\"file:///Users/workspace/quick-start/index.html\\",\\n    \\"webSocketDebuggerUrl\\": \\"ws://localhost:9222/devtools/page/D6F9769D8A20DCF2E8F574D231F9A8C6\\"\\n    //    ^ debugger endpoint\\n  }\\n]\\n```\\n\\n</details>\\n\\nWith the `webSocketDebuggerUrl`, we can write some code to interact with the webpage.\\n\\n```javascript\\nconst CDP = require(\'chrome-remote-interface\');\\n\\nconst options = {\\n  target: \'ws://localhost:9222/devtools/page/D6F9769D8A20DCF2E8F574D231F9A8C6\',\\n};\\n\\nCDP(options, async (client) => {\\n  console.log(\'Connected!\');\\n  const { Page } = client;\\n  await Page.enable();\\n\\n  await Page.navigate({ url: \'https://cn.bing.com\' });\\n  await Page.loadEventFired();\\n  client.close();\\n}).on(\'error\', (err) => {\\n  console.error(err);\\n});\\n```\\n\\nYou\'ll find out the page is navigated if you check out the electron window.\\n\\nWe have more abilities to manipulate the webpage. Just take a look at the listed [protocol](https://chromedevtools.github.io/devtools-protocol/tot/).\\n\\n### Tricky\\n\\nLook at the output json, there\'s a property named `devtoolsFrontendUrl`.\\n\\nWe would get the devtool panel if visiting `http://localhost:9222/<devtoolsFrontendUrl>`. Then open the devtool for the devtool page, for example, press `F12` or `cmd+option+I`.\\n\\n<img src=\\"/images/chrome-devtool-for-devtool.png\\" alt=\\"devtool for protocol\\" />\\n\\nWe will find the message communication in devtool panel `Network>WS`.\\n\\nThese are the commands sent via chrome devtools protocol, we could do the same thing using `chrome-remote-interface`.\\n\\n## References\\n\\n- [Chrome Devtools Protocol](https://chromedevtools.github.io/devtools-protocol/)\\n\\n- [chrome-remote-interface](https://github.com/cyrus-and/chrome-remote-interface)"},{"id":"/2021/07/13/initialize-class-asynchronously","metadata":{"permalink":"/blog/2021/07/13/initialize-class-asynchronously","source":"@site/blog/2021-07-13-initialize-class-asynchronously.md","title":"Class Asynchronous Initialization","description":"Sometimes, the instance of Class is not completely initialized yet when we first see it, because its property is initialized asynchronously.","date":"2021-07-13T00:00:00.000Z","formattedDate":"July 13, 2021","tags":[{"label":"javascript","permalink":"/blog/tags/javascript"}],"readingTime":1.955,"hasTruncateMarker":true,"authors":[],"frontMatter":{"title":"Class Asynchronous Initialization","tags":["javascript"]},"prevItem":{"title":"Fun with Chrome Devtools Protocol","permalink":"/blog/2021/08/18/chrome-devtools-protocol"},"nextItem":{"title":"Test-Driven Development in FrontEnd","permalink":"/blog/2021/05/06/tdd-in-frontend"}},"content":"Sometimes, the instance of Class is not completely initialized yet when we first see it, because its property is initialized asynchronously.\\n\\n```typescript\\nclass A {\\n  data: string;\\n  constructor() {\\n    // asynchronous data\\n    Promise.resolve(\'data\').then(d => void this.data = d);\\n  }\\n}\\n\\nconst a = new A();\\nassert.equal(a.data, undefined);\\nsetTimeout(() => {\\n  assert.equal(a.data, \'data\');\\n}, 0)\\n```\\n\\n\x3c!--truncate--\x3e\\n\\nHere are some simple solutions.\\n\\n## promise-based constructor\\n\\nWe delay access to the instance of Class until it is fully initialized by returning a Promise from the constructor.\\n\\n```typescript\\nclass A {\\n  data: string;\\n  constructor() {\\n    // asynchronous data\\n    return Promise.resolve(\'data\').then((d) => {\\n      this.data = d;\\n      return this;\\n    });\\n  }\\n}\\n\\nnew A().then((a) => {\\n  assert.equal(a.data, \'data\');\\n});\\n```\\n\\n> It\'s kind of surprising to have a constructor return a Promise instead of an instance.\\n\\n## static factory method\\n\\nA static factory method of a Class creates instances and is an alternative to using `new Class()`.\\n\\n```typescript\\nclass A {\\n  data: string;\\n  constructor(d: string) {\\n    this.data = d;\\n  }\\n  static async create() {\\n    // asynchronous data\\n    const data = await Promise.resolve(\'data\');\\n    return new this(data);\\n  }\\n}\\n\\nA.create().then((a) => {\\n  assert.equal(a.data, \'data\');\\n});\\n```\\n\\n## factory function\\n\\nStand-alone functions as factories are occasionally useful.\\n\\n```typescript\\nclass A {\\n  data: string;\\n  constructor(d: string) {\\n    this.data = d;\\n  }\\n}\\n\\nasync function createA() {\\n  // asynchronous data\\n  const data = await Promise.resolve(\'data\');\\n  return new A(data);\\n}\\n\\ncreateA().then((a) => {\\n  assert.equal(a.data, \'data\');\\n});\\n```\\n\\n## private constructor via secret token\\n\\nIf we want to ensure that instances are always correctly set up, we must ensure that only the static factory can invoke the constructor of Class. We can achieve that via a secret token:\\n\\n```typescript\\n// module variable, closured\\nconst aToken = Symbol(\'aToken\');\\n\\nclass A {\\n  data: string;\\n  constructor(token: Symbol, d: string) {\\n    if (token !== aToken) {\\n      throw new Error(\'Constructor is private\');\\n    }\\n    this.data = d;\\n  }\\n  static async create() {\\n    // asynchronous data\\n    const data = await Promise.resolve(\'data\');\\n    return new this(aToken, data);\\n  }\\n}\\n\\nA.create().then((a) => {\\n  assert.equal(a.data, \'data\');\\n});\\n```\\n\\nThere\'s a variant way to achieve the same purpose.\\n\\n```typescript\\nclass A {\\n  data: string;\\n  constructor() {\\n    throw new Error(\'Constructor is private\');\\n  }\\n  private _init(d: string) {\\n    this.data = d;\\n    return this;\\n  }\\n  static async create() {\\n    // asynchronous data\\n    const data = await Promise.resolve(\'data\');\\n    return Object.create(this.prototype)._init(data);\\n  }\\n}\\n\\nA.create().then((a) => {\\n  assert.equal(a.data, \'data\');\\n});\\n```"},{"id":"/2021/05/06/tdd-in-frontend","metadata":{"permalink":"/blog/2021/05/06/tdd-in-frontend","source":"@site/blog/2021-05-06-tdd-in-frontend.md","title":"Test-Driven Development in FrontEnd","description":"A quick summary on how to write tests in frontend framework. Using ReactJS as example codes, but these principles are also suitable for other frameworks such as Vue.js or Angular.","date":"2021-05-06T00:00:00.000Z","formattedDate":"May 6, 2021","tags":[{"label":"unit test","permalink":"/blog/tags/unit-test"},{"label":"e2e test","permalink":"/blog/tags/e-2-e-test"}],"readingTime":1.99,"hasTruncateMarker":true,"authors":[],"frontMatter":{"title":"Test-Driven Development in FrontEnd","categories":["frontend","unit test"],"tags":["unit test","e2e test"]},"prevItem":{"title":"Class Asynchronous Initialization","permalink":"/blog/2021/07/13/initialize-class-asynchronously"},"nextItem":{"title":"React Hooks Review","permalink":"/blog/2021/04/16/react-hooks-review"}},"content":"A quick summary on how to write tests in frontend framework. Using ReactJS as example codes, but these principles are also suitable for other frameworks such as Vue.js or Angular.\\n\\n## How to test shared utilities\\n\\nIt\'s time for [jest testing](https://jestjs.io/docs/getting-started) .\\n\\n## How to test components\\n\\n**mount / render without problem**\\n\\n```javascript\\nit(\'renders without crashing\', () => {\\n  const div = document.createElement(\'div\');\\n  ReactDOM.render(<App />, div);\\n  ReactDOM.unmountComponentAtNode(div);\\n});\\n```\\n\\n\x3c!--truncate--\x3e\\n\\n**expect some specific html tag or text content to be correct**\\n\\n```javascript\\nit(\'renders the app and the heading\', () => {\\n  const wrapper = mount(<App />);\\n  expect(wrapper.find(\'h1\').text()).toBe(\'Hello React\');\\n  expect(wrapper.find(\'.counter label\').text()).toBe(\'Current\');\\n  expect(wrapper.find(\'.counter span\').text()).toBe(\'0\');\\n});\\n```\\n\\n**expect user event works well, and mutate the state correctly**\\n\\n```javascript\\nit(\'should increment the count by one\', () => {\\n  const wrapper = shallow(<Counter />);\\n  expect(wrapper.find(\'.counter span\').text()).toBe(\'1\');\\n  wrapper.find(\'.counter\').simulate(\'click\');\\n  expect(wrapper.find(\'.counter span\').text()).toBe(\'2\');\\n\\n  wrapper.find(\'.counter\').simulate(\'click\', { shiftKey: false });\\n  expect(wrapper.find(\'.counter span\').text()).toBe(\'3\');\\n\\n  wrapper.find(\'.counter\').simulate(\'click\', { shiftKey: true });\\n  expect(wrapper.find(\'.counter span\').text()).toBe(\'12\');\\n});\\n```\\n\\n**expect some callback to be called correctly**\\n\\n```javascript\\nit(\'should call the handler on click\', () => {\\n  const handler = jest.fn();\\n  const wrapper = shallow(<Counter count={1} onCounterIncrease={handler} />);\\n  wrapper.find(\'.counter\').simulate(\'click\', { shiftKey: false });\\n  expect(handler).toBeCalledWith({ shiftKey: false });\\n});\\n\\nit(\'should call the instance method correctly\', () => {\\n  const wrapper = shallow(<App />);\\n  const instance = wrapper.instance();\\n  expect(instance.state.count).toBe(0);\\n  instance.increment(false);\\n  expect(instance.state.count).toBe(1);\\n\\n  instance.increment(true);\\n  expect(instance.state.count).toBe(11);\\n});\\n```\\n\\n**expect some time-relevant callback take side effect correctly**\\n\\n```javascript\\njest.useFakeTimers();\\n\\ntest(\'waits 1 second before ending the game\', () => {\\n  // some rendering and user event action\\n  expect(setTimeout).toHaveBeenCalledTimes(1);\\n  expect(setTimeout).toHaveBeenLastCalledWith(expect.any(Function), 1000);\\n});\\n```\\n\\n**expect side effect works correctly**\\n\\nthis can also be tested in _e2e testing_ such as **Cypress**.\\n\\n```javascript\\n// react testing library\\nit(\'should change the document title correctly\', () => {\\n  act(() => {\\n    ReactDOM.render(<Counter />, container);\\n  });\\n  const button = container.querySelector(\'button\');\\n  expect(document.title).toBe(\'You clicked 0 times\');\\n\\n  act(() => {\\n    button.dispatchEvent(new MouseEvent(\'click\', { bubbles: true }));\\n  });\\n\\n  expect(document.title).toBe(\'You clicked 1 times\');\\n});\\n```\\n\\nAlso, we can use [cypress for component testing](https://docs.cypress.io/guides/component-testing/introduction#What-is-Component-Testing).\\n\\n## How to test a module or a big component?\\n\\nIt\'s just a component with bigger construction.\\n\\n## How to test the whole application\\n\\nIt\'s job for [Cypress](https://docs.cypress.io/). Also,\\n\\n## Testing in SSR\\n\\nSome projects use next.js to leverage SSR. It\'s recommended to run e2e testing rather than unit testing in SSR project.\\n\\n1. [Angular universal](https://angular.io/guide/universal) use [protractor](https://github.com/angular/protractor) as default testing framework.\\n1. [Nuxt.js](https://nuxtjs.org) provide several frameworks to choose from, namely [Jest](https://jestjs.io/docs/en/getting-started), [AVA](https://github.com/avajs/ava), [WebdriverIO](https://webdriver.io/), [Nightwatch](https://nightwatchjs.org/).\\n1. [Next.js](https://nextjs.org/) doesn\'t provide any testing framework by default."},{"id":"/2021/04/16/react-hooks-review","metadata":{"permalink":"/blog/2021/04/16/react-hooks-review","source":"@site/blog/2021-04-16-react-hooks-review.md","title":"React Hooks Review","description":"Recently, I get a little confused on how React hooks executes, and this is what I have summarized.","date":"2021-04-16T00:00:00.000Z","formattedDate":"April 16, 2021","tags":[{"label":"frontend","permalink":"/blog/tags/frontend"},{"label":"reactjs","permalink":"/blog/tags/reactjs"},{"label":"hooks","permalink":"/blog/tags/hooks"}],"readingTime":4.52,"hasTruncateMarker":true,"authors":[],"frontMatter":{"title":"React Hooks Review","categories":["frontend"],"tags":["frontend","reactjs","hooks"]},"prevItem":{"title":"Test-Driven Development in FrontEnd","permalink":"/blog/2021/05/06/tdd-in-frontend"},"nextItem":{"title":"Micro Frontends","permalink":"/blog/2021/04/11/micro-frontend"}},"content":"Recently, I get a little confused on how React hooks executes, and this is what I have summarized.\\n\\nDuring the process of delving, I come across some knowledge on how V8 deals with function compilation, since we would have lots of anonymous functions (closures in some cases) defined whilst using hooks.\\n\\n\x3c!--truncate--\x3e\\n\\n## Get started\\n\\nImagine we have a class component like the following one.\\n\\n```javascript\\nclass Counter extends React.Component {\\n  state = {\\n    counter: 1,\\n  };\\n  render() {\\n    const { counter } = this.state;\\n    return (\\n      <>\\n        <p>current value: {counter}</p>\\n        {/* anonymous function */}\\n        <button onClick={() => this.setState({ counter: counter + 1 })}>\\n          Increment\\n        </button>\\n      </>\\n    );\\n  }\\n}\\n```\\n\\nIt\'s obvious that `button` would receive a new click callback after every `render`.\\n\\nTo avoid repeatedly generating the `onClick` anonymous function, so we have another style of function definition.\\n\\n> In V8, the anonymous function is only parsed once, but allocated every time execution hits the code. So we have different function every time the code runs.\\n\\n```javascript\\nclass Counter extends React.Component {\\n  state = {\\n    counter: 1,\\n  };\\n  // class method\\n  increment = () => {\\n    const { counter } = this.state;\\n    this.setState({\\n      counter: counter + 1,\\n    });\\n  };\\n  render() {\\n    const { counter } = this.state;\\n    return (\\n      <>\\n        <p>current value: {counter}</p>\\n        {/* reference to the class method */}\\n        <button onClick={this.increment}>Increment</button>\\n      </>\\n    );\\n  }\\n}\\n```\\n\\nIn Functional Components, we have similar situation.\\n\\n```javascript\\nconst Counter = () => {\\n  const [counter, setCounter] = React.useState(1);\\n  return (\\n    <>\\n      <p>current value: {counter}</p>\\n      {/* anonymous function */}\\n      <button onClick={() => setCounter(counter)}>Increment</button>\\n    </>\\n  );\\n};\\n```\\n\\nStill, `button` would receive a new click callback after every `render`.\\n\\nHere comes the `useCallback` to rescue.\\n\\n```javascript\\nconst Counter = () => {\\n  const [counter, setCounter] = React.useState(1);\\n  const onClick = React.useCallback(() => {\\n    setCounter(counter + 1);\\n  }, [counter]);\\n  return (\\n    <>\\n      <p>current value: {counter}</p>\\n      <button onClick={onClick}>Increment</button>\\n    </>\\n  );\\n};\\n```\\n\\n`useCallback` would return the same function as long as the dependency `counter` doesn\'t change.\\n\\nSo the VDOM reference stays untouched even if the function component gets re-rendered.\\n\\nNow, we are going to look at a more complicated situation.\\n\\n```javascript\\nconst Counter = () => {\\n  const [counter, setCounter] = React.useState(1);\\n  const [tip, setTip] = React.useState(\'first tip\');\\n\\n  const onClick = React.useCallback(() => {\\n    setCounter(counter + 1);\\n  }, [counter]);\\n\\n  React.useEffect(() => {\\n    setTip(\'second tip\');\\n  }, []);\\n\\n  const [heavy, setHeavy] = React.useState({\\n    a: {},\\n    // ... some huge object\\n    z: {},\\n  });\\n\\n  return (\\n    <>\\n      <p>current tip: {tip}</p>\\n      <p>current value: {counter}</p>\\n      <button onClick={onClick}>Increment</button>\\n    </>\\n  );\\n};\\n```\\n\\nIt\'s guaranteed there would be two `render` invocations. Here come the questions\uff1a\\n\\nQuestion 1. Will the `onClick` functions equal to each other during these two invocations?\\n\\n<details>\\n<summary>My Opinion</summary>\\n\\nThey are same functions.\\n`useCallback` would return the same function as long as the dependency `counter` doesn\'t change. Internally, `hook.memoizedState` is not updated, so the same function is returned from same `memoizedState`.\\n\\n</details>\\n\\nQuestion 2. Will `React.useCallback` execute twice? Will each execution receive same arguments (anonymous function)?\\n\\n<details>\\n<summary>My Opinion</summary>\\n\\n`useCallback` is just a plain normal JavaScript function, so it executes twice.\\n\\nHowever, the arguments are different. There will be a newly allocated local function in every execution.\\n\\n</details>\\n\\nQuestion 3. Will `React.useEffect` execute twice? Will each execution receive same arguments (anonymous function)?\\n\\n<details>\\n<summary>My Opinion</summary>\\n\\n`useEffect` is just a plain normal JavaScript function, so it executes twice.\\n\\nAnd, each execution is invoked with a brand new allocated local function. Internally, `useEffect` would adjust the effect flag in `hook.memoizedState` according to the dependencies.\\n\\n</details>\\n\\nQuestion 4. Will `React.useState` execute twice? Will each execution receive same arguments (a large object)?\\n\\n<details>\\n<summary>My Opinion</summary>\\n\\n`useState` is just a plain normal JavaScript function, so it executes twice.\\n\\nInternally, `useState` would memorize the value in the first execution. The arguments is ignored in the rest executions.\\n\\n`useState` would receive a new allocated large object as arguments on each execution. And this object is eligible to be collected (Garbage collection) after execution.\\n\\n</details>\\n\\nQuestion 5. What\'s point of using these `useCallback`, `useMemo`, `useEffect` hooks? What we could do if the arguments are different?\\n\\n<details>\\n<summary>My Opinion</summary>\\n\\nhooks invocation is required by _React fiber reconciliation_.\\n\\nWithout these hooks invocation, React is unable to trace these _local variables/closure objects_. So React cannot perform _reconciliation_ actively upon these objects\' mutations.\\n\\nWith the help of these tracing, React fiber keeps its references solid, avoiding unnecessary reconciliation.\\n\\nThe function component might re-render and return a new VDOM. However, there will be no difference during VDOM diff comparison sine their references are same. This would result no DOM update execution, which is skipped.\\n\\nThe following example is more persuasive\uff1a\\n\\n```javascript\\nconst Child = ({ onClick }) => <button onClick={onClick}>Click me!</button>;\\n\\nconst ParentWithoutHooks = () => {\\n  const handleClick = function () {\\n    console.log(\'clicked\');\\n  };\\n  // whenever parent re-renders,\\n  // the Child is forced to rerender\\n  // since handleClick is a new function after every render\\n  return (\\n    <>\\n      <Child onClick={handleClick} />\\n    </>\\n  );\\n};\\n\\nconst ParentWithHooks = () => {\\n  const handleClick = React.useCallback(\\n    function () {\\n      console.log(\'clicked\');\\n    },\\n    [\\n      /* dependencies if necessary */\\n    ]\\n  );\\n  // when the parent re-renders,\\n  // in an optimistic situation,\\n  // Child is only re-rendered if onClick is changed\\n  return (\\n    <>\\n      <Child onClick={handleClick} />\\n    </>\\n  );\\n};\\n```\\n\\n</details>\\n\\n## Summary\\n\\n**Most of the time it does not matter. Pay more attention to the business.**\\n\\n## References\\n\\n- [Function compilation mechanism in V8](https://stackoverflow.com/a/36530072)\\n- [V8 closures](https://mrale.ph/blog/2012/09/23/grokking-v8-closures-for-fun.html)"},{"id":"/2021/04/11/micro-frontend","metadata":{"permalink":"/blog/2021/04/11/micro-frontend","source":"@site/blog/2021-04-11-micro-frontend.md","title":"Micro Frontends","description":"Micro frontends deliver the same flexibility and maintainability to browser-based applications that microservices provide for backend systems.","date":"2021-04-11T00:00:00.000Z","formattedDate":"April 11, 2021","tags":[{"label":"frontend","permalink":"/blog/tags/frontend"},{"label":"mirco-frontend","permalink":"/blog/tags/mirco-frontend"}],"readingTime":5.4,"hasTruncateMarker":true,"authors":[],"frontMatter":{"title":"Micro Frontends","categories":["frontend"],"tags":["frontend","mirco-frontend"]},"prevItem":{"title":"React Hooks Review","permalink":"/blog/2021/04/16/react-hooks-review"},"nextItem":{"title":"TypeScript handbook","permalink":"/blog/2021/03/27/ts-handbook"}},"content":"Micro frontends deliver the same flexibility and maintainability to browser-based applications that microservices provide for backend systems.\\n\\nThe whole project is viewed as a set of standalone components, built upon any tech-stack or framework, with their own interfaces, logic, and storage. Then these mini-applications are evolving independently and will be composed together shipping to the browser.\\n\\n\x3c!--truncate--\x3e\\n\\nThere are several tech stacks developers can adopt to build micro frontends architecture.\\n\\n## Client-side integration\\n\\n### Separate pages\\n\\nIt\'s also known as Multi-Page Application, MPA.\\n\\nThis is simplest and easy-implementation architecture. Every application is served as a standalone service, which produce complete server-rendered HTML documents. They are connected via `<a>` tags.\\n\\nHard navigation among pages are triggered by clicking a link, reloading the complete page then displaying the desired content.\\n\\n```html\\n\x3c!-- in app 1 --\x3e\\n<div id=\\"main-app1\\">\\n  <div id=\\"content\\">\\n    \x3c!-- content provided by main-app --\x3e\\n    <a href=\\"http://link-to-app2\\"></a>\\n  </div>\\n</div>\\n\\n\x3c!-- in app 2 --\x3e\\n<div id=\\"main-app2\\">\\n  <div id=\\"content\\">\\n    \x3c!-- content provided by main-app --\x3e\\n    <a href=\\"http://link-to-app1\\"></a>\\n  </div>\\n</div>\\n```\\n\\n### Iframes\\n\\nIframes allow embedding one page into another page while maintaining the same loose coupling and robustness properties that the link integration provides.\\n\\nIframes come with strong isolation, which means what happens in the iframe stays in the iframe. But they also have significant drawbacks, such as layout constraints, performance overhead, communication complexity, SEO confusion.\\n\\n```html\\n<div id=\\"main-app\\">\\n  <div id=\\"content\\">\\n    \x3c!-- content provided by main-app --\x3e\\n  </div>\\n  <div id=\\"ads\\">\\n    <iframe src=\\"http://ads.com/{some-ads}\\"></iframe>\\n  </div>\\n</div>\\n```\\n\\n### Ajax\\n\\nClient-side JavaScript triggers the Ajax calls to fetch server-side generated HTML snippets, and then update document dynamically and partially.\\n\\nBe careful, [HTML5 specifies that a `<script>` tag inserted with `innerHTML` should not execute](https://developer.mozilla.org/en-US/docs/Web/API/Element/innerHTML#security_considerations).\\n\\nUsing Web Components together with Ajax for internal updating is also a good fit.\\n\\n[Sample code](https://github.com/naltatis/micro-frontends-in-action-code/tree/master/03_ajax).\\n\\n```javascript\\n// main app\\nwindow\\n  .fetch(\'/some-url\')\\n  .then((res) => res.text())\\n  .then((html) => {\\n    document.querySelector(\'to-update\').innerHTML = html;\\n  });\\n```\\n\\n### Web Components\\n\\n[Web Components](https://developer.mozilla.org/en-US/docs/Web/Web_Components) is an umbrella term. It describes three distinct new APIs: [Custom Elements](https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_custom_elements), [Shadow DOM](https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_shadow_DOM), and [HTML Templates](https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_templates_and_slots).\\n\\nWeb Components provides the ability to encapsulate style and business logic.\\n\\n[Sample code](https://github.com/naltatis/micro-frontends-in-action-code/tree/master/08_web_components), [Sample code2](https://github.com/naltatis/micro-frontends-in-action-code/tree/master/09_shadow_dom).\\n\\n```html\\n<div id=\\"main-app\\">\\n  <custom-button type=\\"primary\\"></custom-button>\\n</div>\\n\\n<script src=\\"http://js-define-custom-button\\"><\/script>\\n\\n\x3c!-- define the custom button --\x3e\\n<script>\\n  window.define(\\n    \'custom-button\',\\n    class extends HTMLElement {\\n      static get observedAttributes() {\\n        return [\'type\'];\\n      }\\n\\n      constructor() {\\n        super();\\n      }\\n\\n      adoptedCallback() {\\n        console.log(\'Custom button moved to new page.\');\\n        // using shadow DOM if necessary\\n      }\\n\\n      disconnectedCallback() {\\n        console.log(\'Custom button removed from page.\');\\n      }\\n    }\\n  );\\n<\/script>\\n```\\n\\n### Unified SPA\\n\\nThe Unified SPA describes a single-page application composed of other single-page applications.\\n\\nIt requires all the components to be a single-page app, using Sveltejs, Angular, React, Vue, etc.\\n\\nA parent application, which is often called the app shell, will unify these single-page apps into one monolithic application.\\n\\nThe app shell includes the single-spa JavaScript code and maps _URL prefixes_ to the code of a specific application.\\n\\n[Single SPA](https://github.com/single-spa/single-spa), [Ara framework](https://ara-framework.github.io/website/).\\n\\n```html\\n<html lang=\\"en\\">\\n  <head>\\n    <title>SPA demo</title>\\n    <script src=\\"/single-spa-base.js\\"><\/script>\\n  </head>\\n  <body>\\n    <div id=\\"app1-holder\\"></div>\\n    <div id=\\"app2-holder\\"></div>\\n    <div id=\\"app3-holder\\"></div>\\n\\n    <script type=\\"module\\">\\n      singleSpa.registerApplication(\\n        \'app1\',\\n        () => import(\'http://app1/pages.min.js\'),\\n        ({ pathname }) => pathname === \'/\'\\n      );\\n      singleSpa.registerApplication(\\n        \'app2\',\\n        () => import(\'http://app2/pages.min.js\'),\\n        ({ pathname }) => pathname.startsWith(\'/app2/\')\\n      );\\n      singleSpa.registerApplication(\\n        \'app3\',\\n        () => import(\'http://app3/pages.min.js\'),\\n        ({ pathname }) => pathname.startsWith(\'/app3/\')\\n      );\\n      singleSpa.start();\\n    <\/script>\\n  </body>\\n</html>\\n```\\n\\n## Server Side Integration\\n\\n### Routing with proxy\\n\\nNginx acts as a proxy and forwards the requests to the responsible services. This could be used to unify MPA architecture.\\n\\n```conf\\nhttp {\\n  upstream app1 {\\n    server localhost:3001;\\n  }\\n\\n  upstream app2 {\\n    server localhost:3002;\\n  }\\n\\n  log_format compact \':3000$uri $status\';\\n\\n  server {\\n    listen 3000;\\n\\n    # comment out on windows\\n    access_log /dev/stdout compact;\\n\\n    location /app1/ {\\n      proxy_pass  http://app1;\\n    }\\n\\n    location /app2/ {\\n      proxy_pass  http://app2;\\n    }\\n\\n    location /app2-new {\\n      proxy_pass  http://app2;\\n    }\\n  }\\n}\\n```\\n\\n### SSI, ESI, Podium\\n\\nThis is similar to client-side integration Ajax.\\n\\n```conf\\nhttp {\\n  upstream app1 {\\n    server localhost:3001;\\n  }\\n\\n  upstream app2 {\\n    server localhost:3002;\\n  }\\n\\n  log_format compact \':3000$uri $status\';\\n\\n  server {\\n    listen 3000;\\n    ssi on;\\n    ; ...\\n  }\\n}\\n```\\n\\n```html\\n<html>\\n  <head>\\n    <title>Main App</title>\\n  </head>\\n  <body>\\n    <div class=\\"content\\">\\n      \x3c!-- ... --\x3e\\n    </div>\\n    <aside class=\\"ads\\">\\n      \x3c!--#include virtual=\\"/app2/fragments/ads\\" --\x3e\\n    </aside>\\n  </body>\\n</html>\\n\\n\x3c!-- app2 html fragment for ads --\x3e\\n<a href=\\"http://ad-detail\\">\\n  <div>ads</div>\\n</a>\\n```\\n\\n[Podium](https://podium-lib.io/): Easy server side composition of microfrontends, leveraging [express.js](https://expressjs.com/).\\n\\n[Sample code for SSI](https://github.com/naltatis/micro-frontends-in-action-code/tree/master/05_ssi), [Sample code for Podium](https://github.com/naltatis/micro-frontends-in-action-code/tree/master/07_podium).\\n\\n### Universal rendering\\n\\nUniversal composition is the combination of server-side and client-side composition technique.\\n\\nFor the first request, a technique like SSI, ESI, or Podium assembles the markup of all micro frontends server-side. The complete HTML document gets sent to the browser. In the browser, each micro frontend hydrates itself and becomes interactive. From there on, all user interactions can happen fully client-side. The micro frontends update the markup directly in the browser.\\n\\n[Angular universal](https://angular.io/guide/universal), [Next.js](https://nextjs.org/).\\n\\n[Sample code](https://github.com/naltatis/micro-frontends-in-action-code/tree/master/16_universal): SSI in server-side, ajax and web-component in client side.\\n\\n## Choose the architecture\\n\\n![Micro frontends architecture](/images/micro-frontend/architecture.png)\\n\\nThe decision tree helps to pick a micro frontends architecture based on the project\u2019s requirements.\\n\\n![Micro frontends decision tree](/images/micro-frontend/decision-tree.png)\\n\\nThese two image comes from (https://codeburst.io/which-technique-architecture-is-right-for-my-project-72297e650af3).\\n\\n## Simple designed Unified SPA\\n\\n<details>\\n<summary>Basic mechanism: observable browser location/history, rendering path-corresponding applications.</summary>\\n\\n### Structure\\n\\n```\\nunified-spa/\\n  \u251c\u2500 app-shell/\\n  \u2502  \u251c\u2500 src/\\n  \u2502     \u251c\u2500 index.css\\n  \u2502     \u251c\u2500 index.js\\n  \u2502     \u251c\u2500 index.html\\n  \u2502     \u251c\u2500 layout.js\\n  \u251c\u2500 parcel1/\\n  \u2502  \u251c\u2500 src/\\n  \u2502     \u251c\u2500 favicon.ico\\n  \u2502     \u251c\u2500 index.html\\n  \u2502     \u251c\u2500 index.js\\n  \u251c\u2500 parcel2/\\n  \u2502  \u251c\u2500 src/\\n  \u2502     \u251c\u2500 image.png\\n  \u2502     \u251c\u2500 index.html\\n  \u2502     \u251c\u2500 index.js\\n  \u251c\u2500 README.md\\n  \u251c\u2500 .env\\n```\\n\\n### Development\\n\\nOnly the `app-shell` server is running, all the other app-parcels would generate their static assets (js bundles, images, style assets) into `app-shell`\'s output directory.\\n\\n### Distribution\\n\\nBuild `app-shell` first, then every `app-parcel`.\\n\\n### Concerns\\n\\n- Global state.\\n- Style isolation: [BEM](http://getbem.com/), [css module](https://github.com/css-modules/css-modules), [shadow DOM](https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_shadow_DOM).\\n- Communication among app-parcels: event bus, [broadcast channel](https://developer.mozilla.org/en-US/docs/Web/API/BroadcastChannel), [event bus](https://github.com/developit/mitt).\\n- Shared vendor or dependencies: unified tech stack, vendor version.\\n- Assets updating: cache invalidation strategy.\\n\\n### Glossary\\n\\n| name       | description                                                          |\\n| ---------- | -------------------------------------------------------------------- |\\n| app-shell  | app shell for layout, responsible for micro apps register/unregister |\\n| app-parcel | micro autonomous interactive applications                            |\\n\\n</details>\\n\\n## My Opinion\\n\\nMicro frontends majorly focus on the **integration**. Application integrates components. Micro-frontend integrates micro-apps.\\n\\nIt\'s recommended to do the integration during building/distributing stage, so the end user feel little latency when using the application.\\n\\n## References\\n\\n1. [Micro Frontends in Action](https://www.manning.com/books/micro-frontends-in-action?a_aid=mfia&a_bid=5f09fdeb): An excellent starting point to understand micro frontends. [Sample code](https://github.com/naltatis/micro-frontends-in-action-code#list-of-all-examples) for this book.\\n\\n1. SSR: Render and update markup on the server and in the browser using single code-base. [Universal JavaScript](https://cdb.reacttraining.com/universal-javascript-4761051b7ae9), [Isomorphic JavaScript](https://medium.com/airbnb-engineering/isomorphic-javascript-the-future-of-web-apps-10882b7a2ebc)"},{"id":"/2021/03/27/ts-handbook","metadata":{"permalink":"/blog/2021/03/27/ts-handbook","source":"@site/blog/2021-03-27-ts-handbook.md","title":"TypeScript handbook","description":"A quick cheat sheet for TypeScript.","date":"2021-03-27T00:00:00.000Z","formattedDate":"March 27, 2021","tags":[{"label":"typescript","permalink":"/blog/tags/typescript"}],"readingTime":31.54,"hasTruncateMarker":true,"authors":[],"frontMatter":{"title":"TypeScript handbook","categories":["frontend","typescript"],"tags":["typescript"]},"prevItem":{"title":"Micro Frontends","permalink":"/blog/2021/04/11/micro-frontend"},"nextItem":{"title":"Distributed Tracing","permalink":"/blog/2021/03/21/distributed-tracing"}},"content":"A quick cheat sheet for TypeScript.\\n\\n- [Basic Types](#basic-types)\\n- [Interfaces](#interfaces)\\n- [Functions](#functions)\\n- [Unions and Intersection Types](#unions-and-intersection-types)\\n- [Classes](#classes)\\n- [Generics](#generics)\\n- [Utility Types](#utility-types)\\n- [Decorators](#decorators)\\n- [Declaration](#declaration)\\n- [TSConfig](#tsconfig)\\n\\n## Useful References\\n\\n[TypeScript Handbook](https://www.typescriptlang.org/docs/handbook/intro.html)\\n\\n[TypeScript Deep Dive](https://basarat.gitbook.io/typescript/)\\n\\n[React+TypeScript Cheatsheets](https://github.com/typescript-cheatsheets/react)\\n\\n\x3c!--truncate--\x3e\\n\\n## Basic Types\\n\\nSimple units of data such as numbers, strings, booleans, structures.\\n\\n### Boolean\\n\\n```typescript\\nlet isDone: boolean = false;\\n```\\n\\n### Number\\n\\n```typescript\\nlet decimal: number = 6;\\nlet deci_mal: number = 100_000;\\nlet hex: number = 0xf00d;\\nlet binary: number = 0b1010;\\nlet octal: number = 0o744;\\nlet big: bigint = 100n;\\n```\\n\\n### String\\n\\n```typescript\\nlet color: string = \'blue\';\\ncolor = \'red\';\\n// and template strings\\nlet fullName: string = `Bob Bobbington`;\\nlet age: number = 37;\\nlet sentence: string = `Hello, my name is ${fullName}. I\'ll be ${\\n  age + 1\\n} years old next month.`;\\n// ^ let sentence: string =\\n//    \'Hello, my name is \' +\\n//    fullName +\\n//    \'.\\\\n\\\\n\' +\\n//    \\"I\'ll be \\" +\\n//     (age + 1) +\\n//    \' years old next month.\';\\n```\\n\\n### Array\\n\\n```typescript\\nlet list: number[] = [1, 2, 3];\\n// generic array type\\nlet list: Array<number> = [1, 2, 3];\\n\\n/_ Array as Tuple _/;\\n// Declare a tuple type\\nlet x: [string, number] = [\'hello\', 10];\\nx[2] = \'world\'; // error, no element at index 2\\n```\\n\\n### Enum\\n\\n```typescript\\nenum Color {\\n  Red /* = 0, inferred */,\\n  Color /* = 1, inferred */,\\n  Blue /* = 2, inferred */,\\n}\\nlet c: Color = Color.Green;\\n\\nenum Color {\\n  Red = 1,\\n  Green /* = 2, inferred */,\\n  Blue /* = 3, inferred */,\\n}\\nlet c: Color = Color.Green;\\n\\nenum Color {\\n  Red = 1,\\n  Green = 2,\\n  Blue = 4,\\n}\\nlet c: Color = Color.Green;\\n\\nenum Color {\\n  Red = 1,\\n  Green /* = 2, inferred */,\\n  Blue /* = 3, inferred */,\\n}\\nlet colorName: string = Color[2];\\n\\n// Displays \'Green\'\\nconsole.log(colorName);\\n\\n// string enums\\nenum Direction {\\n  Up = \'UP\',\\n  Down = \'DOWN\',\\n  Left = \'LEFT\',\\n  Right = \'RIGHT\',\\n}\\n\\n// Technically enums can be mixed with string and numeric members,\\n// but it\u2019s not clear why you would ever want to do so.\\n// OK but why.\\nenum BooleanLikeHeterogeneousEnum {\\n  No = 0,\\n  Yes = \'YES\',\\n}\\n\\n// reverse mappings\\nenum Enum {\\n  A,\\n}\\n\\nlet a = Enum.A;\\nlet nameOfA = Enum[a]; // \\"A\\"\\n```\\n\\n### Unknown\\n\\nThis variable could be anything.\\n\\n```typescript\\nlet notSure: unknown = 4;\\nnotSure = \'maybe a string instead\';\\n\\n// OK, definitely a boolean\\nnotSure = false;\\n```\\n\\n### Any\\n\\nWe might want to opt-out of type checking.\\n\\n```typescript\\ndeclare function getValue(key: string): any;\\n// OK, return value of \'getValue\' is not checked\\nconst str: string = getValue(\'myString\');\\n\\nlet looselyTyped: any = {};\\nlet d = looselyTyped.a.b.c.d;\\n//  ^ = let d: any, type inference is propagated\\n```\\n\\n### Void\\n\\nThe absence of having any type at all.\\n\\n```typescript\\nfunction warnUser(): void {\\n  console.log(\'This is my warning message\');\\n}\\n```\\n\\nYou would get and type error if you assign `null` to a void variable (only if `--strictNullChecks` is not specified).\\n\\n```typescript\\nlet unusable: void = undefined;\\n// OK if `--strictNullChecks` is not given\\nunusable = null;\\n```\\n\\n### Null and Undefined\\n\\n```typescript\\n// Not much else we can assign to these variables!\\nlet u: undefined = undefined;\\nlet n: null = null;\\n```\\n\\n### Never\\n\\nThe `never` type represents the type of values that never occur. For instance, `never` is the return type for a function expression or an arrow function expression that always throws an exception or one that never returns.\\n\\n```typescript\\n// Function returning never must not have a reachable end point\\nfunction error(message: string): never {\\n  throw new Error(message);\\n}\\n\\n// Inferred return type is never\\nfunction fail() {\\n  return error(\'Something failed\');\\n}\\n\\n// Function returning never must not have a reachable end point\\nfunction infiniteLoop(): never {\\n  while (true) {}\\n}\\n```\\n\\n### Object\\n\\n`object` is a type that represents the non-primitive type, i.e. anything that is not `number`, `string`, `boolean`, `bigint`, `symbol`, `null`, or `undefined`.\\n\\nGenerally, use `Type` or `Interface` rather than `object`.\\n\\n```typescript\\ndeclare function create(o: object | null): void;\\n\\n// OK\\ncreate({ prop: 0 });\\ncreate(null);\\n\\ncreate(undefined); // Remember, undefined is not a subtype of null\\n// Argument of type \'undefined\' is not assignable to parameter of type \'object | null\'.\\n\\ncreate(42);\\n// Argument of type \'42\' is not assignable to parameter of type \'object | null\'.\\n\\ncreate(\'string\');\\n// Argument of type \'\\"string\\"\' is not assignable to parameter of type \'object | null\'.\\n\\ncreate(false);\\n// Argument of type \'false\' is not assignable to parameter of type \'object | null\'.\\n```\\n\\n### Type Assertions\\n\\nType assertions are a way to tell the compiler _trust me, I know what I\u2019m doing_.\\n\\nA type assertion is like a type cast in other languages, but it performs no special checking or restructuring of data.\\n\\nIt has no runtime impact and is used purely by the compiler.\\n\\n```typescript\\n// as syntax\\nlet someValue: unknown = \'this is a string\';\\nlet strLength: number = (someValue as string).length;\\n\\n// angle-bracket syntax\\nlet someValue: unknown = \'this is a string\';\\nlet strLength: number = (<string>someValue).length;\\n```\\n\\n## Interfaces\\n\\nThis is sometimes called _duck typing_ or _structural subtyping_.\\n\\n```typescript\\nfunction printLabel(labeledObj: { label: string }) {\\n  console.log(labeledObj.label);\\n}\\n\\n// more properties is fine\\nlet myObj = { size: 10, label: \'Size 10 Object\' };\\nprintLabel(myObj);\\n\\n// --- equivalent\\n\\ninterface LabeledValue {\\n  label: string;\\n}\\n\\nfunction printLabel(labeledObj: LabeledValue) {\\n  console.log(labeledObj.label);\\n}\\n\\nlet myObj = { size: 10, label: \'Size 10 Object\' };\\nprintLabel(myObj);\\n```\\n\\n### Optional Properties\\n\\n```typescript\\ninterface SquareConfig {\\n  color?: string;\\n  width?: number;\\n}\\n\\nfunction createSquare(config: SquareConfig): { color: string; area: number } {\\n  let newSquare = { color: \'white\', area: 100 };\\n  if (config.color) {\\n    newSquare.color = config.color;\\n  }\\n  if (config.width) {\\n    newSquare.area = config.width * config.width;\\n  }\\n  return newSquare;\\n}\\n\\nlet mySquare = createSquare({ color: \'black\' });\\n```\\n\\n### Readonly properties\\n\\nSome properties should only be modifiable when an object is first created.\\n\\n> Variables use const whereas properties use readonly.\\n\\n```typescript\\ninterface Point {\\n  readonly x: number;\\n  readonly y: number;\\n}\\n\\nlet p1: Point = { x: 10, y: 20 };\\np1.x = 5; // error!\\n\\nlet a: number[] = [1, 2, 3, 4];\\nlet ro: ReadonlyArray<number> = a;\\nro[0] = 12; // error!\\nro.push(5); // error!\\na = ro; // error!\\n\\na = ro as number[]; // OK\\n```\\n\\n### Excess Property Checks\\n\\n```typescript\\ninterface SquareConfig {\\n  color?: string;\\n  width?: number;\\n}\\n\\nfunction createSquare(config: SquareConfig): { color: string; area: number } {\\n  return {\\n    color: config.color || \'red\',\\n    area: config.width ? config.width * config.width : 20,\\n  };\\n}\\n\\nlet mySquare = createSquare({ colour: \'red\', width: 100 });\\n// Error, compiler think it is a potential bug\\n\\nlet mySquare = createSquare({\\n  colour: \'red\',\\n  width: 100,\\n} as SquareConfig);\\n// OK\\n\\n// --- better\\n\\ninterface SquareConfig {\\n  color?: string;\\n  width?: number;\\n  [propName: string]: any;\\n}\\n\\nlet mySquare = createSquare({ colour: \'red\', width: 100 });\\n// now is OK, common property `width`\\n\\nlet mySquare = createSquare({ colour: \'red\' });\\n// Error, no common properties\\n```\\n\\n### Function Types\\n\\nTo describe a function type with an interface, we give the interface a call signature. This is like a function declaration with only the parameter list and return type given.\\n\\n```typescript\\ninterface SearchFunc {\\n  (source: string, subString: string): boolean;\\n}\\n\\nlet mySearch: SearchFunc;\\nmySearch = function (source: string, subString: string) {\\n  let result = source.search(subString);\\n  return result > -1;\\n};\\n\\n// using different parameter name\\n// types are inferred\\nmySearch = function (src, sub) {\\n  let result = src.search(sub);\\n  return result > -1;\\n};\\n```\\n\\n### Indexable Types\\n\\n_index signature_, use that type to index into the object.\\n\\n```typescript\\ninterface StringArray {\\n  [index: number]: string;\\n}\\n\\nlet myArray: StringArray;\\nmyArray = [\'Bob\', \'Frend\'];\\n\\nlet myStr: string = myArray[0];\\n```\\n\\n_indexed access type_ to look up a specific property on another type.\\n\\n```typescript\\ntype Person = { age: number; name: string; alive: boolean };\\n\\ntype Age = Person[\'age\'];\\n//   ^ = type Age = number\\n\\ntype I1 = Person[\'age\' | \'name\'];\\n//   ^ = type I1 = string | number\\n\\ntype I2 = Person[keyof Person];\\n//   ^ = type I2 = string | number | boolean\\n\\ntype AliveOrName = \'alive\' | \'name\';\\ntype I3 = Person[AliveOrName];\\n//   ^ = type I3 = string | boolean\\n\\nconst MyArray = [\\n  { name: \'Alice\', age: 15 },\\n  { name: \'Bob\', age: 23 },\\n  { name: \'Eve\', age: 38 },\\n];\\n\\ntype Person = typeof MyArray[number];\\n//   ^ = type Person = {\\n//       name: string;\\n//       age: number;\\n//   }\\ntype Age = typeof MyArray[number][\'age\'];\\n//   ^ = type Age = number\\n// Or\\ntype Age2 = Person[\'age\'];\\n//   ^ = type Age2 = number\\n```\\n\\n### Conditional Types\\n\\n_Conditional types_ help describe the relation between the types of inputs and outputs.\\n\\n```typescript\\ninterface Animal {\\n  live(): void;\\n}\\ninterface Dog extends Animal {\\n  woof(): void;\\n}\\n\\ntype Example1 = Dog extends Animal ? number : string;\\n//   ^ = type Example1 = number\\n\\ntype Example2 = RegExp extends Animal ? number : string;\\n//   ^ = type Example2 = string\\n\\ntype NumberOrString<T extends number | string> = T extends number\\n  ? NumberType\\n  : StringType;\\n\\ntype MessageOf<T> = T extends { message: unknown } ? T[\'message\'] : never;\\n\\ntype Flatten<Type> = Type extends Array<infer Item> ? Item : Type;\\n```\\n\\n### Distributive Conditional Types\\n\\nWhen conditional types act on a generic type, they become distributive when given a union type.\\n\\nTypically, distributivity is the desired behavior. To avoid that behavior, you can surround each side of the extends keyword with square brackets.\\n\\n```typescript\\ntype ToArray<Type> = Type extends any ? Type[] : never;\\ntype StrArrOrNumArr = ToArray<string | number>;\\n//   ^ = type StrArrOrNumArr = string[] | number[]\\n//   ^ !! not <string | number>[]\\n\\ntype ToArrayNonDist<Type> = [Type] extends [any] ? Type[] : never;\\n// \'StrOrNumArr\' is no longer a union.\\ntype StrOrNumArr = ToArrayNonDist<string | number>;\\n//   ^ = type StrOrNumArr = (string | number)[]\\n//   ^ !! not string[] | number[]\\n```\\n\\n### Class Types\\n\\nExplicitly enforce a class meets (_implements_) a particular contract (_interface_).\\n\\nInterfaces describe the public side of the class, rather than both the public and private side.\\n\\n```typescript\\ninterface ClockInterface {\\n  currentTime: Date;\\n  setTime(d: Date): void;\\n}\\n\\nclass Clock implements ClockInterface {\\n  currentTime: Date = new Date();\\n  setTime(d: Date) {\\n    this.currentTime = d;\\n  }\\n  constructor(h: number, m: number) {}\\n}\\n```\\n\\nWhen a class implements an interface, only the instance side of the class is checked. Since the constructor sits in the static side, it is not included in this check.\\n\\nSee the following example.\\n\\n```typescript\\ninterface ClockConstructor {\\n  new (hour: number, minute: number);\\n}\\n\\nclass Clock implements ClockConstructor {\\n  // Error\\n  // Class \'Clock\' incorrectly implements interface \'ClockConstructor\'.\\n  // Type \'Clock\' provides no match for the signature \'new (hour: number, minute: number): any\'.\\n  currentTime: Date;\\n  constructor(h: number, m: number) {}\\n}\\n\\n// --- fix it\\n\\n// constructor interface\\ninterface ClockConstructor {\\n  new (hour: number, minute: number): ClockInterface;\\n}\\n\\n// class interface\\ninterface ClockInterface {\\n  tick(): void;\\n}\\n\\n// factory function\\nfunction createClock(\\n  ctor: ClockConstructor,\\n  hour: number,\\n  minute: number\\n): ClockInterface {\\n  return new ctor(hour, minute);\\n}\\n\\nclass DigitalClock implements ClockInterface {\\n  constructor(h: number, m: number) {}\\n  tick() {\\n    console.log(\'beep beep\');\\n  }\\n}\\n\\nclass AnalogClock implements ClockInterface {\\n  constructor(h: number, m: number) {}\\n  tick() {\\n    console.log(\'tick tock\');\\n  }\\n}\\n\\nlet digital = createClock(DigitalClock, 12, 17);\\nlet analog = createClock(AnalogClock, 7, 32);\\n\\n// ---\\n// Another simple way is to use class expressions:\\n\\ninterface ClockConstructor {\\n  new (hour: number, minute: number): ClockInterface;\\n}\\n\\ninterface ClockInterface {\\n  tick(): void;\\n}\\n\\n// class expressions\\nconst Clock: ClockConstructor = class Clock implements ClockInterface {\\n  constructor(h: number, m: number) {}\\n  tick() {\\n    console.log(\'beep beep\');\\n  }\\n};\\n\\nlet clock = new Clock(12, 17);\\nclock.tick();\\n```\\n\\n### Extending Interfaces\\n\\nYou can copy the members of one interface into another.\\n\\n```typescript\\ninterface Shape {\\n  color: string;\\n}\\n\\ninterface PenStroke {\\n  penWidth: number;\\n}\\n\\ninterface Square extends Shape, PenStroke {\\n  sideLength: number;\\n}\\n\\nlet square = {} as Square;\\nsquare.color = \'blue\';\\nsquare.sideLength = 10;\\nsquare.penWidth = 5.0;\\n```\\n\\n### Hybrid Types\\n\\nWhen interacting with 3rd-party JavaScript, you may need to use patterns like the following to fully describe the shape of the type.\\n\\n```typescript\\ninterface Counter {\\n  (start: number): string;\\n  interval: number;\\n  reset(): void;\\n}\\n\\nfunction getCounter(): Counter {\\n  let counter = function (start: number) {} as Counter;\\n  counter.interval = 1;\\n  counter.reset = function () {};\\n  return counter;\\n}\\n\\nlet c = getCounter();\\nc(10);\\nc.reset();\\nc.interval = 5.0;\\n```\\n\\n### Interfaces Extending Classes\\n\\nWhen an interface type extends a class type it inherits the members of the class but not their implementations.\\n\\nInterfaces inherit even the private and protected members of a base class. This means that when you create an interface that extends a class with private or protected members, that interface type can only be implemented by that class or a subclass of it.\\n\\n```typescript\\nclass Control {\\n  private state: number;\\n}\\n\\ninterface SelectableControl extends Control {\\n  select(): void;\\n}\\n\\nclass Button extends Control implements SelectableControl {\\n  select() {\\n    this.state = 3;\\n    // Error, Property \'state\' is private and only accessible within class \'Control\'.\\n  }\\n}\\n\\nclass TextBox extends Control {\\n  select() {\\n    this.state = 3;\\n    // Error, Property \'state\' is private and only accessible within class \'Control\'.\\n  }\\n}\\n\\nclass ImageControl implements SelectableControl {\\n  // Class \'ImageControl\' incorrectly implements interface \'SelectableControl\'.\\n  // Types have separate declarations of a private property \'state\'.\\n  // Class \'ImageControl\' cannot implement SelectableControl.\\n  private state: string | any;\\n  select() {}\\n}\\n```\\n\\n### Literal Types\\n\\n```typescript\\ntype Easing = \'ease-in\' | \'ease-out\' | \'ease-in-out\';\\n\\nfunction rollDice(): 1 | 2 | 3 | 4 | 5 | 6 {\\n  return (Math.floor(Math.random() * 6) + 1) as 1 | 2 | 3 | 4 | 5 | 6;\\n}\\n\\ninterface MapConfig {\\n  lng: number;\\n  lat: number;\\n  tileSize: 8 | 16 | 32;\\n}\\n\\ninterface ValidationSuccess {\\n  isValid: true;\\n  reason: null;\\n}\\n\\ninterface ValidationFailure {\\n  isValid: false;\\n  reason: string;\\n}\\n\\ntype ValidationResult = ValidationSuccess | ValidationFailure;\\n```\\n\\n## Functions\\n\\n### Function Types\\n\\n```typescript\\n// Named function\\nfunction add(x: number, y: number): number {\\n  return x + y;\\n}\\n\\n// Anonymous function\\nlet myAdd = function (x: number, y: number): number {\\n  return x + y;\\n};\\n\\nlet myAdd: (x: number, y: number) => number = function (\\n  x: number,\\n  y: number\\n): number {\\n  return x + y;\\n};\\n\\nlet myAdd: (baseValue: number, increment: number) => number = function (\\n  x: number,\\n  y: number\\n): number {\\n  return x + y;\\n};\\n\\n// the full function type\\nlet myAdd: (baseValue: number, increment: number) => number = function (x, y) {\\n  return x + y;\\n};\\n\\ntype DescribableFunction = {\\n  description: string;\\n  (someArg: number): boolean;\\n};\\n\\nfunction doSomething(fn: DescribableFunction) {\\n  console.log(fn.description + \' returned \' + fn(6));\\n}\\n\\nfunction map<Input, Output>(\\n  arr: Input[],\\n  func: (arg: Input) => Output\\n): Output[] {\\n  return arr.map(func);\\n}\\nfunction combine<T>(arr1: T[], arr2: T[]): T[] {\\n  return arr1.concat(arr2);\\n}\\n```\\n\\n### Optional and Default Parameters\\n\\n```typescript\\nfunction buildName(firstName: string, lastName?: string) {\\n  if (lastName) {\\n    return firstName + \' \' + lastName;\\n  } else {\\n    return firstName;\\n  }\\n}\\n\\nfunction buildName(firstName: string, lastName = \'Smith\') {\\n  return firstName + \' \' + lastName;\\n}\\n```\\n\\n### Rest Parameters\\n\\n```typescript\\nfunction buildName(firstName: string, ...restOfName: string[]) {\\n  return firstName + \' \' + restOfName.join(\' \');\\n}\\n\\n// employeeName will be \\"Joseph Samuel Lucas MacKinzie\\"\\nlet employeeName = buildName(\'Joseph\', \'Samuel\', \'Lucas\', \'MacKinzie\');\\n\\nlet buildNameFun: (fname: string, ...rest: string[]) => string = buildName;\\n```\\n\\n### this parameters\\n\\n```typescript\\ninterface Card {\\n  suit: string;\\n  card: number;\\n}\\n\\ninterface Deck {\\n  suits: string[];\\n  cards: number[];\\n  createCardPicker(this: Deck): () => Card;\\n}\\n\\nlet deck: Deck = {\\n  suits: [\'hearts\', \'spades\', \'clubs\', \'diamonds\'],\\n  cards: Array(52),\\n  // NOTE: The function now explicitly specifies that its callee must be of type Deck\\n  createCardPicker: function (this: Deck) {\\n    return () => {\\n      let pickedCard = Math.floor(Math.random() * 52);\\n      let pickedSuit = Math.floor(pickedCard / 13);\\n\\n      return { suit: this.suits[pickedSuit], card: pickedCard % 13 };\\n    };\\n  },\\n};\\n\\nlet cardPicker = deck.createCardPicker();\\nlet pickedCard = cardPicker();\\n\\nalert(\'card: \' + pickedCard.card + \' of \' + pickedCard.suit);\\n```\\n\\n### Function Overloads\\n\\n```typescript\\ninterface pickCardFn {\\n  (x: { suit: string; card: number }[]): number;\\n  (x: number): { suit: string; card: number };\\n}\\n\\nlet suits = [\'hearts\', \'spades\', \'clubs\', \'diamonds\'];\\n\\nfunction pickCard(x: { suit: string; card: number }[]): number;\\nfunction pickCard(x: number): { suit: string; card: number };\\nfunction pickCard(x: any): any {\\n  // Check to see if we\'re working with an object/array\\n  // if so, they gave us the deck and we\'ll pick the card\\n  if (typeof x == \'object\') {\\n    let pickedCard = Math.floor(Math.random() * x.length);\\n    return pickedCard;\\n  }\\n  // Otherwise just let them pick the card\\n  else if (typeof x == \'number\') {\\n    let pickedSuit = Math.floor(x / 13);\\n    return { suit: suits[pickedSuit], card: x % 13 };\\n  }\\n}\\n```\\n\\n## Unions and Intersection Types\\n\\n```typescript\\n/**\\n * Takes a string and adds \\"padding\\" to the left.\\n * If \'padding\' is a string, then \'padding\' is appended to the left side.\\n * If \'padding\' is a number, then that number of spaces is added to the left side.\\n */\\nfunction padLeft(value: string, padding: string | number) {\\n  // ...\\n}\\n```\\n\\n### Discriminating Unions\\n\\n```typescript\\ntype NetworkLoadingState = {\\n  state: \'loading\';\\n};\\n\\ntype NetworkFailedState = {\\n  state: \'failed\';\\n  code: number;\\n};\\n\\ntype NetworkSuccessState = {\\n  state: \'success\';\\n  response: {\\n    title: string;\\n    duration: number;\\n    summary: string;\\n  };\\n};\\n\\ntype NetworkFromCachedState = {\\n  state: \'from_cache\';\\n  id: string;\\n  response: NetworkSuccessState[\'response\'];\\n};\\n\\n// Create a type which represents only one of the above types\\n// but you aren\'t sure which it is yet.\\ntype NetworkState =\\n  | NetworkLoadingState\\n  | NetworkFailedState\\n  | NetworkSuccessState;\\n\\nfunction logger(state: NetworkState): string {\\n  // Right now TypeScript does not know which of the three\\n  // potential types state could be.\\n\\n  // Trying to access a property which isn\'t shared\\n  // across all types will raise an error\\n  state.code;\\n  // Error\\n  // Property \'code\' does not exist on type \'NetworkState\'.\\n  // Property \'code\' does not exist on type \'NetworkLoadingState\'.\\n\\n  // By switching on state, TypeScript can narrow the union\\n  // down in code flow analysis\\n  switch (state.state) {\\n    case \'loading\':\\n      return \'Downloading...\';\\n    case \'failed\':\\n      // The type must be NetworkFailedState here,\\n      // so accessing the `code` field is safe\\n      return `Error ${state.code} downloading`;\\n    case \'success\':\\n      return `Downloaded ${state.response.title} - ${state.response.summary}`;\\n  }\\n}\\n```\\n\\n### Intersection Types\\n\\n> `Person & Serializable & Loggable` is a type which is all of `Person` and `Serializable` and `Loggable`. That means an object of this type will have all members of all three types.\\n\\n```typescript\\ninterface ErrorHandling {\\n  success: boolean;\\n  error?: { message: string };\\n}\\n\\ninterface ArtworksData {\\n  artworks: { title: string }[];\\n}\\n\\ninterface ArtistsData {\\n  artists: { name: string }[];\\n}\\n\\n// These interfaces are composed to have\\n// consistent error handling, and their own data.\\ntype ArtworksResponse = ArtworksData & ErrorHandling;\\ntype ArtistsResponse = ArtistsData & ErrorHandling;\\n\\nconst handleArtistsResponse = (response: ArtistsResponse) => {\\n  if (response.error) {\\n    console.error(response.error.message);\\n    return;\\n  }\\n\\n  console.log(response.artists);\\n};\\n```\\n\\n## Classes\\n\\n### ECMAScript Private Fields\\n\\n```typescript\\nclass Animal {\\n  #name: string;\\n  constructor(theName: string) {\\n    this.#name = theName;\\n  }\\n}\\n\\nnew Animal(\'Cat\').#name;\\n// Error\\n// Property \'#name\' is not accessible outside class \'Animal\' because it has a private identifier.\\n```\\n\\n### Accessors\\n\\nTypeScript supports _getters/setters_ as a way of intercepting accesses to a member of an object. This gives you a way of having finer-grained control over how a member is accessed on each object.\\n\\n```typescript\\nconst fullNameMaxLength = 10;\\n\\nclass Employee {\\n  private _fullName: string = \'\';\\n\\n  get fullName(): string {\\n    return this._fullName;\\n  }\\n\\n  set fullName(newName: string) {\\n    if (newName && newName.length > fullNameMaxLength) {\\n      throw new Error(\'fullName has a max length of \' + fullNameMaxLength);\\n    }\\n\\n    this._fullName = newName;\\n  }\\n}\\n\\nlet employee = new Employee();\\nemployee.fullName = \'Bob Smith\';\\n\\nif (employee.fullName) {\\n  console.log(employee.fullName);\\n}\\n```\\n\\n### Abstract Classes\\n\\nAbstract classes are base classes from which other classes may be derived. They may not be instantiated directly.\\n\\n```typescript\\nabstract class Animal {\\n  abstract makeSound(): void;\\n\\n  move(): void {\\n    console.log(\'roaming the earth...\');\\n  }\\n}\\n\\n// using extends to derive/inherit , not implements\\nclass Dog extends Animal {\\n  makeSound() {\\n    super.makeSound();\\n    // Error, Abstract method \'makeSound\' in class \'Animal\' cannot be accessed via super expression.\\n  }\\n  move() {\\n    super.move();\\n    // OK\\n  }\\n}\\nlet dog = new Dog();\\ndog.move();\\n```\\n\\n## Generics\\n\\n```typescript\\nfunction identity<T>(arg: T): T {\\n  return arg;\\n}\\n\\nlet myIdentity: <T>(arg: T) => T = identity;\\nlet myIdentity: <U>(arg: U) => U = identity;\\n\\nlet myIdentity: { <T>(arg: T): T } = identity;\\ninterface GenericIdentityFn {\\n  <T>(arg: T): T;\\n}\\nlet myIdentity: GenericIdentityFn = identity;\\n\\nfunction loggingIdentity<T>(arg: T[]): T[] {\\n  console.log(arg.length);\\n  return arg;\\n}\\n\\nclass GenericNumber<T> {\\n  zeroValue: T;\\n  add: (x: T, y: T) => T;\\n}\\n\\nlet myGenericNumber = new GenericNumber<number>();\\nmyGenericNumber.zeroValue = 0;\\nmyGenericNumber.add = function (x, y) {\\n  return x + y;\\n};\\n\\n/* Generic constraints */\\ninterface Lengthwise {\\n  length: number;\\n}\\nfunction loggingIdentity<T extends Lengthwise>(arg: T): T {\\n  console.log(arg.length); // Now we know it has a .length property, so no more error\\n  return arg;\\n}\\n\\n/* Type parameters in generic constraints */\\nfunction getProperty<T, K extends keyof T>(obj: T, key: K) {\\n  return obj[key];\\n}\\n\\nlet x = { a: 1, b: 2, c: 3, d: 4 };\\n\\ngetProperty(x, \'a\');\\n```\\n\\n## Utility Types\\n\\nTypeScript provides several utility types to facilitate common type transformations. These utilities are available globally.\\n\\n- **`keyof Type`**: takes an object type and produces a string or numeric literal union of its keys.\\n\\n  > `type Keys = keyof Type`\\n\\n  ```typescript\\n  type Point = { x: number; y: number };\\n  type P = keyof Point;\\n  //   ^ = type P = \\"x\\" | \\"y\\"\\n  ```\\n\\n- **`typeof Type`**: an operator to use in a type context to refer to the type of a variable or property.\\n\\n  > `type TypeB = typeof Type`\\n\\n  ```typescript\\n  let s = \'hello\';\\n  let n: typeof s;\\n  //  ^ = let n: string;\\n  ```\\n\\n- **`Partial<Type>`**: a type represents all subset of a given type\\n\\n  > `type Partial<T> = { [P in keyof T]?: T[P] | undefined; }`\\n\\n  ```typescript\\n  interface Todo {\\n    title: string;\\n    description: string;\\n  }\\n\\n  function updateTodo(todo: Todo, fieldsToUpdate: Partial<Todo>) {\\n    return { ...todo, ...fieldsToUpdate };\\n  }\\n  ```\\n\\n- **`Required<Type>`**: make all properties required\\n\\n  > `type Required<T> = { [P in keyof T]-?: T[P]; }`\\n\\n  ```typescript\\n  interface Props {\\n    a?: number;\\n    b?: string;\\n  }\\n\\n  const obj: Required<Props> = { a: 5, b: \'3\' };\\n  ```\\n\\n- **`Readonly<Type>`**: make all properties of Type set to readonly\\n\\n  > `type Readonly<T> = { readonly [P in keyof T]: T[P]; }`\\n\\n  ```typescript\\n  interface Todo {\\n    title: string;\\n  }\\n  const todo: Readonly<Todo> = {\\n    title: \'Delete inactive users\',\\n  };\\n\\n  todo.title = \'Hello\';\\n  // Error, title is read-only\\n  ```\\n\\n- **`Record<Keys, Type>`**: construct an object type whose property keys are `Keys`, and whose property values are `Type`.\\n\\n  > `type Record<K extends string | number | symbol, T> = { [P in K]: T; }`\\n\\n  ```typescript\\n  interface PageInfo {\\n    title: string;\\n  }\\n\\n  type Page = \'home\' | \'about\' | \'contact\';\\n\\n  const nav: Record<Page, PageInfo> = {\\n    about: { title: \'about\' },\\n    contact: { title: \'contact\' },\\n    home: { title: \'home\' },\\n  };\\n\\n  nav.about;\\n  // ^ = const nav: Record\\n  ```\\n\\n- **`Pick<Type, Keys>`**: construct a type by picking the set of properties `Keys` from `Type`.\\n\\n  > `type Pick<T, K extends keyof T> = { [P in K]: T[P]; }`\\n\\n  ```typescript\\n  interface Todo {\\n    title: string;\\n    description: string;\\n    completed: boolean;\\n  }\\n\\n  type TodoPreview = Pick<Todo, \'title\' | \'completed\'>;\\n\\n  const todo: TodoPreview = {\\n    title: \'Clean room\',\\n    completed: false,\\n  };\\n  ```\\n\\n- **`Omit<Type, Keys>`**: constructs a type by picking all properties from `Type` and then removing `Keys`.\\n\\n  > `type Omit<T, K extends string | number | symbol> = { [P in Exclude<keyof T, K>]: T[P]; }`\\n\\n  ```typescript\\n  interface Todo {\\n    title: string;\\n    description: string;\\n    completed: boolean;\\n  }\\n\\n  type TodoPreview = Omit<Todo, \'description\'>;\\n\\n  const todo: TodoPreview = {\\n    title: \'Clean room\',\\n    completed: false,\\n  };\\n  ```\\n\\n- **`Exclude<Type, ExcludedUnion>`**: construct a type by excluding from `Type` all union members that are assignable to ExcludedUnion.\\n\\n  > `type Exclude<T, U> = T extends U ? never : T`\\n\\n  ```typescript\\n  type T0 = Exclude<\'a\' | \'b\' | \'c\', \'a\'>;\\n  //    ^ = type T0 = \\"b\\" | \\"c\\"\\n  type T1 = Exclude<\'a\' | \'b\' | \'c\', \'a\' | \'b\'>;\\n  //    ^ = type T1 = \\"c\\"\\n  type T2 = Exclude<string | number | (() => void), Function>;\\n  //    ^ = type T2 = string | number\\n  ```\\n\\n- **`Extract<Type, Union>`**: constructs a type by extracting from `Type` all union members that are assignable to `Union`.\\n\\n  > `type Extract<T, U> = T extends U ? T : never`\\n\\n  ```typescript\\n  type T0 = Extract<\'a\' | \'b\' | \'c\', \'a\' | \'f\'>;\\n  //    ^ = type T0 = \\"a\\"\\n  type T1 = Extract<string | number | (() => void), Function>;\\n  //    ^ = type T1 = () => void\\n  ```\\n\\n- **`NonNullable<Type>`**: constructs a type by excluding `null` and `undefined` from `Type`.\\n\\n  > `type NonNullable<T> = T extends null | undefined ? never : T`\\n\\n  ```typescript\\n  type T0 = NonNullable<string | number | undefined>;\\n  //    ^ = type T0 = string | number\\n  type T1 = NonNullable<string[] | null | undefined>;\\n  //    ^ = type T1 = string[]\\n  ```\\n\\n- **`Parameters<Type>`**: constructs a tuple type from the types used in the parameters of a function type `Type`.\\n\\n  > `type Parameters<T extends (...args: any) => any> = T extends (...args: infer P) => any ? P : never`\\n\\n  ```typescript\\n  declare function f1(arg: { a: number; b: string }): void;\\n\\n  type T0 = Parameters<() => string>;\\n  //    ^ = type T0 = []\\n  type T1 = Parameters<(s: string) => void>;\\n  //    ^ = type T1 = [s: string]\\n  type T2 = Parameters<<T>(arg: T) => T>;\\n  //    ^ = type T2 = [arg: unknown]\\n  type T3 = Parameters<typeof f1>;\\n  //    ^ = type T3 = [arg: {\\n  //        a: number;\\n  //        b: string;\\n  //    }]\\n  type T4 = Parameters<any>;\\n  //    ^ = type T4 = unknown[]\\n  type T5 = Parameters<never>;\\n  //    ^ = type T5 = never\\n  ```\\n\\n- **`ConstructorParameters<Type>`**: constructs a tuple or array type from the types of a constructor function type. It produces a tuple type with all the parameter types (or the type never if `Type` is not a function).\\n\\n  > `type ConstructorParameters<T extends new (...args: any) => any> = T extends new (...args: infer P) => any ? P : never`\\n\\n  ```typescript\\n  type T0 = ConstructorParameters<ErrorConstructor>;\\n  //    ^ = type T0 = [message?: string]\\n  type T1 = ConstructorParameters<FunctionConstructor>;\\n  //    ^ = type T1 = string[]\\n  type T2 = ConstructorParameters<RegExpConstructor>;\\n  //    ^ = type T2 = [pattern: string | RegExp, flags?: string]\\n  type T3 = ConstructorParameters<any>;\\n  //    ^ = type T3 = unknown[]\\n  ```\\n\\n- **`ReturnType<Type>`**: constructs a type consisting of the return type of function `Type`.\\n\\n  > `type ReturnType<T extends (...args: any) => any> = T extends (...args: any) => infer R ? R : any`\\n\\n  ```typescript\\n  declare function f1(): { a: number; b: string };\\n\\n  type T0 = ReturnType<() => string>;\\n  //    ^ = type T0 = string\\n  type T1 = ReturnType<(s: string) => void>;\\n  //    ^ = type T1 = void\\n  type T2 = ReturnType<<T>() => T>;\\n  //    ^ = type T2 = unknown\\n  type T3 = ReturnType<<T extends U, U extends number[]>() => T>;\\n  //    ^ = type T3 = number[]\\n  type T4 = ReturnType<typeof f1>;\\n  //    ^ = type T4 = {\\n  //        a: number;\\n  //        b: string;\\n  //    }\\n  type T5 = ReturnType<any>;\\n  //    ^ = type T5 = any\\n  type T6 = ReturnType<never>;\\n  //    ^ = type T6 = never\\n  ```\\n\\n- **`InstanceType<Type>`**: constructs a type consisting of the instance type of a constructor function in `Type`.\\n\\n  > `type InstanceType<T extends new (...args: any) => any> = T extends new (...args: any) => infer R ? R : any`\\n\\n  ```typescript\\n  class C {\\n    x = 0;\\n    y = 0;\\n  }\\n\\n  type T0 = InstanceType<typeof C>;\\n  //    ^ = type T0 = C\\n  type T1 = InstanceType<any>;\\n  //    ^ = type T1 = any\\n  type T2 = InstanceType<never>;\\n  //    ^ = type T2 = never\\n  ```\\n\\n- **`ThisParameterType<Type>`**: extracts the type of the _this_ parameter for a function type, or unknown if the function type has no _this_ parameter.\\n\\n  > `type ThisParameterType<T> = T extends (this: infer U, ...args: any[]) => any ? U : unknown`\\n\\n  ```typescript\\n  function toHex(this: Number) {\\n    return this.toString(16);\\n  }\\n\\n  function numberToString(n: ThisParameterType<typeof toHex>) {\\n    return toHex.apply(n);\\n  }\\n  ```\\n\\n- **`OmitThisParameter<Type>`**: removes the _this_ parameter from `Type`. If `Type` has no explicitly declared _this_ parameter, the result is simply `Type`. Otherwise, a new function type with no _this_ parameter is created from `Type`. Generics are erased and only the last overload signature is propagated into the new function type.\\n\\n  > `type OmitThisParameter<T> = unknown extends ThisParameterType<T> ? T : T extends (...args: infer A) => infer R ? (...args: A) => R : T`\\n\\n  ```typescript\\n  function toHex(this: Number) {\\n    return this.toString(16);\\n  }\\n\\n  const fiveToHex: OmitThisParameter<typeof toHex> = toHex.bind(5);\\n  ```\\n\\n- **`ThisType<Type>`**: serves as a marker for a contextual _this_ type. This utility does not return a transformed type.\\n\\n  > `interface ThisType<T>`\\n\\n  ```typescript\\n  type ObjectDescriptor<D, M> = {\\n    data?: D;\\n    methods?: M & ThisType<D & M>; // Type of \'this\' in methods is D & M\\n  };\\n\\n  function makeObject<D, M>(desc: ObjectDescriptor<D, M>): D & M {\\n    let data: object = desc.data || {};\\n    let methods: object = desc.methods || {};\\n    return { ...data, ...methods } as D & M;\\n  }\\n\\n  let obj = makeObject({\\n    data: { x: 0, y: 0 },\\n    methods: {\\n      moveBy(dx: number, dy: number) {\\n        this.x += dx; // Strongly typed this\\n        this.y += dy; // Strongly typed this\\n      },\\n    },\\n  });\\n  ```\\n\\n  <span></span>\\n\\nBe smart to use these types.\\n\\n## Decorators\\n\\n### Decorator Evaluation\\n\\nThere is a well-defined order to how decorators applied to various declarations inside of a class are applied:\\n\\n- _Parameter Decorators_, followed by _Method_, _Accessor_, or _Property Decorators_ are applied for each instance member.\\n- _Parameter Decorators_, followed by _Method_, _Accessor_, or _Property Decorators_ are applied for each static member.\\n- _Parameter Decorators_ are applied for the constructor.\\n- _Class Decorators_ are applied for the class.\\n\\n### Class Decorators\\n\\nThe class decorator is applied to the constructor of the class and can be used to observe, modify, or replace a class definition.\\n\\nA class decorator _cannot_ be used in a declaration file, nor in any other ambient context (such as on a `declare` class).\\n\\nThe expression for the class decorator will be called as a function at runtime, with the constructor of the decorated class as its only argument.\\n\\n```typescript\\nfunction classDecorator<T extends { new (...args: any[]): {} }>(ctor: T) {\\n  return class extends ctor {\\n    newProperty = \'new property\';\\n    hello = \'override hello\';\\n  };\\n}\\n\\n@classDecorator\\nclass Greeter {\\n  property = \'property\';\\n  hello: string;\\n  constructor(m: string) {\\n    this.hello = m;\\n  }\\n}\\n```\\n\\n### Method Decorators\\n\\nThe decorator is applied to the Property Descriptor for the method, and can be used to observe, modify, or replace a method definition.\\n\\nA method decorator _cannot_ be used in a declaration file, on an overload, nor in any other ambient context (such as in a `declare` class).\\n\\nThe expression for the method decorator will be called as a function at runtime, with the following three arguments:\\n\\n1. Either the constructor function of the class for a static member, or the prototype of the class for an instance member.\\n1. The name of the member.\\n1. The Property Descriptor for the member.\\n\\n```typescript\\nfunction enumerable(value: boolean) {\\n  return function (\\n    target: any,\\n    propertyKey: string,\\n    descriptor: PropertyDescriptor\\n  ) {\\n    descriptor.enumerable = value;\\n  };\\n}\\n\\nclass Greeter {\\n  greeting: string;\\n  constructor(message: string) {\\n    this.greeting = message;\\n  }\\n\\n  @enumerable(false)\\n  greet() {\\n    return \'Hello, \' + this.greeting;\\n  }\\n}\\n```\\n\\n### Accessor Decorators\\n\\nThe accessor decorator is applied to the Property Descriptor for the accessor and can be used to observe, modify, or replace an accessor\u2019s definitions.\\n\\nAn accessor decorator _cannot_ be used in a declaration file, nor in any other ambient context (such as in a `declare` class).\\n\\nThe expression for the accessor decorator will be called as a function at runtime, with the following three arguments:\\n\\n1. Either the constructor function of the class for a static member, or the prototype of the class for an instance member.\\n1. The name of the member.\\n1. The Property Descriptor for the member.\\n\\n```typescript\\nfunction configurable(value: boolean) {\\n  return function (\\n    target: any,\\n    propertyKey: string,\\n    descriptor: PropertyDescriptor\\n  ) {\\n    descriptor.configurable = value;\\n  };\\n}\\n\\nclass Point {\\n  private _x: number;\\n  private _y: number;\\n  constructor(x: number, y: number) {\\n    this._x = x;\\n    this._y = y;\\n  }\\n\\n  @configurable(false)\\n  get x() {\\n    return this._x;\\n  }\\n\\n  @configurable(false)\\n  get y() {\\n    return this._y;\\n  }\\n}\\n```\\n\\n### Property Decorator\\n\\nA property decorator _cannot_ be used in a declaration file, nor in any other ambient context (such as in a `declare` class).\\n\\nThe expression for the property decorator will be called as a function at runtime, with the following two arguments:\\n\\n1. Either the constructor function of the class for a static member, or the prototype of the class for an instance member.\\n1. The name of the member.\\n\\n```typescript\\nimport \'reflect-metadata\';\\n\\nconst formatMetadataKey = Symbol(\'format\');\\n\\nfunction format(formatString: string) {\\n  return Reflect.metadata(formatMetadataKey, formatString);\\n}\\n\\nfunction getFormat(target: any, propertyKey: string) {\\n  return Reflect.getMetadata(formatMetadataKey, target, propertyKey);\\n}\\n\\nclass Greeter {\\n  @format(\'Hello, %s\')\\n  greeting: string;\\n\\n  constructor(message: string) {\\n    this.greeting = message;\\n  }\\n  greet() {\\n    let formatString = getFormat(this, \'greeting\');\\n    return formatString.replace(\'%s\', this.greeting);\\n  }\\n}\\n```\\n\\n### Parameter Decorators\\n\\nThe parameter decorator is applied to the function for a class constructor or method declaration.\\n\\nA parameter decorator _cannot_ be used in a declaration file, an overload, nor in any other ambient context (such as in a `declare` class).\\n\\n```typescript\\nimport \'reflect-metadata\';\\n\\nconst requiredMetadataKey = Symbol(\'required\');\\n\\nfunction required(\\n  target: Object,\\n  propertyKey: string | symbol,\\n  parameterIndex: number\\n) {\\n  let existingRequiredParameters: number[] =\\n    Reflect.getOwnMetadata(requiredMetadataKey, target, propertyKey) || [];\\n  existingRequiredParameters.push(parameterIndex);\\n  Reflect.defineMetadata(\\n    requiredMetadataKey,\\n    existingRequiredParameters,\\n    target,\\n    propertyKey\\n  );\\n}\\n\\nfunction validate(\\n  target: any,\\n  propertyName: string,\\n  descriptor: TypedPropertyDescriptor<Function>\\n) {\\n  let method = descriptor.value;\\n  descriptor.value = function () {\\n    let requiredParameters: number[] = Reflect.getOwnMetadata(\\n      requiredMetadataKey,\\n      target,\\n      propertyName\\n    );\\n    if (requiredParameters) {\\n      for (let parameterIndex of requiredParameters) {\\n        if (\\n          parameterIndex >= arguments.length ||\\n          arguments[parameterIndex] === undefined\\n        ) {\\n          throw new Error(\'Missing required argument.\');\\n        }\\n      }\\n    }\\n\\n    return method.apply(this, arguments);\\n  };\\n}\\n\\nclass Greeter {\\n  greeting: string;\\n\\n  constructor(message: string) {\\n    this.greeting = message;\\n  }\\n\\n  @validate\\n  greet(@required name: string) {\\n    return \'Hello \' + name + \', \' + this.greeting;\\n  }\\n}\\n```\\n\\n## Declaration\\n\\n### Declaration Merging\\n\\nThe **declaration merging** means that the compiler merges two separate declarations declared with the same name into a single definition. This merged definition has the features of both of the original declarations. Any number of declarations can be merged; it\u2019s not limited to just two declarations.\\n\\n```typescript\\ninterface Box {\\n  height: number;\\n  width: number;\\n}\\n\\ninterface Box {\\n  scale: number;\\n}\\n\\n// -> interface Box {\\n//      height: number;\\n//      width: number;\\n//      scale: number;\\n//    }\\n\\ninterface Cloner {\\n  clone(animal: Animal): Animal;\\n}\\n\\ninterface Cloner {\\n  clone(animal: Sheep): Sheep;\\n}\\n\\ninterface Cloner {\\n  clone(animal: Dog): Dog;\\n  clone(animal: Cat): Cat;\\n}\\n\\n// overload\\n// -> interface Cloner {\\n//      clone(animal: Dog): Dog;\\n//      clone(animal: Cat): Cat;\\n//      clone(animal: Sheep): Sheep;\\n//      clone(animal: Animal): Animal;\\n//    }\\n\\nnamespace Animals {\\n  export class Zebra {}\\n}\\n\\nnamespace Animals {\\n  export interface Legged {\\n    numberOfLegs: number;\\n  }\\n  export class Dog {}\\n}\\n\\n// merged namespace\\n//    namespace Animals {\\n//      export interface Legged {\\n//        numberOfLegs: number;\\n//      }\\n//\\n//      export class Zebra {}\\n//      export class Dog {}\\n//    }\\n```\\n\\n### Global Declaration Augmentation\\n\\n```typescript\\n// observable.ts\\nexport class Observable<T> {\\n  // ... still no implementation ...\\n}\\n\\ndeclare global {\\n  interface Array<T> {\\n    toObservable(): Observable<T>;\\n  }\\n}\\n\\nArray.prototype.toObservable = function () {\\n  // ...\\n};\\n```\\n\\n### Declaration Files and Reference\\n\\n**Objects with Properties**\\n\\n```typescript\\n// Declaration\\ndeclare namespace myLib {\\n  function makeGreeting(s: string): string;\\n  let numberOfGreetings: number;\\n}\\n\\n// Code\\nlet result = myLib.makeGreeting(\'Hello, world\');\\nconsole.log(\'The computed greeting is: \' + result);\\n\\nlet count = myLib.numberOfGreetings;\\n```\\n\\n**Overloaded Functions**\\n\\n```typescript\\n// Declaration\\ndeclare function getWidget(n: number): Widget;\\ndeclare function getWidget(s: string): Widget[];\\n\\n// Code\\nlet x: Widget = getWidget(42);\\nlet arr: Widget[] = getWidget(\'poper\');\\n```\\n\\n**Reusable Types**\\n\\n```typescript\\n// Declaration\\ninterface GreetingSettings {\\n  greeting: string;\\n  duration?: number;\\n  color?: string;\\n}\\n\\ndeclare function greet(setting: GreetingSettings): void;\\n\\n// Code\\ngreet({\\n  greeting: \'hello world\',\\n  duration: 4000,\\n});\\n```\\n\\n**Reusable Types (Type Aliases)**\\n\\n```typescript\\n// Declaration\\ntype GreetingLike = string | (() => string) | MyGreeter;\\n\\ndeclare function greet(g: GreetingLike): void;\\n\\n// Code\\nfunction getGreeting() {\\n  return \'howdy\';\\n}\\n\\nclass MyGreeter extends Greeter {}\\n\\ngreet(\'hello\');\\ngreet(getGreeting);\\ngreet(new MyGreeter());\\n```\\n\\n**Organizing Types**\\n\\n```typescript\\n// Declaration\\ndeclare namespace GreetingLib {\\n  interface LogOptions {\\n    verbose?: boolean;\\n  }\\n\\n  interface AlertOptions {\\n    modal: boolean;\\n    title?: string;\\n    color?: string;\\n  }\\n}\\n\\n// Code\\nconst g = new Greeter(\'Hello\');\\ng.log({ verbose: true });\\ng.alert({ modal: false, title: \'Current Greeting\' });\\n\\ndeclare namespace GreetingLib.Options {\\n  // Refer to via GreetingLib.Options.Log\\n  interface Log {\\n    verbose?: boolean;\\n  }\\n  // Refer to via GreetingLib.Options.Alert\\n  interface Alert {\\n    modal: boolean;\\n    title?: string;\\n    color?: string;\\n  }\\n}\\n```\\n\\n**Classes**\\n\\n```typescript\\n// Declaration\\ndeclare class Greeter {\\n  constructor(greeting: string);\\n\\n  greeting: string;\\n  showGreeting(): void;\\n}\\n\\n// Code\\nconst myGreeter = new Greeter(\'Hello, 42\');\\nmyGreeter.greeting = \'howdy\';\\nmyGreeter.showGreeting();\\n\\nclass SpecialGreeter extends Greeter {\\n  constructor() {\\n    super(\'Very special 42\');\\n  }\\n}\\n```\\n\\n**Global Variables and Functions**\\n\\n```typescript\\n// Declaration\\ndeclare var foo: number;\\ndeclare function greet(greeting: string): void;\\n\\n// Code\\nconsole.log(`Half the number of foo is ${foo / 2}`);\\ngreet(\'hello, 42\');\\n```\\n\\n## TSConfig\\n\\nThere are some [base `tsconfig.json`](https://github.com/tsconfig/bases/) files which the project could extend.\\n\\nSee the full list of supported [Compiler Options](https://www.typescriptlang.org/tsconfig).\\n\\n```json\\n{\\n  \\"extends\\": \\"@tsconfig/node12/tsconfig.json\\",\\n  \\"compilerOptions\\": {\\n    \\"preserveConstEnums\\": true\\n  },\\n  \\"include\\": [\\"src/**/*\\"],\\n  \\"exclude\\": [\\"node_modules\\", \\"**/*.spec.ts\\"]\\n}\\n```"},{"id":"/2021/03/21/distributed-tracing","metadata":{"permalink":"/blog/2021/03/21/distributed-tracing","source":"@site/blog/2021-03-21-distributed-tracing.md","title":"Distributed Tracing","description":"Microservice provides a powerful architecture, but not without its own challenges, especially with regard to debugging and observing distributed transactions across complex networks \u2014 simply because there are no in-memory calls or stack traces to do so.","date":"2021-03-21T00:00:00.000Z","formattedDate":"March 21, 2021","tags":[{"label":"opentracing","permalink":"/blog/tags/opentracing"},{"label":"microservice","permalink":"/blog/tags/microservice"}],"readingTime":24.59,"hasTruncateMarker":true,"authors":[],"frontMatter":{"title":"Distributed Tracing","categories":["infrastructure","opentracinng"],"tags":["opentracing","microservice"]},"prevItem":{"title":"TypeScript handbook","permalink":"/blog/2021/03/27/ts-handbook"},"nextItem":{"title":"\u6587\u4ef6\u7cfb\u7edf\u672d\u8bb0","permalink":"/blog/2021/02/03/file-system"}},"content":"Microservice provides a powerful architecture, but not without its own challenges, especially with regard to debugging and observing distributed transactions across complex networks \u2014 simply because there are no in-memory calls or stack traces to do so.\\n\\nThis is where distributed tracing comes into the picture. Distributed tracing provides a solution for describing and analyzing the cross-process transactions.\\n\\nDistributed tracing, also called distributed request tracing, is a method used to profile and monitor applications, especially those built using a microservice architecture. Distributed tracing helps pinpoint where failures occur and what causes poor performance.\\n\\n> Some content extracted from [Learning Distributed Tracing 101](https://tracing.cloudnative101.dev/docs/index.html), [Mastering Distributed Tracing](https://www.packtpub.com/product/mastering-distributed-tracing/9781788628464) and [Distributed Tracing in Practice](https://www.oreilly.com/library/view/distributed-tracing-in/9781492056621/).\\n\\n\x3c!--truncate--\x3e\\n\\n## Traditional monitoring tools\\n\\nTraditional monitoring tools are designed for monolith systems, observing the health and behavior of a single application instance.\\n\\nThey may be able to tell us a story about that single instance, but they know almost nothing about the distributed transaction that passed through it. These tools lack the context of the request.\\n\\n### Metrics\\n\\nMetrics, or stats, are numerical measures recorded by the application, such as counters, gauges, or timers.\\n\\n> Memory usage, CPU saturation, etc.\\n\\nMetrics are very cheap to collect, since numeric values can be easily aggregated to reduce the overhead of transmitting that data to the monitoring system.\\n\\nThey are also fairly accurate, which is why they are very useful for the actual monitoring (as the dictionary defines it) and alerting.\\n\\n> However, by aggregating data, we are throwing away all the context we had about the individual transactions.\\n\\n### Logs\\n\\nLogging is an even more basic observability tool than metrics.\\n\\nLogs struggle with microservices because each log stream only tells us about a single instance of a service.\\n\\nHowever, when it comes to the concurrency and asynchronous programming, logs become more complex.\\n\\n![Evolution of concurrency](/images/distributed-tracing/evolution-of-concurrency.png)\\n\\n[Image Original Address](https://static.packt-cdn.com/downloads/9781788628464_ColorImages.pdf) at page 4.\\n\\nObserving the behavior of such a system from the logs is very difficult, unless we annotate all logs with some kind of unique id representing the request rather than the thread, a technique (something like tracing logs across threads) that actually gets us close to how distributed tracing (tracing services across networks) works.\\n\\n## Distributed tracing\\n\\nDistributed tracing takes a request-centric view. It captures the detailed execution of causally-related activities performed by the components of a distributed system as it processes a given request.\\n\\nDistributed tracing works in a nutshell just like:\\n\\n- Tracing infrastructure attaches contextual metadata to each request and ensures that metadata is passed around during the request execution, even when one component communicates with another over a network.\\n\\n- At various trace points in the code, the instrumentation records events annotated with relevant information, such as the URL of an HTTP request or an SQL statement of a database query.\\n\\n- Recorded events are tagged with the contextual metadata and explicit causality references to prior events.\\n\\nThat deceptively simple technique allows the tracing infrastructure to **reconstruct the whole path of the request**, _through the components of a distributed system_, _as a graph of events and causal edges between them_, which we call a **trace**.\\n\\n> A trace allows us to reason about how the system was processing the request.\\n>\\n> By taking a request-centric view, tracing helps to illuminate different behaviors of the system.\\n\\n## Important Concepts\\n\\n**Opentrace Data model**\\n\\n[The OpenTracing Semantic Specification #data model](https://github.com/opentracing/specification/blob/master/specification.md#the-opentracing-data-model)\\n\\n```bash\\n# Causal relationships between Spans in a single Trace\\n[Span A]  \u2190\u2190\u2190(the root span)\\n            |\\n     +------+------+\\n     |             |\\n [Span B]      [Span C] \u2190\u2190\u2190(Span C is a `ChildOf` Span A)\\n     |             |\\n [Span D]      +---+-------+\\n               |           |\\n           [Span E]    [Span F] >>> [Span G] >>> [Span H]\\n                                       \u2191\\n                                       \u2191\\n                                       \u2191\\n                         (Span G `FollowsFrom` Span F)\\n\\n# Temporal relationships between Spans in a single Trace\\n\u2013\u2013|\u2013\u2013\u2013\u2013\u2013\u2013\u2013|\u2013\u2013\u2013\u2013\u2013\u2013\u2013|\u2013\u2013\u2013\u2013\u2013\u2013\u2013|\u2013\u2013\u2013\u2013\u2013\u2013\u2013|\u2013\u2013\u2013\u2013\u2013\u2013\u2013|\u2013\u2013\u2013\u2013\u2013\u2013\u2013|\u2013\u2013\u2013\u2013\u2013\u2013\u2013|\u2013> time\\n\\n [Span A\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7]\\n   [Span B\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7]\\n      [Span D\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7]\\n    [Span C\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7]\\n         [Span E\xb7\xb7\xb7\xb7\xb7\xb7\xb7]        [Span F\xb7\xb7] [Span G\xb7\xb7] [Span H\xb7\xb7]\\n\\n\\n```\\n\\n### Span\\n\\n[Specification on Span](https://github.com/opentracing/specification/blob/master/specification.md#span)\\n\\n- operation name\\n- start timestamp and end timestamp\\n- Tags\\n- Logs\\n- SpanContext\\n  - Span ID\\n  - Trace ID\\n  - BaggageItems(key-value pairs)\\n\\n**What is the difference between a span _tag_ and a span _log_?**\\n\\n- They are both annotating the span with some contextual information.\\n- Tags typically apply to the whole span, while logs represent some events that happened during the span execution.\\n- A log always has a timestamp that falls within the span\'s start-end time interval. (The tracing system does not explicitly track causality between logged events the way it keeps tracks of causality relationships between spans, because it can be inferred from the timestamps.)\\n\\nThe OpenTracing Specification defines semantic data conventions that prescribe certain well-known tag names and log fields for common scenarios. Instrumentation is encouraged to use those names to ensure that the data reported to the tracing system is well-defined and portable across different tracing backends.\\n\\n### Tracer\\n\\n[Specification on Tracer](https://github.com/opentracing/specification/blob/master/specification.md#tracer)\\n\\nA `Tracer` is the actual implementation that will record the `Spans` and publish them somewhere.\\n\\nOnce a `Tracer` instance is obtained, it can be used to manually create `Span`, or pass it to existing instrumentation for frameworks and libraries.\\n\\n## Fundamentals\\n\\n![](/images/distributed-tracing/trace-and-execution.png)\\n\\n[Image Original Address](https://static.packt-cdn.com/downloads/9781788628464_ColorImages.pdf) at page 16.\\n\\n### Request correlation\\n\\nThe basic concept of distributed tracing appears to be very straightforward:\\n\\n- Instrumentation is inserted into chosen points of the program\'s code (trace points) and produces profiling data when executed\\n- The profiling data is collected in a central location, correlated to the specific execution (request), arranged in the causality order, and combined into a trace that can be visualized or further analyzed\\n\\nThere are three most common approaches: black-box inference, domain-specific schemas, and metadata propagation.\\n\\nThe instrumentation trace points could annotate the data they produce with a global identifier _execution identifier_ that is unique for each traced request.\\n\\nThen the tracing infrastructure receiving the annotated profiling data could easily reconstruct the full execution of the request, by grouping the records by the execution identifier.\\n\\nThe global execution identifier needs to be passed along the execution flow. This is achieved via a process known as _metadata propagation_ or _distributed context propagation_.\\n\\nMetadata propagation in a distributed system consists of two parts: _in-process propagation_ and _inter-process propagation_.\\n\\nIn-process propagation is responsible for making the metadata available to trace points inside a given program. It needs to be able to carry the context between the inbound and outbound network calls, dealing with possible thread switches or asynchronous behavior, which are common in modern applications.\\n\\nInter-process propagation is responsible for transferring metadata over network calls when components of a distributed system communicate to each other during the execution of a given request.Inter-process propagation is typically done by decorating communication frameworks with special tracing middleware that encodes metadata in the network messages, for example, in HTTP headers, Kafka records headers, and so on.\\n\\nThe key disadvantage of metadata propagation-based tracing is the expectation of a white-box system whose components can be modified accordingly. And, it is more scalable and provides much higher accuracy of the data compared to black-box techniques.\\n\\n### Anatomy of distributed tracing\\n\\nThe following diagram shows a typical organization of distributed tracing systems, built around metadata propagation.\\n\\n![Anatomy of distributed tracing](/images/distributed-tracing/anatomy-of-distributed-tracing.png)\\n\\n[Image Original Address](https://static.packt-cdn.com/downloads/9781788628464_ColorImages.pdf) at page 17.\\n\\nSpecial trace points at the edges of the microservice, which we can call _inject trace points_ and _extract trace points_, are also responsible for encoding and decoding metadata for passing it across process boundaries.\\n\\nThe Tracing API is implemented by a concrete tracing library that reports the collected data to the tracing backend, usually with some in-memory batching to reduce the communications overhead.\\n\\nReporting is always done asynchronously in the background, off the critical path of the business requests. The tracing backend receives the tracing data, normalizes it to a common trace model representation, and puts it in a persistent trace storage.\\n\\nBecause tracing data for a single request usually arrives from many hosts, the trace storage is often organized to store individual pieces incrementally, indexed by the execution identifier. This allows for later reconstruction of the whole trace for the purpose of visualization, or additional processing through aggregations and data mining.\\n\\n**Preserving causality**\\n\\nTracing systems need to capture causality that allows assembling the data captured by the trace points in the correct sequence.\\n\\nMost tracing systems elect to preserve Lamport\'s happens-before relation, denoted as `\u2192` and formally defined as the least strict partial order on events, such that:\\n\\n- If events `a` and `b` occur in the same process, then `a \u2192 b` if the occurrence of event `a` preceded the occurrence of event `b`\\n- If event `a` is the sending of a message and event `b` is the reception of the message sent in event `a`, then `a \u2192 b`\\n\\nMost of today\'s industrial-grade tracing infrastructures use **dynamic metadata**, which can be fixed-width or variable-width.\\n\\nMost tracing systems use **fixed-width dynamic metadata**, where, in addition to the execution identifier, they record a unique ID (for example, a random 64-bit value) of the event captured by the trace point. When the next trace point is executed, it stores the inbound event ID as part of its tracing data, and replaces it with its own ID.\\n\\n![Causality using id or trace segment](/images/distributed-tracing/causality-with-dynamic-fixed-width-metadata.png)\\n\\n[Image Original Address](https://static.packt-cdn.com/downloads/9781788628464_ColorImages.pdf) at page 18.\\n\\n**Propagating Context**\\n\\nIn order to create traces, we will need some way to communicate certain details about our spans to other services or other parts of our process. The mechanism by which we communicate these details to other services is generally known as _context propagation_.\\n\\n- Interprocess propagation\\n\\nIn distributed RPCs, it\u2019s popular to send the trace context between services in an HTTP header, and have the child service create a span with a defined parent-child relationship.\\n\\nWe\u2019re _injecting_ the span context into the transport, and _extracting_ it back out.\\n\\n> These inject and extract operations happen at the edge of the service in code\u2014you\u2019d generally want to use some sort of middleware in the HTTP service that would automatically perform these operations when a new request is created or received.\\n\\n- Intraprocess propagation\\n\\nWe can create parent-child relations between spans using a span context. An easy way to do it through a mechanism known as a _scope manager_.\\n\\n### Trace models\\n\\nThe purpose of the _Collection/Normalization_ component is to receive tracing data from the trace points in the applications and convert it to some normalized _trace model_, before saving it in the trace storage.\\n\\n**Event model**\\n\\nThe following diagram illustrates an event graph observed from the execution of an RPC request/response by a client-server application. It includes events collected at different layers of the stack, from application-level events (for example, \\"client send\\" and \\"server receive\\") to events in the TCP/IP stack.\\n\\n![Trace representation of an RPC request in the event model](/images/distributed-tracing/event-model-of-an-rpc-request.png)\\n\\n[Image Original Address](https://static.packt-cdn.com/downloads/9781788628464_ColorImages.pdf) at page 19.\\n\\nEvent model is useful for describing what happened, but they don\'t directly lead to actionable data.\\n\\n**Span model**\\n\\nSpan model is a simplified trace model.\\n\\nThe traces are represented as trees, where tree nodes are basic units of work referred to as spans. The edges in the tree indicate causal relationships between a span and its parent span.\\n\\nEach span is a simple log of timestamped records, including its start and end time, a human-readable operation name, and zero or more intermediary application-specific annotations in the form of (timestamp, description) pairs, which are equivalent to the info events in the previous example.\\n\\n![Trace representation of an RPC request in the event model](/images/distributed-tracing/span-model-examples.png)\\n\\n[Image Original Address](https://static.packt-cdn.com/downloads/9781788628464_ColorImages.pdf) at page 21.\\n\\nEach span is assigned a unique ID (for example, a random 64-bit value), which is propagated via metadata along with the execution ID. When a new span is started, it records the ID of the previous span as its _parent ID_, thus capturing the causality.\\n\\nEffectively, traces in this model look like distributed stack traces, a concept very intuitive to all developers.\\n\\n### Clock skew adjustment\\n\\nClearly, we cannot trust the timestamps to be actually correct, but this is not what we often look for when we analyze distributed traces.\\n\\nIt is more important that timestamps in the trace are correctly aligned relative to each other.\\n\\n- When the timestamps are from the same process, such as the start of the `server` span and the extra info annotations in the following diagram, we can assume that their relative positions are correct.\\n\\n- The timestamps from different processes on the same host are generally incomparable because even though they are not subject to the hardware clock skew, the accuracy of the timestamps depends on many other factors, such as what programming language is used for a given process and what time libraries it is using and how.\\n\\n- In the end, the clock skew adjustment process is always heuristic, since we typically don\'t have other reliable signals to calculate it precisely.\\n\\n![Clock skew adjustment](/images/distributed-tracing/clock-skew-adjustment.png)\\n\\n> \u03b4<sub>1</sub> or \u03b4<sub>2</sub> are just estimated;\\n\\n[Image Original Address](https://static.packt-cdn.com/downloads/9781788628464_ColorImages.pdf) at page 21.\\n\\n### Styles of instrumentation\\n\\nIn a microservices-based application, most instrumentation trace points occur next to process boundaries, where the communications are performed by the means of some frameworks, such as RPC libraries.\\n\\nIf we instrument the frameworks, we need to do it only once and then reuse that instrumentation across the application. This means is usually reserved for special cases where some unique application logic warrants it to monitor access to some custom shared resource.\\n\\nAnother style of instrumentation commonly referred to as _agent-based_, which promises automatic, zero-touch instrumentation of the applications.\\n\\nIn dynamic languages, like Python and JavaScript, it is often done through a technique known as _monkey-patching_, which involves dynamic modification of classes or modules at runtime, transparently to the application. The tracing instrumentation agent might replace that function with a wrapper that would create a client-side tracing span, invoke the original function, and then finish the span, annotated with the results of the request, such as the HTTP status code.\\n\\nIn Java applications, where dynamic code modifications like that are not allowed, a similar effect is achieved though byte code manipulation.\\n\\n> When frameworks are designed with extensibility in mind, adding the tracing code in the form of middleware, interceptors, filters, and so on is generally very straightforward.\\n\\n## Instrumentation Quality Checklist\\n\\nWhen instrumenting an existing service or creating guidelines on how to instrument new services, it can be useful to have a checklist of items that are important to ensuring quality instrumentation throughout the entire application.\\n\\n### Span Status and Creation\\n\\n- All error conditions under a given span appropriately set the span status to an error state.\\n- RPC framework result codes are mapped to span status (i.e., Internal Error, Not Found, etc.).\\n- All spans that are started are also finished, even in the case of unrecoverable errors if possible.\\n- Spans should only represent work that is semantically important to the request life cycle of a service; try not to create spans around endpoints only receiving synthetic traffic, like a /status or /health endpoint.\\n\\n### Span Boundaries\\n\\n- Egress and ingress spans have appropriate labels (SpanKind is set).\\n- Egress and ingress spans have appropriate relationships (client/server, consumer/producer).\\n- Internal spans are appropriately labeled and do not imply a remote call.\\n\\n### Attributes\\n\\n- Spans include a version attribute for the service they represent.\\n- Spans that represent work by a dependency have an attribute for that dependency\'s version.\\n- Spans should include attributes identifying underlying infrastructure:\\n  - Hostname / FQDN\\n  - Container name, if appropriate\\n  - Runtime version\\n  - Application server version, if applicable\\n  - Region or availability zone\\n- Attributes are namespaced where appropriate (i.e., to prevent collisions between key names where the semantic meaning of the key differs between services in a request).\\n- Attributes with numerical values should include the unit of measurement in the key name (i.e, payload_size_kb versus payload_size).\\n- Attributes should not contain any PII.\\n\\n### Events\\n\\n- Useful and descriptive event messages that would be useful for upstream or downstream service users should be added:\\n  - Request-response payloads (sanitized)\\n  - Stack traces, exceptions, and error messages\\n- Long-running operations (such as waiting for a mutex) should be wrapped in events; one when the operation begins, and one when it ends.\\n\\n## Tracing in Service meshes\\n\\nThe pattern of consolidating inter-service communication functionality into a reusable component is not new.\\n\\nThere was a fairly popular style, called Enterprise Service Bus, dating back to early 2000s:\\n\\n- Route messages between services\\n- Monitor and control routing of message exchange between services\\n- Resolve contention between communicating service components\\n- Control deployment and versioning of services\\n- Marshal use of redundant services\\n- Provide commodity services like event handling, data transformation and mapping, message and event queuing and sequencing, security or exception handling, protocol conversion, and enforcing proper quality of communication services\\n\\nOften, the real implementation is something like central layer or hub through which all the inter-service communications were proxyed.\\n\\nRecently, a new architectural pattern known as a **sidecar** hash merged:\\n\\n- A sidecar can be implemented in its own language, independent of the main application.\\n- A sidecar is collocated with the main application, so there is no significant latency between them (but a small latency does exist).\\n- Each sidecar handles just a single instance of a single service, so a misbehaving sidecar process may affect the health of that instance but will not affect the rest of the application (although a bad global configuration change may theoretically affect all sidecars at once).\\n- A sidecar acts as an extension mechanism for the main application, even if the application itself provides no extension capabilities. For example, a third-party application may not expose any monitoring signals, but a sidecar can compensate for that.\\n- A sidecar\'s life cycle and identity are tied to the main application\'s life cycle and identity, which allows the sidecar to take on such duties as authentication and transport-level security.\\n\\nThe term _service mesh_ often refers to the use of the sidecar pattern to provide the infrastructure for microservices communications.\\n\\n> A _service mesh_ is a configurable infrastructure layer designed to support interprocess communication among services. It performs this through _sidercar proxies_, processes that live along-side each service instance and handle all interprocess communication for their associated service.\\n>\\n> In addition to service communications, the service mesh and its sidecars can handle monitoring, security, service discovery, load balancing, encryption, and more.\\n>\\n> In essence, service mesh instrumentation is agnostic to the transport layer of each service. As long as the traffic is being passed through the sidecar, it will be traced.\\n\\nService mesh platforms typically provide two separate components, the _data plane_ and the _control plane_.\\n\\nThe job of data plane is to translate, forward, and observe every network packet that goes in and out of the service instance. Examples of network proxies that can be used as a service mesh data plane include Envoy, Linkerd, NGINX, HAProxy, and Traefik.\\n\\nThe control plane decides how the data plane should perform its tasks. It provides policy and configuration for all the network proxies (data plane) that run in a service mesh.\\n\\n> The control plane in charge of these decisions, such as:\\n>\\n> - how does the proxy know where to find service X on the network?\\n> - Where does it get the configuration parameters for load balancing, timeouts, and circuit breaking?\\n> - Who configures the authentication and authorization settings?\\n\\n### Observability via a service mesh\\n\\nIf we place a service mesh in the path of every network request between the services in an application, it makes it an ideal place to collect consistent, standardized telemetry about the application.\\n\\nThis standardized observability alone may be enough to compensate for a small performance loss introduced by going through a proxy for every request because it dramatically enhances the operational properties of the system, making it easier to monitor and troubleshoot.\\n\\n### Front service telemetry\\n\\n```\\n                  |              |\\n                  |     WAN      |\\n                  |              |\\n                  |              |\\n+----------+      |  trace data  |      +---------------------+\\n|          +--------------------------\x3e |   Tracing backend   |\\n|  Client  |      |              |      +---------------------+\\n|          +-------------+       |\\n+----------+      |      |       |\\n                  |   app data   |      +---------------------+\\n                  |      +------------\x3e |   Service backend   |\\n                  |              |      +---------------------+\\n                  |              |\\n                  |              |\\n                  |              |\\n                  |              |      +---------------------+\\n                  |              |      |   Tracing backend   |\\n                  |              |      +---+-----------------+\\n                  |              |          ^\\n                  |              |          |  synthesized span\\n+----------+      |              |          |\\n|          |      |  App data    |      +---+-----------------+\\n|  Client  +--------------------------\x3e |   Service backend   |\\n|          |      |  Timing info |      +---------------------+\\n+----------+      |              |\\n                  |              |\\n                  |              |\\n                  |              |\\n                  |              |\\n                  |              |  +---+\\n                  |              |  |   |\\n+----------+      |  trace data  |  |   |      +---------------------+\\n|          +------------------------+ P +----\x3e |   Tracing backend   |\\n|  Client  |      |              |  | r |      +---------------------+\\n|          +-------------+       |  | o |\\n+----------+      |      |       |  | x |\\n                  |   app data   |  | y |      +---------------------+\\n                  |      +----------+   +----\x3e |   Service backend   |\\n                  |              |  |   |      +---------------------+\\n                  |              |  |   |\\n                  |              |  +---+\\n                  |              |\\n```\\n\\n## Sampling trace\\n\\nWhile the impact on the application is small, the cost of processing and storing trace data can be large.\\n\\nThe value of traces is often in the details they provide, whether following requests across services or in the tags and events associated with spans.\\n\\nA trace can become much larger than the request and response that it describes, so storing every trace would be expensive from an infrastructure point of view.\\n\\nHowever, not all trace data offers the same value. Traces representing slow or failed requests may offer a lot more value.\\n\\nMost tracing systems employ various forms of sampling to capture only a certain portion of the observed traces to reduce impact caused by tracing on the application\'s latency and throughput.\\n\\nMost of the sampling methods share a common characteristic of trying to make a sampling decision at the level of the whole trace, not its individual spans. This is often referred to as _consistent_ or _coherent_ sampling.\\n\\n### Head-based consistent sampling\\n\\nHead-based consistent sampling, also known as upfront sampling, makes the sampling decision once per trace at the beginning of the trace. This sampling scheme is consistent because it ensures that either all spans of a given trace are captured by the tracing system or none of them are.\\n\\n> The decision is usually made by the tracing libraries running inside the application, because consulting the tracing backend at the point of creating the first span would put the tracing infrastructure onto the critical path of the business requests, which is highly undesirable for performance and reliability reasons.\\n\\n**Probabilistic sampling**\\n\\nIn probabilistic sampling, the sampling decision is made based on a coin toss with a certain probability.\\n\\nProbabilistic samplers are by far the most popular in the tracing systems using head-based sampling.\\n\\n<details>\\n<summary> pseudo code </summary>\\n\\n```scala\\nclass ProbabilisticSampler(probability: Double) {\\n  def isSampled: Boolean = {\\n    if (Math.random() < probability) {\\n      return true\\n    } else {\\n      return false\\n    }\\n  }\\n\\n  val boundary: Double = Long.MaxValue * probability\\n  def isSampled(traceId: Long): Boolean = {\\n    if (traceId < boundary) {\\n      return true\\n    } else {\\n      return false\\n    }\\n  }\\n}\\n```\\n\\n</details>\\n\\n**Rate limiting sampling**\\n\\nThe rate limiter ensures that only a fixed number of traces are sampled per given time interval, for example, 10 traces per second or one trace per minute.\\n\\n> Rate limiting sampling can be useful in microservices that have very uneven traffic patterns, because probabilistic sampling can only be configured with a single probability value, which could be too small during low-traffic periods and too large during high-traffic periods.\\n\\n<details>\\n<summary> pseudo code </summary>\\n\\n```scala\\nclass RateLimiter(creditsPerSecond: Double, maxBalance: Double) {\\n  val creditsPerNanosecond = creditsPerSecond / 1e9\\n  val balance: Double = 0\\n  var lastTick = System.nanoTime()\\n\\n  def withdraw(amount: Double): Boolean = {\\n    val currentTime = System.nanoTime()\\n    val elapsedTime = currentTime - lastTick\\n    lastTick = currentTime\\n    balance += elapsedTime * creditsPerNanosecond\\n    if (balance > maxBalance) {\\n      balance = maxBalance\\n    }\\n    if (balance >= amount) {\\n      balance -= amount\\n      return true\\n    }\\n\\n    return false\\n  }\\n}\\n\\nclass RateLimitSampler(tracesPerSecond: Double) {\\n  val limiter = new RateLimiter(\\n    creditsPerSecond=tracesPerSecond,\\n    maxBalance=Math.max(tracesPerSecond, 1.0)\\n  )\\n\\n  def isSampled: Boolean = {\\n    return limiter.withdraw(1.0)\\n  }\\n}\\n```\\n\\n</details>\\n\\n**Guaranteed-throughput probabilistic sampling**\\n\\nThis is a combination of a probabilistic sampler for normal operations and an additional rate limiter for low-traffic periods.\\n\\nThe rate limiter is only consulted when the probabilistic sampler decides not to sample. This ensures that a given trace point is sampled with at least a certain minimal rate, hence the name \\"guaranteed throughput.\\"\\n\\n<details>\\n<summary> pseudo code </summary>\\n\\n```scala\\nclass GuaranteedThroughputSampler(\\n  probability: Double,\\n  minTracesPerSecond: Double\\n) {\\n  val probabilistic = new ProbabilisticSampler(probability)\\n  val lowerBound = new RateLimitingSampler(minTracesPerSecond)\\n\\n  def isSampled: Boolean = {\\n    val prob: Boolean = probabilistic.isSampled()\\n    if (prob) {\\n      return prob\\n    }\\n    val rate: Boolean = lowerBound.isSampled()\\n    return rate\\n  }\\n}\\n```\\n\\n</details>\\n\\n**Adaptive sampling**\\n\\nAdaptive sampling techniques try to dynamically adjust sampling parameters throughout the architecture, based on the difference between the actual and the desired rate of trace data generation.\\n\\nThey can be implemented in two flavors, depending on whether the observations and adjustments are done locally in the tracers or globally in the tracing backend.\\n\\nThe local adaptive sampling is a way to automatically customize sampling probabilities across workloads with different traffic. The tracers are parameterized not by a fixed probability of sampling, but by a desired rate of sampled traces. Then it will automatically adjust their own sampling probability based on the number of traces they end up sampling with the current probability, trying to bring that number close to the target rate.\\n\\nThe global adaptive sampling is a way to replace a uniform sampling probability across all services with another uniform parameter for an effective sampling rate, while the actual probability is dynamically adjusted. The target effective rate is still a configuration parameter that needs to be provided to each tracer in each microservice.\\n\\n**Adaptive sampling in Jaeger**\\n\\nThe adaptive sampling infrastructure in the collectors calculates the desired sampling probabilities for all services and provides them back to the tracing libraries that periodically poll for that information (dashed lines).\\n\\n![Adaptive sampling in Jaeger](/images/distributed-tracing/adaptive-sampling-in-jaeger.png)\\n\\n[Image Original Address](https://static.packt-cdn.com/downloads/9781788628464_ColorImages.pdf) at page 36.\\n\\n### Tail-based consistent sampling\\n\\nIt would be nice if we could delay the sampling decision until we see something unusual recorded in the trace, such as an abnormal request latency, or an error, or a call graph branch we have not seen before.\\n\\n**Tail-based sampling** addresses this problem by making the sampling call at the end of the request execution, when we have the complete trace and can make a more intelligent decision about whether it should be captured for storage or not.\\n\\nAnother interesting feature of tail-based sampling is that it almost entirely eliminates the problem of _oversampling_ and _overload of the tracing backend_. Making the sampling decision after collecting the whole trace is equivalent to a pull model, where the tracing backend knows exactly how much data it is requesting and can easily tune it up and down.\\n\\nIn the following diagram, all spans for traces T1 and T2 are collected in the first and the second collectors respectively. In this hypothetical example, only the second trace, T2, is considered interesting and sent to the storage, while trace T1 is simply discarded to free up space for newer traces.\\n\\n![hypothetical architecture for tail-based sampling](/images/distributed-tracing/hypothetical-architecture-for-tail-based-sampling.png)\\n\\n[Image Original Address](https://static.packt-cdn.com/downloads/9781788628464_ColorImages.pdf) at page 38.\\n\\n## Architecture and deployment modes\\n\\nMany tracing backends are themselves implemented as microservices-based distributed systems that consist of multiple horizontally-scalable components. Some of those components are optional, which allows different deployment configurations depending on the needs of your architecture.\\n\\n### Basic architecture: agent + collector + query service\\n\\n![Basic architecture of Jaeger backend deployment](/images/distributed-tracing/basic-architecture-of-jaeger-backend-deployment.png)\\n\\n[Image Original Address](https://static.packt-cdn.com/downloads/9781788628464_ColorImages.pdf) at page 60.\\n\\n**Client**: is the code that runs inside the business application, and is responsible for exporting the data to the tracing backend. The most common implementation is to stash the tracing data into an internal memory buffer, to move it off the critical path of the request, and then send it in batches to the tracing backend asynchronously, for example, from a separate background thread.\\n\\n**Agent**: implements the sidercar design pattern by encapsulating the logic of submitting data to the collectors, including service discovery and load balancing.\\n\\n**Collector**: are stateless, horizontally scalable services that perform a number of actions: receiving span data regarding its encoding and protocols, convert and normalize span data to a single internal data model, send the normalized span data to a pluggable persistent storage, and contain the adaptive sampling logic that observes all inbound span traffic and generates sampling strategies.\\n\\n**Query service and UI**: a stateless component that implements a query API for searching and retrieving traces from storage.\\n\\n**Data mining jobs**: perform post-processing and aggregation of the trace data, such as building the service dependency graphs or computing tracing quality scores.\\n\\n### Streaming architecture\\n\\n![Streaming architecture of the Jaeger backend deployment](/images/distributed-tracing/streaming-architecture-of-the-jaeger-backend-deployment.png)\\n\\n[Image Original Address](https://static.packt-cdn.com/downloads/9781788628464_ColorImages.pdf) at page 60.\\n\\n## References\\n\\n- [Learning Distributed Tracing 101](https://tracing.cloudnative101.dev/docs/index.html): A quick guide to distributed tracing.\\n\\n- [Opentracing Tutorial By Yuri Shkuro](https://github.com/yurishkuro/opentracing-tutorial): A collection of tutorials for the [OpenTracing API](https://opentracing.io).\\n\\n- [Mastering Distributed Tracing By Yuri Shkuro](https://www.packtpub.com/product/mastering-distributed-tracing/9781788628464) provides comprehensive coverage of the tracing field. Solve problems through code instrumentation with open standards, and learn how to profile complex systems.\\n\\n- [Distributed Tracing in Practice](https://www.oreilly.com/library/view/distributed-tracing-in/9781492056621/): With this guide, you\u2019ll learn what distributed tracing is and how to use it to understand the performance and operation of your software.\\n\\n- [OpenTracing \u8be6\u89e3](https://pjw.io/articles/2018/05/08/opentracing-explanations/)\\n\\nMany thanks to:\\n\\n- Yuri Shkuro ([@YuriShkuro](https://twitter.com/yurishkuro)): Jaeger\\n\\n- Ben Sigelman ([@bhs](https://github.com/bensigelman)): LightStep."},{"id":"/2021/02/03/file-system","metadata":{"permalink":"/blog/2021/02/03/file-system","source":"@site/blog/2021-02-03-file-system.md","title":"\u6587\u4ef6\u7cfb\u7edf\u672d\u8bb0","description":"\u968f\u4fbf\u8bb0\u4e00\u4e9b\u6709\u5173\u4e8e\u6587\u4ef6\u7cfb\u7edf\u7684\u77e5\u8bc6\u70b9\u3002","date":"2021-02-03T00:00:00.000Z","formattedDate":"February 3, 2021","tags":[{"label":"file-system","permalink":"/blog/tags/file-system"},{"label":"unix","permalink":"/blog/tags/unix"}],"readingTime":10.53,"hasTruncateMarker":true,"authors":[],"frontMatter":{"title":"\u6587\u4ef6\u7cfb\u7edf\u672d\u8bb0","categories":["file-system"],"tags":["file-system","unix"]},"prevItem":{"title":"Distributed Tracing","permalink":"/blog/2021/03/21/distributed-tracing"},"nextItem":{"title":"Runtime Performance","permalink":"/blog/2021/01/22/runtime-performance"}},"content":"> \u968f\u4fbf\u8bb0\u4e00\u4e9b\u6709\u5173\u4e8e\u6587\u4ef6\u7cfb\u7edf\u7684\u77e5\u8bc6\u70b9\u3002\\n\\n## \u4ec0\u4e48\u662f\u6587\u4ef6\\n\\n\u4e00\u4e2a\u6587\u4ef6\u5c31\u662f\u5b58\u5728\u4e8e\u8ba1\u7b97\u673a\u7cfb\u7edf\u91cc\u7684\u4e00\u5806\u6570\u636e\uff0c\u800c\u4e14\u53ef\u4ee5\u7528\u5355\u4e00\u5b9e\u4f53\u7684\u65b9\u5f0f\u4ece\u8ba1\u7b97\u673a\u7a0b\u5e8f\u4e2d\u5f15\u7528\u3002\\n\\n\u6587\u4ef6\u8fd8\u63d0\u4f9b\u8ba9\u8fdb\u7a0b\u53ef\u4ee5\u7ee7\u7eed\u6267\u884c\u7684\u6570\u636e\u5b58\u50a8\u673a\u5236\uff0c\u4e00\u822c\u7528\u4e8e\u91cd\u65b0\u542f\u52a8\u8ba1\u7b97\u673a\u3002\\n\\n\x3c!--truncate--\x3e\\n\\n## \u6587\u4ef6\u547d\u540d\\n\\n\u6587\u4ef6\u540d\u53ef\u4ee5\u4f7f\u7528\u7684\u662f\u9664\u4e86 _\u63a7\u5236\u5b57\u7b26 NUL \uff08\u8868\u793a\u5b57\u7b26\u4e32\u7ed3\u5c3e\u7684\u5b57\u7b26\uff09_ \u548c _\u659c\u6760 / \u5b57\u7b26_ \u4ee5\u5916\u7684\u5408\u6cd5\u7684\u5b57\u7b26\u3002\\n\\n\u5efa\u8bae\uff1a\\n\\n- \u540d\u79f0\u4f7f\u7528\u53ef\u89c6\u5b57\u7b26\uff0c\u770b\u4e0d\u5230\u7684\u63a7\u5236\u5b57\u7b26\u4e0d\u592a\u9002\u5408\\n- \u540d\u79f0\u7b26\u5408\u8ba1\u7b97\u673a\u7a0b\u5e8f\u8bfb\u53d6\u7684\u89c4\u5219\\n- Shell \u7684 meta \u5b57\u7b26\uff0c\u5982 `! @ # $` \u7b49\uff0c\u5c3d\u91cf\u907f\u514d\\n- \u521d\u59cb\u7684\u8fde\u5b57\u53f7\u4f1a\u8ba9\u6587\u4ef6\u540d\u770b\u8d77\u6765\u50cf UNIX \u547d\u4ee4\u9009\u9879\uff0c\u6700\u597d\u907f\u514d\\n- \u4e60\u60ef\u4f7f\u7528\u5168\u5c0f\u5199\u7684\u6587\u4ef6\u540d\uff0c\u9664\u4e86\u5e38\u89c1\u7684\u91cd\u8981\u6587\u4ef6\u540d\u4f7f\u7528\u7ea6\u5b9a\uff0c\u5982 `README`, `COPYRIGHT`, `Makefile`\\n\\n## UNIX \u4e2d\u7684\u6587\u4ef6\\n\\nUNIX \u7684\u89c6\u89d2\u4e0b\uff0c\u6587\u4ef6\u4e0d\u8fc7\u662f\u96f6\u4e2a\u6216\u591a\u4e2a\u4e0d\u77e5\u540d\u7684\u6570\u636e\u5b57\u8282\u96c6\u7ed3\u800c\u6210\u7684\u6d41 (a stream consists of zero byte or more)\u3002\\n\\nUNIX \u7684\u6587\u4ef6\u590d\u5236\u903b\u8f91\u5c31\u53d8\u5f97\u5f88\u7b80\u5355\uff1a\\n\\n```\\ntry-to-get-a-byte\\nwhile (have-a-byte)\\n{\\n     put-a-byte\\n     try-to-get-a-byte\\n}\\n```\\n\\n> **\u6587\u4ef6\u6362\u884c\u7b26**\u3002 UNIX \u4e0b\u7684\u6587\u672c\u6587\u4ef6\u4ee5 ASCII linefeed (LF) \u5b57\u7b26\uff0c\u6765\u8868\u793a\u884c\u7684\u754c\u9650\uff0c\uff08 ASCII \u8868\u91cc\u4e3a\u5341\u8fdb\u5236 10 \uff09\u3002\u901a\u5e38\u79f0\u4e3a\u6362\u884c\u5b57\u7b26\uff0c\u4ee5 `\\\\n` \u6765\u8868\u793a\u3002\u8fd9\u79cd\u65b9\u5f0f\u6bd4\u5176\u4ed6\u7cfb\u7edf\u7684\u4e00\u7ec4 _carriage-return/linefeed_ \u5b57\u7b26\u7684\u8868\u793a\u8981\u7b80\u5355\u3002\\n\\nUNIX \u91cc\u6240\u6709\u7684\u5176\u4ed6\u6587\u4ef6\u53ef\u88ab\u8ba4\u4e3a\u662f\u4e8c\u8fdb\u5236\u6587\u4ef6\uff1a\u6bcf\u4e00\u4e2a\u5305\u542b\u5728\u5176\u4e2d\u7684\u5b57\u8282\uff0c\u90fd\u6709 256 \u79cd\u53ef\u80fd\u7684\u503c\u3002\u56e0\u6b64\uff0c\u6587\u672c\u6587\u4ef6\u53ef\u4ee5\u7b97\u662f\u4e8c\u8fdb\u5236\u6587\u4ef6\u7684\u5b50\u96c6\u3002\\n\\n\u4e0d\u540c\u4e8e\u67d0\u4e9b\u64cd\u4f5c\u7cfb\u7edf\u7684\u662f\uff0c\u6ca1\u6709\u5b57\u7b26\u4f1a\u88ab\u5f3a\u5236\u6765\u8868\u793a _end-of-file_\uff0cUNIX \u6587\u4ef6\u7cfb\u7edf\u5355\u7eaf\u5730\u5728\u6587\u4ef6\u4e2d\u4fdd\u7559\u5b57\u8282\u6570\u7684\u8ba1\u6570\u3002\u5c1d\u8bd5\u8bfb\u53d6\u8d85\u8d8a\u6587\u4ef6\u5b57\u8282\u8ba1\u6570\u65f6\uff0c\u4f1a\u8fd4\u56de\u4e00\u4e2a _end-of-file_ \u7684\u6697\u793a\u3002\\n\\n## UNIX \u5c42\u7ea7\u5f0f\u6587\u4ef6\u7cfb\u7edf\\n\\n\u5927\u91cf\u7684\u6587\u4ef6\u5c31\u53ef\u80fd\u5b58\u5728\u540d\u5b57\u51b2\u7a81\u7684\u98ce\u9669\u3002UNIX \u6587\u4ef6\u7cfb\u7edf\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u7684\u65b9\u6cd5\u662f\u5c06\u72ec\u4e00\u65e0\u4e8c\u7684\u6587\u4ef6\u540d\u903b\u8f91\u5f0f\u5730\u7ec4\u5408\u5728\u4e00\u8d77\uff0c\u6210\u4e3a\u76ee\u5f55 directory \u6216\u8005\u6587\u4ef6\u5939 folder\u3002\u6bcf\u4e2a\u76ee\u5f55\u5f62\u6210\u5b83\u81ea\u5df1\u7684\u540d\u79f0\u7a7a\u95f4\uff0c\u72ec\u7acb\u4e8e\u5176\u4ed6\u7684\u76ee\u5f55\u3002\\n\\n\u76ee\u5f55\u53ef\u4ee5\u5d4c\u5957\u914d\u7f6e\u4e3a\u4efb\u610f\u6df1\u5ea6\uff0c\u4efb\u610f\u5bbd\u5ea6\uff0c\u4f7f\u5f97 UNIX \u6587\u4ef6\u7cfb\u7edf\u5f62\u6210\u6811\u72b6\u7ed3\u6784\u3002\\n\\n> \u5927\u90e8\u5206\u73b0\u884c UNIX \u6587\u4ef6\u7cfb\u7edf\u7684\u8bbe\u8ba1\u4e0e\u6587\u4ef6\u7cfb\u7edf\u7a0b\u5e8f\u754c\u9762\uff0c\u90fd\u5047\u5b9a\u76ee\u5f55\u662f\u88ab\u8fde\u7eed\u5730\u67e5\u627e\u3002\u56e0\u6b64\u5728\u5927\u578b\u76ee\u5f55\u4e0b\u5bfb\u627e\u6587\u4ef6\u7684\u65f6\u95f4\uff0c\u4e0e\u76ee\u5f55\u91cc\u7684\u6587\u4ef6\u6570\u91cf\u6210\u6b63\u6bd4\u3002\\n\\nUNIX \u76ee\u5f55\u672c\u8eab\u5c31\u662f\u6587\u4ef6\uff0c\u53ea\u4e0d\u8fc7\u5b83\u62e5\u6709\u7279\u6b8a\u5c5e\u6027\u4e14\u6709\u9650\u8bbf\u95ee\u3002\u6240\u6709\u7684\u76ee\u5f55\uff0c\u5373\u4f7f\u7a7a\u76ee\u5f55\uff0c\u4e5f\u81f3\u5c11\u5305\u542b\u4e24\u4e2a\u7279\u6b8a\u76ee\u5f55\uff0c`.` \u76ee\u5f55\u672c\u8eab\uff0c `..` \u4e0a\u7ea7\u76ee\u5f55\u3002\\n\\n\u8def\u5f84\u7ed3\u5c3e\u5982\u679c\u662f\u4ee5\u659c\u6760\u7ed3\u675f\uff0c\u5219\u5b83\u662f\u4e00\u4e2a\u76ee\u5f55\u3002\u5982\u679c\u6700\u540e\u5b57\u7b26\u975e\u659c\u6760\uff0c\u6700\u540e\u4e00\u4e2a\u7ec4\u6210\u90e8\u5206\u662f\u76ee\u5f55\u8fd8\u662f\u5176\u4ed6\u7c7b\u578b\u7684\u6587\u4ef6\uff0c\u53ea\u80fd\u901a\u8fc7\u54a8\u8be2\u6587\u4ef6\u7cfb\u7edf\u800c\u5f97\u77e5\u3002\uff08\u67d0\u4e2a\u76ee\u5f55\u7684 link \uff09\\n\\n## \u6302\u8f7d\u6587\u4ef6\u7cfb\u7edf\\n\\nUNIX \u5141\u8bb8\u5c06\u67d0\u4e2a\u6587\u4ef6\u7cfb\u7edf\uff0c\u903b\u8f91\u6027\u5730\u7f6e\u4e8e\u53e6\u4e00\u4e2a\u6587\u4ef6\u7cfb\u7edf\u5185\u4e00\u4e2a\u5df2\u5b58\u5728\u7684\u4efb\u610f\u76ee\u5f55\u4e0a\uff0cmounting \u3002\\n\\n\u5f53\u53e6\u4e00\u4e2a\u6587\u4ef6\u7cfb\u7edf\u52a0\u8f7d\u5728\u4e00\u4e2a\u76ee\u5f55\u4e4b\u4e0a\u65f6\uff0c\u8be5\u76ee\u5f55\u4e4b\u524d\u7684\u5185\u5bb9\u90fd\u65e0\u6cd5\u770b\u89c1\u4e5f\u65e0\u6cd5\u8bbf\u95ee\uff0c\u76f4\u5230\u5378\u8f7d\u90a3\u4e2a\u6587\u4ef6\u7cfb\u7edf\u4e4b\u540e\uff0c\u5b83\u4eec\u624d\u4f1a\u51fa\u73b0\u3002\\n\\n```bash\\n# \u663e\u793a\u5df2\u52a0\u8f7d\u7684\u6587\u4ef6\u7cfb\u7edf\u5217\u8868\\nmount | sort\\n```\\n\\n## \u6587\u4ef6\u7cfb\u7edf\u5b9e\u73b0\u6982\u51b5\\n\\n> \u6587\u4ef6\u7cfb\u7edf\u5b9e\u73b0\u7684\u7ec6\u8282\u5f88\u590d\u6742\uff0c\u6211\u7684\u4e86\u89e3\u4e0d\u8db3\u4ee5\u628a\u5b83\u8bf4\u6e05\u695a\u3002\\n\\n\u5f53\u6587\u4ef6\u7cfb\u7edf\u521b\u5efa\u65f6\uff0c\u540c\u65f6\u4f1a\u521b\u5efa\u4e00\u4e2a\u56fa\u5b9a\u5927\u5c0f\u7684\u4fdd\u5b58\u6587\u4ef6\u7cfb\u7edf\u4e2d\u4e0e\u6587\u4ef6\u76f8\u5173\u4fe1\u606f\u7684\u8868\u683c\u3002\u67d0\u4e9b\u5b9e\u73b0\u5141\u8bb8\u8fd9\u4e2a\u8868\u683c\u52a8\u6001\u589e\u5927\u3002\\n\\n\u6bcf\u4e2a\u6587\u4ef6\u90fd\u4f1a\u4e0e\u8fd9\u4e2a\u8868\u683c\u7684\u4e00\u4e2a\u5b9e\u4f8b\u76f8\u5173\u8054\uff0c\u8fd9\u4e2a\u5b9e\u4f8b\u662f\u4e00\u4e2a\u6587\u4ef6\u7cfb\u7edf\u7684\u6570\u636e\u7ed3\u6784\uff0c\u79f0\u4e3a `inode` \uff0c\u4e5f\u5c31\u662f `index node` \uff0c\u53d1\u97f3 _eye node_ \u3002\\n\\n\u4e3a\u4ec0\u4e48\u5e73\u65f6\u90fd\u770b\u4e0d\u5230\u8fd9\u4e2a\u6570\u636e\u7ed3\u6784\u5462\uff1f\u56e0\u4e3a\u90fd\u88ab `stat()` \u548c `fstat()` \u7cfb\u7edf\u8c03\u7528\u5c4f\u853d\u4e86\uff0c\u4e0d\u540c\u6587\u4ef6\u7cfb\u7edf\u7684 inode \u4e0d\u540c\u5b9e\u73b0\u4e5f\u4e0d\u9700\u8981\u88ab\u5173\u6ce8\u3002\u641c\u7d22 `inode struct` \u53ef\u4ee5\u4e86\u89e3\u66f4\u591a\u4fe1\u606f\u3002\\n\\n\u7531\u4e8e inode \u8868\u683c\u7684\u5c0f\u662f\u56fa\u5b9a\u7684\uff0c\u56e0\u6b64\u6709\u53ef\u80fd\u51fa\u73b0\u6587\u4ef6\u7cfb\u7edf\u5df2\u6ee1\uff0c\u4f46\u5b58\u50a8\u8bbe\u5907\u4ecd\u6709\u5927\u91cf\u53ef\u7528\u7684\u7a7a\u95f4\u3002\u5b58\u50a8\u8bbe\u5907\u6709\u7a7a\u95f4\u5b58\u653e\u6587\u4ef6\u6570\u636e\uff0c\u4f46\u662f\u6ca1\u6709\u7a7a\u95f4\u5b58\u653e\u5b83\u7684 metadata \u6570\u636e\u3002\\n\\n\u5728\u540c\u4e00\u4e2a UNIX \u6587\u4ef6\u7cfb\u7edf\u4e0b\uff0c\u91cd\u547d\u540d\u6216\u8005\u79fb\u52a8\u6587\u4ef6\uff0c\u901f\u5ea6\u90fd\u5f88\u5feb\uff0c\u56e0\u4e3a\u4e0d\u6d89\u53ca\u6587\u4ef6\u5185\u5bb9\u5757\u7684\u53d8\u5316\uff0c\u53ea\u662f\u4fee\u6539\u7684 inode \u7684\u4fe1\u606f\u3002\u5982\u679c\u8de8\u6587\u4ef6\u7cfb\u7edf\u4e86\uff0c \u5219\u9700\u8981\u5bf9\u6587\u4ef6\u7684\u6240\u6709\u5757\u8fdb\u884c\u8bfb\u53d6\u4e0e\u5199\u5165\u7684\u64cd\u4f5c\u3002\\n\\n**\u8fde\u63a5**\\n\\n\u521b\u5efa\u4e00\u4e2a\u786c\u8fde\u63a5\uff0clink \uff0c\u4e0d\u4f1a\u590d\u5236\u51fa\u4e00\u4e2a inode\uff0c\u4f46\u4f1a\u6307\u5411\u540c\u4e00\u4e2a inode\u3002\\n\\n\u521b\u5efa\u4e00\u4e2a\u8f6f\u8fde\u63a5\uff0csoft link\uff0csymbolic link\uff0c\u5219\u4e0d\u4f1a\u6307\u5411 inode \u6761\u76ee\uff0c\u5b83\u53ea\u662f\u8868\u793a _\u8fd9\u4e2a\u76ee\u5f55\u6761\u76ee\u6307\u5411\u53e6\u4e00\u4e2a\u76ee\u5f55\u6761\u76ee_\uff0c\u5b83\u53ef\u4ee5\u6307\u5411\u6587\u4ef6\u7cfb\u7edf\u5185\u4efb\u4f55\u4f4d\u7f6e\uff0c\u5373\u4f7f\u8de8\u52a0\u8f7d\u70b9\u3002\\n\\n\u590d\u5236\u6587\u4ef6\uff0c\u4f1a\u4ea7\u751f\u65b0\u7684 inode\uff0c\u65b0\u7684\u5185\u5bb9\u5757\u3002\\n\\n\u540c\u6587\u4ef6\u7cfb\u7edf\u4e0b\uff0c\u79fb\u52a8\u6587\u4ef6\uff0c\u590d\u7528\u5df2\u6709\u7684 inode\uff0c\u4e0d\u5f71\u54cd\u5185\u5bb9\u5757\u3002\\n\\n## \u8bbe\u5907\u4e5f\u662f UNIX \u6587\u4ef6\\n\\nUNIX \u5c06\u6587\u4ef6\u7684\u6982\u5ff5\u5ef6\u5c55\u5230\u4e86\u7cfb\u7edf\u4e0a\u7684\u8bbe\u5907\u3002\u6240\u6709\u7684 UNIX \u7cfb\u7edf\u90fd\u62e5\u6709\u540d\u4e3a `/dev` \u7684\u9876\u5c42\u76ee\u5f55\u3002\u5728\u8be5\u76ee\u5f55\u4e0b\uff0c\u5c31\u662f\u8bbe\u5907\u6587\u4ef6\uff0c\u8fd9\u4e9b\u8bbe\u5907\u6587\u4ef6\u7531\u4e13\u95e8\u7684\u9a71\u52a8\u7a0b\u5e8f\u63a7\u5236\u3002\\n\\n**/dev/null** \u662f bit bucket \uff0c\u6240\u6709\u4f20\u9001\u5230\u8fd9\u4e2a\u8bbe\u5907\u6587\u4ef6\u7684\u6570\u636e\u90fd\u4f1a\u88ab\u7cfb\u7edf\u4e22\u6389\u3002\u4ece\u8fd9\u91cc\u8bfb\u53d6\u5219\u4f1a\u5f97\u5230\u6587\u4ef6\u7ed3\u675f\u7b26\u53f7 _end-of-file_ \u3002\\n\\n**/dev/tty** \uff0c\u5f53\u7a0b\u5e8f\u6253\u5f00\u8fd9\u4e2a\u6587\u4ef6\u7684\u65f6\u5019\uff0c UNIX \u4f1a\u81ea\u52a8\u5c06\u5b83\u91cd\u5b9a\u5411\u5230\u4e00\u4e2a\u7ec8\u7aef\uff0c\u5982\u5b9e\u4f53\u7684\u63a7\u5236\u53f0 console \uff0c\u6216\u4e32\u884c\u7aef\u53e3 serial port \uff0c\u7136\u540e\u518d\u548c\u7a0b\u5e8f\u76f8\u7ed3\u5408\u3002\u8fd9\u5728\u7a0b\u5e8f\u5fc5\u987b\u8bfb\u53d6\u4eba\u5de5\u8f93\u5165\u65f6\u5f88\u6709\u7528\u3002\\n\\n**/dev/random** \uff0c **/dev/urandom** \u662f\u4e24\u4e2a\u968f\u673a\u4f2a\u8bbe\u5907\uff0c\u80fd\u591f\u63d0\u9ad8\u6c38\u4e0d\u4e3a\u7a7a\u7684\u968f\u673a\u5b57\u8282\u6570\u636e\u6d41\u3002\u8fd9\u4e24\u4e2a\u8bbe\u5907\u7684\u5dee\u522b\u5728\u4e8e\uff0c **/dev/random** \u4f1a\u4e00\u76f4\u5c01\u9501\uff0c\u76f4\u5230\u7cfb\u7edf\u6240\u4ea7\u751f\u7684\u968f\u673a\u6570\u5df2\u5145\u5206\u591f\u7528\uff0c\u6240\u4ee5\u5b83\u53ef\u4ee5\u4fdd\u8bc1\u9ad8\u54c1\u8d28\u7684\u968f\u673a\u6570\u3002 **/dev/urandom** \u4e0d\u4f1a\u6b7b\u9501\uff0c\u6570\u636e\u7684\u968f\u673a\u7a0b\u5ea6\u4e00\u822c\uff0c\u4f46\u8db3\u591f\u901a\u8fc7\u5927\u90e8\u5206\u968f\u673a\u7edf\u8ba1\u6d4b\u8bd5\u3002\\n\\n## UNIX \u6587\u4ef6\u5c5e\u6027\\n\\nUNIX \u7684\u6587\u4ef6\u62e5\u6709\u6240\u6709\u6743\u548c\u6743\u9650\u7684\u6982\u5ff5\u3002\\n\\n**\u6240\u6709\u6743**\\n\\nUNIX \u7684\u6587\u4ef6\u6709\u4e24\u79cd\u6240\u6709\u6743\uff0c\u7528\u6237\u6240\u6709 _user_ \uff0c\u7ec4\u6240\u6709 _group_ \uff0c\u5b83\u4eec\u6709\u5404\u81ea\u7684\u6743\u9650\u3002\\n\\n\u65b0\u7684\u6587\u4ef6\u901a\u5e38\u4f1a\u7ee7\u627f\u5176\u521b\u9020\u8005\u7684\u6240\u6709\u8005\u4e0e\u7ec4\u6210\u5458\uff0c\u53ef\u4ee5\u901a\u8fc7 `chown` \u6216 `chgrp` \u6765\u6539\u53d8\u5176\u5c5e\u6027\u3002\\n\\n**\u6587\u4ef6\u6743\u9650**\\n\\n\u6743\u9650\u5219\u6709\u4e09\u79cd\u7c7b\u578b\uff0c\u8bfb\u53d6 _read_ \uff0c\u5199\u5165 _write_ \uff0c\u6267\u884c _execute_ \u3002\u5b83\u4eec\u5728 inode \u6570\u636e\u7ed3\u6784\u91cc\u9762\u53ea\u9700\u8981\u5355\u4e00\u4f4d\uff0c\u5c31\u53ef\u4ee5\u6307\u51fa\u6743\u9650\u7684\u5b58\u5728\u4e0e\u5426\u3002\\n\\n`chmod` \u53ef\u4ee5\u6539\u53d8\u6743\u9650\u7c7b\u578b\u3002\\n\\n**\u76ee\u5f55\u6743\u9650**\\n\\n\u76ee\u5f55\u6743\u9650\u7684\u89e3\u8bfb\u4f1a\u7531\u7a0d\u5fae\u4e0d\u540c\u3002\\n\\n\u76ee\u5f55\u7684\u8bfb\u53d6\uff0c\u5c31\u662f\u53ef\u4ee5\u5217\u51fa\u5b83\u7684\u5185\u5bb9\uff0c\u5982 `ls` \u3002\\n\\n\u76ee\u5f55\u7684\u5199\u5165\uff0c\u5c31\u8868\u793a\u80fd\u5728\u5f53\u524d\u76ee\u5f55\u4e0b\u9762\u5efa\u7acb\u6216\u5220\u9664\u6587\u4ef6\uff0c\u5373\u4fbf\u5bf9\u76ee\u5f55\u4e0b\u9762\u7684\u6587\u4ef6\uff0c\u6ca1\u6709\u5199\u5165\u6743\u9650\u3002\\n\\n\u6267\u884c\u8bbf\u95ee\uff0c\u53ef\u4ee5\u8bbf\u95ee\u6587\u4ef6\u4ee5\u53ca\u8be5\u76ee\u5f55\u4e0b\u7684\u5b50\u76ee\u5f55\u3002\\n\\n## inode \u90e8\u5206\u5c5e\u6027\\n\\n**\u6587\u4ef6\u65f6\u95f4\u6233**\\n\\nUNIX \u6587\u4ef6\u7684 inode \u6761\u76ee\u8bb0\u5f55\u5305\u62ec\u4e09\u4e2a\u91cd\u8981\u7684\u65f6\u95f4\u6233\uff1a\u8bbf\u95ee\u65f6\u95f4\u3001inode \u53d8\u66f4\u65f6\u95f4\u3001\u4fee\u6539\u65f6\u95f4\u3002\\n\\n\u8bbf\u95ee\u65f6\u95f4\u662f\u901a\u8fc7\u6570\u4e2a\u7cfb\u7edf\u8c03\u7528\u800c\u88ab\u66f4\u65b0\uff0c\u5305\u62ec\u8bfb\u53d6\u4e0e\u5199\u5165\u6587\u4ef6\u7684\u64cd\u4f5c\u3002\\n\\ninode \u53d8\u66f4\u65f6\u95f4\u662f\u5728\u6587\u4ef6\u5efa\u7acb\u4e4b\u65f6\uff0c\u4ee5\u53ca inode metadata \u88ab\u4fee\u6539\u65f6\u88ab\u8bbe\u7f6e\u3002\\n\\n\u4fee\u6539\u65f6\u95f4\u7684\u53d8\u66f4\u662f\u5728\u6587\u4ef6\u5757\u88ab\u4fee\u6539\uff0c\u800c\u975e metadata \uff08\u6587\u4ef6\u540d\u3001\u7528\u6237\u3001\u7ec4\u3001\u8fde\u63a5\u8ba1\u6570\u3001\u6743\u9650\uff09 \u53d8\u66f4\u65f6\u3002\\n\\n**\u6587\u4ef6\u5927\u5c0f\u548c\u7c7b\u578b**\\n\\n```bash\\nls -l\\n```\\n\\n\u6587\u4ef6\u7c7b\u578b\u8bb0\u5f55\u5728\u6bcf\u884c\u7684\u7b2c\u4e00\u4e2a\u5b57\u7b26\uff1a\\n\\n- `-` \uff0c\u4e00\u822c\u6587\u4ef6\\n- `d` \uff0c\u76ee\u5f55\\n- `l` \uff0c\u7b26\u53f7\u8fde\u63a5\\n- `p` \uff0cpipe\\n- `s` \uff0csocket\\n\\n\u6bcf\u4e2a\u6587\u4ef6\u7684 inode \u5b9e\u4f53\u8bb0\u5f55\u5305\u542b\u4e86\u5b83\u7684\u5b57\u8282\u5927\u5c0f\uff0c\u5982\u679c\u6587\u4ef6\u4e3a\u7a7a\u65f6\uff0c\u5b83\u53ef\u4ee5\u662f 0 \uff0c\u5b83\u663e\u793a\u5728\u7b2c 5 \u884c\u3002"},{"id":"/2021/01/22/runtime-performance","metadata":{"permalink":"/blog/2021/01/22/runtime-performance","source":"@site/blog/2021-01-22-runtime-performance.md","title":"Runtime Performance","description":"Why Performance matters / google developer","date":"2021-01-22T00:00:00.000Z","formattedDate":"January 22, 2021","tags":[{"label":"performance","permalink":"/blog/tags/performance"}],"readingTime":2.45,"hasTruncateMarker":true,"authors":[],"frontMatter":{"title":"Runtime Performance","categories":["frontend","developer tools","performance"],"tags":["performance"]},"prevItem":{"title":"\u6587\u4ef6\u7cfb\u7edf\u672d\u8bb0","permalink":"/blog/2021/02/03/file-system"},"nextItem":{"title":"Quick learning on Shells","permalink":"/blog/2020/12/25/shells"}},"content":"[Why Performance matters / google developer](https://web.dev/why-speed-matters/)\\n\\n[What is Performance / MDN](https://developer.mozilla.org/en-US/docs/Tools/Performance)\\n\\nRuntime performance consists of **loading performance** and **rendering performance**.\\n\\n\x3c!--truncate--\x3e\\n\\n## Loading Performance\\n\\n> Omitted. Feel free to read [article](https://developers.google.com/web/fundamentals/performance/get-started).\\n\\n## Rendering Performance\\n\\n- [overview](https://developers.google.com/web/fundamentals/performance/rendering)\\n\\n### Anatomy of a Frame\\n\\n[Original article](https://aerotwist.com/blog/the-anatomy-of-a-frame/)\\n\\n[Frame lifespawn in short (in the render process)](https://aerotwist.com/blog/the-anatomy-of-a-frame/#the-flow-of-things).\\n\\n```\\nFrame start\\n\\n  Input event handlers\\n\\n  requestAnimationFrame\\n\\n  ParseHTML\\n\\n  Recalculate Styles\\n\\n  Layout\\n\\n  Update Layer tree\\n\\n  Paint\\n\\n  Composite\\n\\n  (commit -> raster scheduled)\\n\\nFrame end\\n\\n  requestIdleCallback\\n```\\n\\n![](/images/runtime-performance/frame-full.jpg)\\n\\nYou won\'t always necessarily touch every part of the pipeline on every frame.\\n\\n> Each of [these parts](https://developers.google.com/web/fundamentals/performance/rendering#the_pixel_pipeline) of the pipeline represents an opportunity to introduce jank.\\n\\n### Analyzing Runtime Performance\\n\\n[Tools to analyze runtime performance](https://developers.google.com/web/tools/chrome-devtools/rendering-tools)\\n\\n- Don\'t write JavaScript that forces the browser to recalculate layout. Separate read and write functions, and perform reads first.\\n- Don\'t over-complicate your CSS. Use less CSS and keep your CSS selectors simple.\\n- Avoid layout as much as possible. Choose CSS that doesn\'t trigger layout at all.\\n- Painting can take up more time than any other rendering activity. Watch out for paint bottlenecks.\\n\\n### Optimizing Rendering Performance\\n\\n- [optimize JavaScript execution](https://developers.google.com/web/fundamentals/performance/rendering/optimize-javascript-execution)\\n\\n  - Avoid using `setTimeout` or `setInterval` for visual updates; use `requestAnimationFrame` instead.\\n  - Move long-running JavaScript off the main thread to Web Workers.\\n  - Use micro-tasks to make DOM changes _over several frames_.\\n  - Leveraging `requestIdleCallback` if you can.\\n\\n- [Reduce the Scope and Complexity of Style Calculations](https://developers.google.com/web/fundamentals/performance/rendering/reduce-the-scope-and-complexity-of-style-calculations)\\n\\n  - Reduce the complexity of your selectors; use a class-centric methodology like [Block-Element-Modifier](https://bem.info/).\\n  - Reduce the number of elements on which style calculation must be calculated.\\n\\n- [Avoid Large, Complex Layouts and Layout Thrashing](https://developers.google.com/web/fundamentals/performance/rendering/avoid-large-complex-layouts-and-layout-thrashing)\\n\\n  - Layout is normally scoped to the whole document.\\n  - The number of DOM elements will affect performance; you should avoid triggering layout wherever possible.\\n  - Assess layout model performance; new Flexbox is typically faster than older Flexbox or float-based layout models.\\n  - Avoid forced synchronous layouts and layout thrashing; read style values first and then make style changes.\\n\\n- [Simplify Paint Complexity and Reduce Paint Areas](https://developers.google.com/web/fundamentals/performance/rendering/simplify-paint-complexity-and-reduce-paint-areas)\\n\\n  - Changing any property apart from transforms or opacity always triggers paint.\\n  - Paint is often the most expensive part of the pixel pipeline; avoid it where you can.\\n  - Reduce paint areas through layer promotion and orchestration of animations.\\n\\n- [Stick to Compositor-Only Properties and Manage Layer Count](https://developers.google.com/web/fundamentals/performance/rendering/stick-to-compositor-only-properties-and-manage-layer-count)\\n\\n  - Stick to transform and opacity changes for your animations.\\n  - Promote moving elements with will-change or translateZ.\\n  - Avoid overusing promotion rules; layers require memory and management.\\n\\n- [Debounce the Input Handlers](https://developers.google.com/web/fundamentals/performance/rendering/debounce-your-input-handlers)\\n\\n  - Avoid long-running input handlers; they can block scrolling.\\n  - Do not make style changes in input handlers, otherwise it will impact `requestAnimationFrame`.\\n  - Debounce the handlers; store event values and deal with style changes in the next requestAnimationFrame callback.\\n\\n## References\\n\\n[Lighthouse](https://developers.google.com/web/tools/lighthouse). Devtools - Lighthouse Panel.\\n\\n[Devtools - Performance Panel](https://docs.microsoft.com/en-us/microsoft-edge/devtools-guide-chromium/evaluate-performance/reference):\\n\\n- [Quick started](https://developer.mozilla.org/en-US/docs/Tools/Performance/How_to)\\n\\n- [Components](https://developer.mozilla.org/en-US/docs/Tools/Performance#components_of_the_performance_tool) of the Performance tool, and [its UI](https://developer.mozilla.org/en-US/docs/Tools/Performance/UI_Tour)\\n\\n- Understanding chart after profiling at Performance Panel, [youtube video](https://youtu.be/WBmttwfA_k8)"},{"id":"/2020/12/25/shells","metadata":{"permalink":"/blog/2020/12/25/shells","source":"@site/blog/2020-12-25-shells.md","title":"Quick learning on Shells","description":"Shell scripts examples","date":"2020-12-25T00:00:00.000Z","formattedDate":"December 25, 2020","tags":[{"label":"shell","permalink":"/blog/tags/shell"}],"readingTime":3.09,"hasTruncateMarker":true,"authors":[],"frontMatter":{"title":"Quick learning on Shells","categories":["command line"],"tags":["shell"]},"prevItem":{"title":"Runtime Performance","permalink":"/blog/2021/01/22/runtime-performance"},"nextItem":{"title":"Wander in webpack","permalink":"/blog/2020/12/06/wander-in-webpack"}},"content":"## Shell scripts examples\\n\\n- [select job from Procfile](https://github.com/AkatQuas/kiddo-plays/tree/master/shells/select-job-from-procfile): Using scripts to select some job listed in Procfile.\\n\\n- [parsing arguments from command line](https://github.com/AkatQuas/kiddo-plays/blob/master/shells/parsing-arguments.sh).\\n\\n- [secure shell template](https://github.com/AkatQuas/kiddo-plays/blob/master/shells/secure-shell-template.sh): Using this template to write your shell scripts.\\n\\n\x3c!--truncate--\x3e\\n\\n## How does shell execute commands\\n\\n**TLDR**: When running an external command, the shell has to create a separate process to run that command, and wait for it to exit. When running a built-in command, there is no need to create a new thread of execution: the command is executed inside the main thread.\\n\\n**detailed**:\\n\\n- [Excuting Commands](https://tldp.org/LDP/Bash-Beginners-Guide/html/sect_01_03.html)\\n- [how shell executes commands](http://uw714doc.xinuos.com/en/SHL_custom/How_shell_executes_cmds.html)\\n- [What happens when a built-in command is running](https://unix.stackexchange.com/a/79920).\\n\\n## Learning materials\\n\\n- [Shell checks](https://github.com/koalaman/shellcheck)\\n\\n- [Shell quick tutorials (Simplified Chinese)](https://wangdoc.com/bash/intro.html)\\n\\n- [Shell \u811a\u672c\u5b66\u4e60\u6307\u5357.pdf (Simplified Chinese)](https://github.com/huyubing/books-pdf/blob/master/Shell%E8%84%9A%E6%9C%AC%E5%AD%A6%E4%B9%A0%E6%8C%87%E5%8D%97.pdf)\\n\\n- [Explain shell](https://www.explainshell.com/)\\n\\n- [tldr manpage for command](https://github.com/tldr-pages/tldr)\\n\\n- [Advanced Bash-Scripting Guide](https://tldp.org/LDP/abs/html/index.html): An in-depth exploration of the art of shell scripting.\\n\\n- [Shell basic 101](https://missing.csail.mit.edu/2020/shell-tools/)\\n\\n  `sed`, `awk`, `grep`, `printf`, `head`, `tail`, `sort`, `less`, `more`, `cut`, `tr`, `wc`.\\n\\n  `bg`, `fg`, `jobs`, `kill`, `command`, `read`, `times`, `sleep`.\\n\\n  `gzip`, `tar`.\\n\\n  `mktemp`, `find`, `locate`, `dirname`, `basename`.\\n\\n  `ps`, `top`, `crontab`.\\n\\n  `kill` ( `ABRT`, `HUP`, `KILL`, `TERM` ), `trap`.\\n\\n  `set`, `unset`, `shopt`, `getopts`.\\n\\n  <details>\\n  <summary>Expansion</summary>\\n\\n  ```bash\\n  echo ~\\n  echo $HOME\\n\\n  echo ~+\\n  echo $PWD\\n\\n  echo ~-\\n  echo $OLDPWD\\n  ```\\n\\n  ```bash\\n  # $varname exist and not null, using $varname\\n  # #varname undefined, using `word`\\n  ${varname:-word}\\n  ```\\n\\n  ```bash\\n  # $varname exist and not null, using $varname\\n  # #varname undefined, using `word`\\n  ${varname:=word}\\n  ```\\n\\n  ```bash\\n  # $varname exist and not null, using $varname\\n  # #varname undefined, script exit with error message `message`\\n  ${varname:?message}\\n  ```\\n\\n  </details>\\n\\n  > _How should you organize your dotfiles?_ They should be in their own folder, under version control, and symlinked into place using a script.\\n\\n  <details>\\n  <summary>Some special variables to refer to arguments, error codes, and other relevant variables</summary>\\n\\n  - `$0` - Name of the script\\n  - `$1` to `$9` - Arguments to the script. `$1` is the first argument and so on.\\n  - `$@` - All the arguments\\n  - `$#` - Number of arguments\\n  - `$?` - Return code of the previous command\\n  - `$$` - Process identification number (PID) for the current script\\n  - `!!` - Entire last command, including arguments. A common pattern is to execute a command only for it to fail due to missing permissions; you can quickly re-execute the command with sudo by doing `sudo !!`\\n  - `$_` - Last argument from the last command. If you are in an interactive shell, you can also quickly get this value by typing `Esc` followed by .\\n\\n  </details>\\n\\n  <details>\\n  <summary>Expanding expressions techniques </summary>\\n\\n  - Wildcards - Whenever you want to perform some sort of wildcard matching, you can use `?` and `*` to match one or any amount of characters respectively. For instance, given files `foo`, `foo1`, `foo2`, `foo10` and `bar`, the command rm `foo?` will delete `foo1` and `foo2` whereas rm `foo*` will delete all but `bar`.\\n  - Curly braces `{}` - Whenever you have a common substring in a series of commands, you can use curly braces for bash to expand this automatically. This comes in very handy when moving or converting files.\\n\\n    ```bash\\n    touch index.{html,css,js}\\n    ```\\n\\n  </details>\\n\\n  <details>\\n  <summary>Batch manipulation on files using globbing</summary>\\n\\n  ```bash\\n  # Find all python files that have a folder named test in their path\\n  find . -path \'*/test/*.py\' -type f\\n\\n  # Delete all files with .tmp extension\\n  find . -name \'*.tmp\' -exec rm {} \\\\;\\n\\n  # Find all conf files and back up them\\n  find . -name \'*.conf\' -exec convert {} {}.bak \\\\;\\n  ```\\n\\n  </details>\\n\\n## Makefile\\n\\n[Makefiles](https://github.com/AkatQuas/kiddo-plays/tree/master/shells/makefiles): Several Makefile templates.\\n\\n[\u8ddf\u6211\u4e00\u8d77\u5199 makefile.pdf](https://github.com/huyubing/books-pdf/blob/master/%E8%B7%9F%E6%88%91%E4%B8%80%E8%B5%B7%E5%86%99makefile.pdf): A book for beginners.\\n\\n[GNU Automake](https://github.com/huyubing/books-pdf/blob/master/automake.pdf).\\n\\n---\\n\\n[Demo Project on GitHub](https://github.com/AkatQuas/kiddo-plays/tree/master/shells)"},{"id":"/2020/12/06/wander-in-webpack","metadata":{"permalink":"/blog/2020/12/06/wander-in-webpack","source":"@site/blog/2020-12-06-wander-in-webpack.md","title":"Wander in webpack","description":"Setup the project","date":"2020-12-06T00:00:00.000Z","formattedDate":"December 6, 2020","tags":[{"label":"webpack","permalink":"/blog/tags/webpack"}],"readingTime":6.37,"hasTruncateMarker":true,"authors":[],"frontMatter":{"title":"Wander in webpack","categories":["frontend","javascript","webpack"],"tags":["webpack"]},"prevItem":{"title":"Quick learning on Shells","permalink":"/blog/2020/12/25/shells"},"nextItem":{"title":"Learn some Golang","permalink":"/blog/2020/09/24/golang"}},"content":"## Setup the project\\n\\n```bash\\ngit clone https://github.com/webpack/webpack.git && cd webpack\\n\\n# maybe switch to some branch/tag\\n\\n# manually\\nnpm install -g yarn\\nyarn\\nyarn link\\nyarn link webpack\\n\\n# automatically\\nnpm run setup\\n# or\\nyarn setup\\n```\\n\\nAt webpack, `yarn` is preferred.\\n\\nIf you already have `yarn` installed, do: `yarn setup`. This will complete all required steps.\\n\\nIf not, do: `npm run setup`, the setup will also install `yarn` for you.\\n\\nAnd you are good to go.\\n\\n\x3c!--truncate--\x3e\\n\\n## Entry files\\n\\nThe command-line executable file is `bin/webpack.js`, which will invoke the `webpack-cli` command.\\n\\nThe normal script entry file is `lib/index.js`, which groups the main webpack module from `lib/webpack.js` and other plugins, such as `DefinePlugin`, `DllPlugin`, and utilities.\\n\\n## Webpack in script\\n\\n### Webpack module\\n\\nThe entry function is the module exported from `lib/webpack.js`.\\n\\nIt has a nested function to create a compiler (one of `lib/Compiler.js` and `lib/MultiCompiler.js`), and check the [watch mode](https://webpack.js.org/configuration/watch/).\\n\\nDuring the compiler creating time, the input options are normalized (`getNormalizedWebpackOptions` from `lib/config/normalization.js`), base-defaults-applied (`applyWebpackOptionsBaseDefaults` from `lib/config/defaults.js`), plugin-injected, defaults-applied (`applyWebpackOptionsDefaults` from `lib/config/defaults.js`).\\n\\nSome hooks of the compiler is called, `hooks.environment`, `hooks.afterEnvironment`, `hooks.initialize`.\\n\\n`MultiCompiler` would be created if the options is an array of multiple options. This type of compiler is build upon `Compiler` with some tweaks.\\n\\nAnyway, when the compiler is available, it\'s time to run in normal mode via `compiler.run()` or watch mode `compiler.watch()`.\\n\\n#### `Compiler`\\n\\n```js\\n// in lib/webpack.js, createCompiler\\nconst compiler = new Compiler(options.context);\\ncompiler.options = options;\\n```\\n\\nWhen created, the `Compiler` instance is almost a collection of lots of configurations with default values.\\n\\nMore details on `hooks` later. Before that, It\'s important to take a look at [`tapable`](https://github.com/webpack/tapable).\\n\\n> Understanding how `tapable` works is quite helpful when figuring out how webpack works. It\'s the backbone of webpack anyway. References: [compiler hooks](https://webpack.js.org/api/compiler-hooks/), [compilation hooks](https://webpack.js.org/api/compilation-hooks/), [JavascriptParser Hooks](https://webpack.js.org/api/parser/).\\n>\\n> Here is another useful article [\u8c08\u8c08 Tapable](https://juejin.cn/post/6974573181356998669).\\n\\nSince we have the `Compiler` instance, it\'s time to register plugins into the instance, aka, _tap into hooks_.\\n\\n```js\\nnew NodeEnvironmentPlugin({\\n  infrastructureLogging: options.infrastructureLogging,\\n}).apply(compiler);\\n```\\n\\n`NodeEnvironmentPlugin` basically inject the some filesystem utils, whether wrapped or not, `inputFileSystem`, `outputFileSystem`, `watchFileSystem` , into the instance.\\n\\n```js\\n/**\\n * plugins defined in config\\n */\\nif (Array.isArray(options.plugins)) {\\n  for (const plugin of options.plugins) {\\n    if (typeof plugin === \'function\') {\\n      plugin.call(compiler, compiler);\\n    } else {\\n      plugin.apply(compiler);\\n    }\\n  }\\n}\\n```\\n\\n> It\'s not surprise that you have to write an `apply` method in plugin class definitions.\\n\\n#### `compiler.run()`\\n\\nAfter some necessary checks and closure functions, the compiler would trigger `beforeRun`, `run` hooks, at the callback, the compiler invoke the `readRecords` methods, and in its callback, the real `compile` (a method of the compiler) is called.\\n\\n**`readRecords`**\\n\\nIt will check the `recordsInputPath`, which is a JSON file, to load the previous records. [Related documentation](https://webpack.js.org/configuration/other-options/#recordspath)\\n\\n**`compile`**\\n\\nFinally, we are going to _compile_ something.\\n\\n- `beforeCompile` hook is tapped\\n- `compile` hook is tapped\\n- `compilation` is created to do some compile works, heavy works, which is an instance of `lib/Compilation.js`. The function `compilation.finish` and `compliation.seal` are called.\\n- after compilation, `emitAssets`,\\n- add additional compilation round.\\n\\n**`compilation`**\\n\\n`Compilation` can:\\n\\n- `processModuleDependencies`\\n- `buildModule`\\n- `addRuntimeModule`\\n- `createModuleHashes`\\n- `emitAsset`\\n- `codeGeneration`\\n- `addChunk`, `addChunkInGroup`\\n- `processRuntimeRequirements`\\n- generate `Stats`\\n- `finish` to build moduleGraph\\n- `seal` to\\n  - optimize dependencies\\n  - create chunks\\n  - optimize modules and chunks\\n  - assign ids to module/chunk\\n  - hash module and chunks\\n  - code generation, it\'s a long way to get here :).\\n  - runtime requirements, hashing,\\n  - tackle module assets, chunk assets,\\n- ...\\n\\n#### `compiler.watch()`\\n\\nThis would return a compiler watcher (a `Watching` instance defined in `lib/Watching.js`) if successfully executed.\\n\\nThe watch instance would invoke `compiler.compiler()` after the `hook.watchRun` is triggered. And after each `emitRecords` from compiler, after some necessary checks, the watcher would invoke `compiler.compile` again to rebuild. And the rest is much like `compiler.run()`\\n\\n## Webpack in CLI\\n\\n`webpack-cli` is a [monorepo](https://github.com/webpack/webpack-cli). Navigate to the package directory at `package/webpack-cli`.\\n\\nThe entry file is located at `bin/cli.js`, and the real work is done by `lib/webpack-cli.js`, before which there\'s a _bootstrap_ stage (`lib/bootstrap.js`) to deal with the arguments coming from command line input.\\n\\nDuring bootstrap, a `WebpackCLI` instance would be created, and `WebpackCLI.run()` starts the _webpack_ job.\\n\\nAha, in the `run` method, the cli first resolve the `config` options, pass it to create a webpack compiler using the `webpack` package. And it\'s where all the dirty work done by webpack. we have already talked about how webpack does its work in the previous section.\\n\\nBesides, calling `webpack` from command line, `WebpackCLI` also provides many useful commands to:\\n\\n- Init a webpack config, `webpack-cli init`\\n- Scaffold a loader repository template, `webpack-cli loader`\\n- Scaffold a plugin repository template, `webpack-cli plugin`\\n- Inspect system information and dependencies, `webpack-cli info`\\n- Run webpack Dev Server, `webpack-cli server`\\n\\n> [Yeoman](https://yeoman.io/learning/) is used for generating loader/plugin repository.\\n\\nMore detailed usage could be found [here](https://webpack.js.org/api/cli/).\\n\\n## Webpack on the Fly\\n\\n`webpack-dev-server` is a development server that provides live reloading.\\n\\nThe entry point is `lib/Server.js`. It\'s create a node server using express.\\n\\nInside the `constructor()`, the server would:\\n\\n- hooks into webpack `compiler` lifecycle,\\n- initialize the application using `express`, which will serve as for `http.server`\\n- set up host check middleware, `server.checkHost()`\\n- set up development middleware using `webpack-dev-middleware`\\n- enable feature middlewares according to the given options, such as _webpack-dev-middleware_, _compression_, _proxy_, _historyApiFallback_\\n- optionally set up https configuration\\n- create the server using `http.createServer`\\n- set up some supplementary routes, `lib/utils/routes.js`\\n- set server sockets graceful killable\\n- set up websocketProxies, [details](https://github.com/chimurai/http-proxy-middleware#external-websocket-upgrade)\\n\\nThis server can send data to page via sockets connection.\\n\\n> For example, if watching on static files is enabled, when these files change, the server would send `\'content-change\'` event to its sockets.\\n\\n### webpack-dev-middleware\\n\\nThis is an express-style development middleware for use with webpack bundles and allows for serving of the files emitted from webpack.\\n\\nSome benefits of using this middleware include:\\n\\n- No files are written to disk, rather it handles files in memory\\n- If files changed in watch mode, the middleware delays requests until compiling has completed.\\n- Supports hot module reload (HMR).\\n\\nThe entry file is `src/index.js` which is a function, accepting two parameters, `compiler` instance created by webpack, and optional `options` object.\\n\\nAgain, `webpack-dev-middleware` hooks into webpack `compiler` lifecycle, doing its work after some hooks triggered.\\n\\nThe real middleware function is defined at `src/middleware.js`. While handling the valid requests, the response content is read from the webpack `compiler`\'s `outputFileSystem`. `setupOutputFileSystem` (`src/utils/setupOutputFileSystem.js`) does the trick.\\n\\n```js\\ntry {\\n  content = context.outputFileSystem.readFileSync(filename);\\n} catch (_ignoreError) {\\n  await goNext();\\n  return;\\n}\\n```\\n\\nSo whenever the webpack `compiler` compiles something new:\\n\\n1. the `webpack-dev-server` would send sockets data to the front client\\n1. client refresh its pages, re-request data\\n1. server read the new content from `compiler.outputFileSystem` with the help of `webpack-dev-middleware`, response with new data\\n\\n## Hack with webpack\\n\\nThere are two major ways to play with webpack:\\n\\n1. Tap into the webpack hooks\\n1. Tap into the compilation hooks\\n\\nThese commands would create a plugin/loader project using webpack-cli plugin/loader templates.\\n\\n```bash\\n# install webpack-cli @webpack-cli/generate-plugin\\n./node_modules/.bin/webpack-cli plugin\\n\\n# install webpack-cli @webpack-cli/generate-loader\\n./node_modules/.bin/webpack-cli loader\\n```\\n\\nDetailed documentations for [plugin](https://webpack.js.org/contribute/writing-a-plugin/) and [loader](https://webpack.js.org/contribute/writing-a-loader).\\n\\nTricky for writing composed plugins:\\n\\n```js\\n// some-plugin/src/index.js\\nconst debug = require(\'debug\')(\'someplugin\');\\nconst { DefinePlugin } = require(\'webpack\');\\n\\nclass SomePlugin {\\n  constructor(options) {\\n    this.options = options;\\n    // ...\\n  }\\n  apply(compiler) {\\n    debug(\'apply function from bundlesize plugin\');\\n    // some plugin functionality\\n    compiler.hooks.some.tap(\'SomePlugin\', (...args) => {\\n      debug(\'compiler some hook!\');\\n    });\\n    // compose other plugins\\n    // for example\\n    new DefinePlugin({\\n      MAGIC_VALUE: JSON.stringify(\'magic_value\'),\\n    }).apply(compiler);\\n  }\\n}\\n\\nmodule.exports = SomePlugin;\\n```\\n\\n## Utilities\\n\\n- [webpack-sources](https://github.com/webpack/webpack-sources)\\n- [stats analyse](https://github.com/webpack/analyse)\\n- [enhanced-resolve](https://github.com/webpack/enhanced-resolve)"},{"id":"/2020/09/24/golang","metadata":{"permalink":"/blog/2020/09/24/golang","source":"@site/blog/2020-09-24-golang.md","title":"Learn some Golang","description":"I start from this online tutorial, which is a good and comprehensive tutorial.","date":"2020-09-24T00:00:00.000Z","formattedDate":"September 24, 2020","tags":[{"label":"golang","permalink":"/blog/tags/golang"}],"readingTime":21.865,"hasTruncateMarker":true,"authors":[],"frontMatter":{"title":"Learn some Golang","categories":["programming language","golang"],"tags":["golang"]},"prevItem":{"title":"Wander in webpack","permalink":"/blog/2020/12/06/wander-in-webpack"},"nextItem":{"title":"Fullstack Starter Project Boilerplate","permalink":"/blog/2020/04/01/fullstack-starter"}},"content":"I start from [this online tutorial](https://www.digitalocean.com/community/tutorial_series/how-to-code-in-go), which is a good and comprehensive tutorial.\\n\\nMost content is excerpt from [Mastering Go](https://www.packtpub.com/product/mastering-go-second-edition/9781838559335). You\'d better buy one if you like the book.\\n\\nYou\'d really check it out, [Concurrency In Depth](/docs/concurrency-in-go/index).\\n\\n[Project on GitHub](https://github.com/AkatQuas/kiddo-plays/tree/master/golanger).\\n\\n# Useful tips\\n\\ngo version go1.14.4 darwin/amd64\\n\\n```bash\\ngo doc --help\\n\\n# go doc fmt\\n\\n# go doc fmt.Printf\\n\\ngo tool compile <source.go>\\n\\ngo tool compile -pack <source.go>\\n\\n# allow to detect race conditions, concurrency\\ngo tool compile -race <source.go>\\n\\n# go tool compile hello.go\\n\\n# go tool compile -pack hello.go\\n\\n# go tool compile -race hello.go\\n\\n# The -W parameter tells the go tool compile command to\\n# print the `debug parse tree` after the type checking\\ngo tool compile -W <source.go>\\n```\\n\\n\x3c!--truncate--\x3e\\n\\n---\\n\\n### some example files\\n\\nDetailed on Garbage Collector in GO : [garbageCollector.go](/downloads/code/golang/single-file-execute/garbageCollector.go).\\n\\nGlance at the package `unsafe`: [unsafe.go](/downloads/code/golang/single-file-execute/unsafe.go).\\n\\nGlance at the keyword `defer`: [simple-defer.go](/downloads/code/golang/single-file-execute/simple-defer.go), [flow-control](/downloads/code/golang/single-file-execute/flow-control.go).\\n\\nGlance at the built-in functions `panic` and `recover`: [panicRecover](/downloads/code/golang/single-file-execute/panicRecover.go), [flow-control](/downloads/code/golang/single-file-execute/flow-control.go), [error-handling](/downloads/code/golang/single-file-execute/error-handling.go).\\n\\nGlance at the package `time`: [dateAndTime.go](/downloads/code/golang/single-file-execute/dateAndTime.go).\\n\\nGlance at the package `strings`: [useStrings.go](/downloads/code/golang/single-file-execute/useStrings.go).\\n\\nFind out more information about the functions of the `runtime` package by visiting [https://golang.org/pkg/runtime/](https://golang.org/pkg/runtime/).\\n\\n## Basic Syntax and Grammar in GO\\n\\n```go\\n// using for loop to simulate while lopp\\nfor {\\n  if (condition) {\\n    break\\n  }\\n}\\n\\n// using for loop to simulate do...while loop\\nfor ok := true; ok; ok = anExpression {\\n\\n}\\n\\nfunc differentS1AndS2() {\\n  s1 := []int{1, 2}\\n  s2 := s1[:]\\n  s1[1] = 4\\n  // at this time, s1 and s2 both point to the same internal array\\n  fmt.Printf(\\"%v %[1]T\\\\n\\", &s2)\\n  fmt.Printf(\\"%v\\\\n\\", &s1)\\n  s1 = append(s1, 5, 7,9,10)\\n  // at this time, s1 is different from s2\\n  fmt.Printf(\\"%v %[1]T\\\\n\\", &s2)\\n  fmt.Printf(\\"%v\\\\n\\", &s1)\\n}\\n```\\n\\nGo has its own way of supporting `tuples`, which mainly allows functions to return _multiple values_ without needing to _group_ them in structures as is the case in C.\\n\\n`new` returns the memory address of the allocated object. Put simply, `new` returns a pointer!\\n\\nThe main difference between `new` and `make` is that variables created with `make` are properly initialized without just zeroing the allocated memory space. Additionally, `make` can only be applied to maps, channels, and slices, and it does not return a memory address, which means that `make` does not return a _pointer_.\\n\\nA Go `string` is a read-only `byte` `slice` that can hold any type of bytes, and it can have an arbitrary length.\\n\\nA `rune` is an `int32` value, and therefore it is a Go type that is used for representing a Unicode code point. A Unicode code point or code position is a numerical value that is usually used for representing single Unicode characters; however, it can also have alternative meanings, such as providing formatting information.\\n\\nA Go _package_ is a Go source file that begins with the `package` keyword followed by the name of the package.\\n\\nA Go _type method_ is a function with a special _receiver_ argument. We declare methods as ordinary functions with an additional parameter that appears in front of the function name. This particular parameter **connects** the function to the type of that extra parameter. As a result, that parameter is called the _receiver_ of the method.\\n\\nA type assertion is the `x.(T)` notation where `x` is of interface type and `T` is a type. Additionally, the actual value stored in `x` is of type `T`, and `T` must satisfy the interface type of `x`!\\n\\nType assertions help you do two things. The first thing is to check whether an interface value keeps a particular type. When used this way, a type assertion returns two values: the underlying value, and a bool value. Although the underlying value is what you might want to use, the Boolean value tells you whether the type assertion was successful or not! The second thing a type assertion does is to allow you to use the concrete value stored in an interface or assign it to a new variable. This means that if there is an int variable in an interface, you can get that value using type assertion.\\n\\nGlance at the usage of `interfaces`: [interfacesAssertion.go](/downloads/code/golang/single-file-execute/interfacesAssertion.go).\\n\\n## Reflection\\n\\n**Reflection** is an advanced Go feature that allows you to dynamically learn the type of an arbitrary object as well as information about its structure. Go offers the `reflect` package for working with reflection.\\n\\nReflection is necessary for the implementation of packages such as `fmt`, `text/template`, and `html/template`. In the `fmt` package, reflection saves you from having to deal explicitly with every data type that exists.\\n\\nConsequently, you might need to use reflection when you want to be as _generic_ as possible, or when you want to make sure you will be able to deal with data types that do not exist at the time you are writing your code. Additionally, reflection is handy when working with values of types that do not implement a common interface.\\n\\nThe stars of the `reflect` package are two types named reflect.Value and reflect.Type. The former type is used for storing values of any type, whereas the latter type is used for representing Go types.\\n\\nReflection should be used sparingly for three main reasons.\\n\\n1.  The first reason is that extensive use of reflection will make your programs hard to read and maintain. A potential solution to this problem is the good documentation; however, developers are famous for not having the time to write the required documentation.\\n1.  The second reason is that the Go code which uses reflection will make your programs slower. Generally speaking, Go code that is made to work with a particular data type will always be faster than Go code that uses reflection to work dynamically with any Go data type. Additionally, such dynamic code will make it difficult for tools to refactor or analyze your code.\\n1.  The last reason is that reflection errors cannot be caught at build time and are reported at runtime as a panic. This means that reflection errors can potentially crash your programs!\\n\\nGlance at the package `reflection`: [reflection.go](/downloads/code/golang/single-file-execute/reflection.go).\\n\\n---\\n\\n## Go Concurrency\\n\\nGo offers its own unique and innovative way of achieving concurrency, which comes in the form of **goroutines** and **channels**.\\n\\nGoroutines are the smallest Go entities that can be executed on their own in a Go program, which implies that goroutines are not autonomous entities like Unix processes\u2014goroutines live in threads that live in Unix processes.\\n\\nWhilst channels can get data from goroutines in a concurrent and efficient way and thus allow goroutines to have a point of reference and communicate with each other.\\n\\nEverything in Go is executed using goroutines; this makes perfect sense since Go is a concurrent programming language by design. Therefore, when a Go program starts its execution, its single goroutine calls the `main()` function, which starts the actual program execution.\\n\\n> You should never make any assumptions about the order in which your goroutines will be executed.\\n\\nThe Unix kernel scheduler is responsible for the execution of the threads of a program.\\n\\nOn the other hand, the Go runtime has its own scheduler, which is responsible for the execution of the goroutines using a technique known as _m:n scheduling_, where _m_ goroutines are executed using _n_ operating system threads using multiplexing. The Go scheduler is the Go component responsible for _the way, and the order_ in which the goroutines of a Go program get executed. This makes the Go scheduler a really important part of the Go programming language, as everything in a Go program is executed as a goroutine.\\n\\nIt is a very common misconception that _concurrency_ is the same thing as _parallelism_\u2014this is just not true! _Parallelism_ is the _simultaneous execution of multiple entities of some kind_, whereas _concurrency_ is a way of structuring your components so that they _can be executed independently when possible_.\\n\\nIt is only when you build software components concurrently that you can safely execute them in parallel, when and if your operating system, and your hardware permit it. In a valid concurrent design, adding concurrent entities makes the whole system run faster because more things can run in parallel. So, the desired parallelism comes from a better concurrent expression and implementation of the problem. So, the developer should not think about parallelism, but about breaking things into independent components that solve the initial problem when combined.\\n\\nYou can define a new goroutine using the `go` keyword followed by _a function name_ or the full definition of _an anonymous function_. The `go` keyword **makes the function call to return immediately, while the function starts running in the background as a goroutine, and the rest of the program continues its execution**.\\n\\nHowever, you cannot control or make any assumptions about the order in which your goroutines are going to be executed because this depends on the _scheduler of the operating system_, _the Go scheduler_, and _the load of the operating system_.\\n\\nGlance at the package `sync` in goroutine: [goroutinesSync.go](/downloads/code/golang/single-file-execute/goroutinesSync.go).\\n\\n```go\\n// Although both functions implement the same functionality,\\n// their definitions are slightly different.\\n// The difference is created by the `<-` symbol found on\\n// the right of the `chan` keyword in the definition of the `f2()` function.\\n// This denotes that the `c` channel can be used for writing only.\\nfunc f1(c chan int, x int) {\\n  fmt.Println(x)\\n  c <- x\\n}\\n// `c` is send-only\\nfunc f2(c chan<- int, x int) {\\n  fmt.Println(x)\\n  c <- x\\n}\\n\\n// `out` is send-only, `in` is receive-only\\nfunc f1(out chan<- int64, in <-chan int64) {\\n  fmt.Println(x)\\n  fmt.Println(<-out) // invalid\\n  out <- x\\n  in <- x // invalid\\n}\\n// `out`, `in` are bidirectional\\nfunc f2(out chan int64, in chan int64) {\\n  fmt.Println(x)\\n  c <- x\\n}\\n```\\n\\n### scheduler in go\\n\\nGo works using the _m:n scheduler_ (or _M:N scheduler_) that schedules goroutines using OS threads.\\n\\nGo uses the _fork-join concurrency model_. The fork part of the model states that a child branch can be created at any point of a program. Analogously, the join part of the Go concurrency model is where the child branch will end and join with its parent. Among other things, both `sync.Wait()` statements and channels that collect the results of goroutines are join points, whereas any new goroutine creates a child branch.\\n\\nThe _fair scheduling strategy_ shares evenly all the load between the available processors.\\n\\nA goroutine in Go is a _task_, whereas everything after the calling statement of a goroutine is a _continuation_. In the _work stealing strategy_ used by Go scheduler, a (logical) processor that is underutilized looks for additional work from other processors. When it finds such jobs, it steals them from the other processor(s), hence the name, _work stealing strategy_. Additionally, the work-stealing algorithm of Go queues and steals continuations. A _stalling join_ is a point where a thread of execution stalls at a join and starts looking for other work to do. Although both task stealing and continuation stealing have stalling joins, continuations happen more often than tasks; therefore, the Go algorithm works with continuations rather than tasks.\\n\\nThe main disadvantage of continuation stealing is that it requires extra work from the compiler of the programming language. Fortunately, Go provides that extra help and therefore uses _continuation stealing_ in its work-stealing algorithm. One of the benefits of continuation stealing is that you get the same results when using just functions or a single thread with multiple goroutines. This makes perfect sense as only one thing is executed at any given time in both cases.\\n\\nNow, let\'s return back to the _m:n scheduling algorithm_ used in Go.\\n\\nThe Go scheduler works using three main kinds of entities: OS threads (M) that are related to the operating system in use, goroutines (G), and logical processors (P). The number of processors that can be used by a Go program is specified by the `GOMAXPROCS` environment variable\u2014at any given time there are most `GOMAXPROCS` processors.\\n\\nThe following figure illustrates this point:\\n\\n<img src=\\"/images/golang/go-scheduler.png\\" alt=\\"go scheduler\\" />\\n\\nThere are two different kinds of queues: a global queue and a local queue attached to each logical processor.\\n\\nGoroutines from the global queue are assigned to the queue of a logical processor in order to be executed. As a result, the Go scheduler needs to check the global queue in order to avoid executing goroutines that are only located at the local queue of each logical processor. However, the global queue is not checked all the time, which means that it does not have an advantage over the local queues.\\n\\nAdditionally, each logical processor can have multiple threads, and _the stealing occurs between the local queues of the available logical processors_. Finally, keep in mind that the Go scheduler is allowed to create more OS threads when needed. OS threads are pretty expensive, however, which means that dealing with OS threads too much might slow down your Go applications.\\n\\n### select\\n\\nIn practice, this means that `select` allows a goroutine to _wait_ on multiple communications operations. Therefore, the main benefit is that `select` gives you the power to work with multiple channels using a single `select` block. As a consequence, you can have nonblocking operations on channels.\\n\\n> The biggest problem when using multiple channels and the `select` keyword is **deadlocks**, which needs extra care during the design and the development process.\\n\\nYou should checkout the file [selectSimple.go](/downloads/code/golang/single-file-execute/selectSimple.go).\\n\\nThe biggest advantage of `select` is that it can connect and manage multiple channels. As channels connect goroutines, `select` connects channels that connect goroutines. Therefore, the `select` statement is one of the most important part of the Go concurrency model.\\n\\nYou should checkout the file [selectTimeout.go](/downloads/code/golang/single-file-execute/selectTimeout.go), which use `timeout` and `select` to stop or return from goroutine earlier.\\n\\nIf you send a message to a closed channel, the program will _panic_. However, if you try to read from a closed channel, you will get the _zero value_ of the _type_ of that channel. So, after closing a channel, you can no longer write to it, but you can still read from it. Finally, if you try to close a nil channel, your program will panic.\\n\\nIn order to be able to close a channel, the channel must not be receive-only. Additionally, a `nil` channel always blocks, which means that trying to read or write from a `nil` channel will block. This property of channels can be very useful when you want to disable a branch of a select statement by assigning the `nil` value to a channel variable.\\n\\n## buffered channels\\n\\nBuffered channels are channels that allow the Go scheduler to put jobs in the queue quickly in order to be able to deal with more requests.\\n\\nThe technique presented here works as follows: All incoming requests are forwarded to a channel, which processes them one by one. When the channel is done processing a request, it sends a message to the original caller saying that it is ready to process a new one. So, the capacity of the buffer of the channel restricts the number of simultaneous requests that it can keep.\\n\\n## nil channel\\n\\nThe nil channels are a special kind of channel because they will always block.\\n\\nYou can read the usages of _buffered channels_ and _nil channel_ in this list [channelUsages](/downloads/code/golang/single-file-execute/channelUsages.go).\\n\\nAn [example](/downloads/code/golang/single-file-execute/channelInOrder.go) to use channel to ordering some goroutine execution.\\n\\n## Shared Memory and Shared Variables\\n\\nShared memory and shared variables are the most common ways for Unix threads to communicate with each other.\\n\\nA **Mutex** variable, which is an abbreviation for _mutual exclusion_ variable, is mainly used for thread synchronization and for protecting shared data when multiple writes can occur at the same time. A mutex works like a buffered channel of capacity one, which allows at most one goroutine to access a shared variable at any given time. This means that there is no way for two or more goroutines to try to update that variable simultaneously.\\n\\nA **critical section** of a concurrent program is the code that cannot be executed simultaneously by all processes, threads, or, in this case, by all goroutines. It is the code that needs to be protected by mutexes. Therefore, identifying the critical sections of your code will make the whole programming process so much simpler that you should pay attention to this task.\\n\\n> A critical section cannot be embedded in another critical section when both critical sections use the same sync.Mutex or sync.RWMutex variable. Put simply avoid, at almost any cost, spreading mutexes across functions because that makes it really hard to see whether you are embedding or not!\\n\\nA simple [example](/downloads/code/golang/single-file-execute/mutexSimple.go), with a lot of comments, to illustrate the `sync.Mutex` usage.\\n\\nHowever, the programme would fall into deadlock if you forget to unlock `sync.Mutex`, as the [list](/downloads/code/golang/single-file-execute/mutexDeadlocked.go) shows.\\n\\nThe `sync.RWMutex` type is another kind of mutex, to be honest, it is an improved version of `sync.Mutex`. In other words, `sync.RWMutex` is based on `sync.Mutex` with the necessary additions and improvements.\\n\\nAlthough only _one writer_ is allowed to perform write operations using a `sync.RWMutex` mutex, you can have _multiple readers_ owning a `sync.RWMutex` mutex. However, there is one thing of which you should be aware: until _all the readers_ of a `sync.RWMutex` mutex unlock that mutex, you cannot lock it for writing.\\n\\nThe functions that can help you work with a `sync.RWMutex` mutex are **`RLock()`** and **`RUnlock()`**, which are used for locking and unlocking the mutex, respectively, for _reading purposes_.\\n\\nThe `Lock()` and `Unlock()` functions used in a `sync.Mutex` mutex should still be used when you want to lock and unlock a `sync.RWMutex` mutex for _writing purposes_.\\n\\nA simple [example](/downloads/code/golang/single-file-execute/rwMutexSimple.go), with a lot of comments, to illustrate the `sync.RWMutex` usage.\\n\\n## Sharing memory using goroutines\\n\\nAlthough shared memory is the traditional way that threads use to communicate with each other, Go comes with built-in synchronization features that allow a single goroutine to own a shared piece of data. This means that other goroutines must send messages to this single goroutine that owns the shared data, which prevents the corruption of the data.\\n\\nSuch a goroutine is called a **monitor goroutine**. In Go terminology, this is _sharing memory by communicating_ instead of _communicating by sharing memory_.\\n\\n> Simply _sharing memory_ brings us the problems such as race condition, read-write competition. While using _communicating_, using `channel` for example, we are sharing the data / message between goroutines.\\n\\n> That said, Go does provide traditional locking mechanisms in the sync package. Most locking issues can be solved using either channels or traditional locks.\\n>\\n> So which should you use? Use whichever is most expressive and/or most simple.\\n\\nA simple [example](/downloads/code/golang/single-file-execute/goroutinesSharedMemory.go), with a lot of comments, to illustrate how we can implement shared memory among goroutines using goroutine and channels.\\n\\n## Catching race conditions\\n\\nUsing the `-race` flag when running or building a Go source file will turn on the Go **race detector**, which will make the compiler create a modified version of a typical executable file. This modified version can record all accesses to shared variables as well as all synchronization events that take place, including calls to `sync.Mutex` and `sync.WaitGroup`. After analyzing the relevant events, the race detector prints a report that can help you identify potential problems so that you can correct them.\\n\\nA simple [example](/downloads/code/golang/single-file-execute/raceCatch.go), with a lot of comments, to illustrate how we can detect the race condition. Using `sync.Mutex`, we can get rid of the race condition since we locked it.\\n\\n## The context package\\n\\nThe main purpose of the `context` package is to define the `Context` type and support _cancellation_! Yes, you heard that right; the main purpose of the context package is supporting cancellation because there are times that, for some reason, you want to abandon what you are doing. Also, it would be very helpful to be able to include some extra information about your cancelling decisions.\\n\\nThe `Context` type is an interface with four methods, named `Deadline()`, `Done()`, `Err()`, and `Value()`. The good news is that you do not need to implement all of these functions of the `Context` interface\u2014you just need to modify a `Context` variable using functions such as `context.WithCancel()` and `context.WithTimeout()`.\\n\\nA simple [example](/downloads/code/golang/single-file-execute/contextSimple.go), with a lot of comments, to illustrate how we can create a context with `context.Background()`, how the `cancel()` function is called to _cancel_ the context.\\n\\nAn advanced [example](/downloads/code/golang/single-file-execute/contextWithHttp.go), with a lot of comments, to illustrate how we can create a context with `context.Background()`, how the `cancel()` function is called to _cancel_ the `http.Request`.\\n\\n## Worker pool\\n\\nGenerally speaking, a _Worker pool_ is a set of threads that are about to process jobs assigned to them. We replace the threads with goroutines to implement the worker pool. However, threads do not usually die after serving a request because the cost of ending a thread and creating a new one is too high, whereas goroutines do _die_ after finishing their job.\\n\\nAs you will see in the [example](/downloads/code/golang/single-file-execute/workerPool.go), worker pools are implemented with the help of buffered channels, because they allow you to limit the number of goroutines running at the same time.\\n\\nThe [example](/downloads/code/golang/single-file-execute/workerPool.go) will implement a simple task: it will process integer numbers and print their square values using a single goroutine for serving each request.\\n\\n## Code Testing, Optimization, Profiling\\n\\n**Code optimization** is the process where you try to discover the parts of your code that have a big influence on the performance of the entire program in order to make them _run faster_ or _use fewer resources_.\\n\\n> The general advice for optimization is that you must _optimize bug-free code only_.\\n\\n**Profiling** is a process of dynamic program analysis that measures various values related to program execution in order to give you a better understanding on the behavior of your program.\\n\\n> The single most important thing to remember is that if you want to profile Go code, you will need to import the `runtime/pprof` standard Go package, either directly or indirectly. You can find the help page of the pprof tool by executing the `go tool pprof -help` command.\\n\\nGo supports two kinds of profiling: **CPU profiling** and **memory profiling**.\\n\\nTwo examples: [using native package to profile](/downloads/code/golang/single-file-execute/profileMe.go), [using third-party package to profile](/downloads/code/golang/single-file-execute/profileMeBetter.go).\\n\\nGo allows you to write tests for your Go code in order to detect bugs. Strictly speaking, this section is about **automated testing**, which involves writing extra code to verify whether the real code; that is, the production code, works as expected or not. Thus, the result of a test function is either _PASS_ or _FAIL_.\\n\\n> Always put the testing code in a different source file. There is no need to create a huge source file that is hard to read and maintain.\\n\\nAn [example](/downloads/code/golang/single-file-execute/testMe.go) with its [test file](/downloads/code/golang/single-file-execute/testMe_test.go) show how to do some test in Go.\\n\\n## Network Programming\\n\\nSome useful snippets on network programming in go could be found [here](https://github.com/AkatQuas/kiddo-plays/tree/master/golanger/mastering-go-archive/network).\\n\\nYou cannot create a TCP or UDP client or server in Go without using the functionality offered by the `net` package.\\n\\nThe `net.Dial()` function is used for connecting to a network as a client, whereas the `net.Listen()` function is used for telling a Go program to accept network connections and thus act as a server. The first parameter of both functions is the network type, but this is where their similarities end. The return value of both the `net.Dial()` and `net.Listen()` functions is of the `net.Conn` type, which implements the `io.Reader` and `io.Writer` interfaces.\\n\\n### TCP client\\n\\nTCP stands for Transmission Control Protocol, and its principal characteristic is that it is a reliable protocol.\\n\\nThe TCP header of each packet includes _source port_ and _destination port_ fields. These two fields, plus the source and destination IP addresses, are combined to identify uniquely a single TCP connection.\\n\\nExamples: [TCP client 1](/downloads/code/golang/single-file-execute/TCPclient.go), [TCP client 2](/downloads/code/golang/single-file-execute/TCPclient_other.go), [TCP server 1](/downloads/code/golang/single-file-execute/TCPserver.go), [TCP server 2](/downloads/code/golang/single-file-execute/TCPserver_other.go), [TCP server with goroutines](/downloads/code/golang/single-file-execute/TCPserver_goroutine.go), [TCP server 2 with goroutines](/downloads/code/golang/single-file-execute/TCPserver_go_example.go).\\n\\n### UDP client\\n\\nThe biggest difference between UDP and TCP is that UDP is not reliable by design. This also means that in general, UDP is simpler than TCP because UDP does not need to keep the state of a UDP connection.\\n\\nExamples: [UDP client](/downloads/code/golang/single-file-execute/UDPclient.go), [UDP server](/downloads/code/golang/single-file-execute/UDPserver.go).\\n\\n### Remote Procedure Call (RPC)\\n\\nRemote Procedure Call (RPC) is a client-server mechanism for Interprocess communication that uses TCP/IP.\\n\\n## Examples for Closures and Anonymous Goroutines\\n\\n```go\\nvar wg sync.WaitGroup\\nsalutation := \\"hello\\"\\nwg.Add(1)\\ngo func() {\\n  defer wg.Done()\\n  salutation = \\"welcome\\"\\n}()\\nwg.Wait()\\nfmt.Println(salutation) // salutation is modified to \\"welcome\\"\\n```\\n\\n```go\\n// Compile warning: loop variable salutation captured by func literal\\n//\\n// output: the order is non-deterministic, but the salutation is \\"good day\\"\\n// 2 good day\\n// 0 good day\\n// 1 good day\\nvar wg sync.WaitGroup\\nfor i, salutation := range []string{\\"hello\\", \\"greetings\\", \\"good day\\"} {\\n  wg.Add(1)\\n  go func(index int) {\\n    defer wg.Done()\\n    fmt.Println(i, salutation)\\n  }(i)\\n}\\nwg.Wait()\\n```\\n\\nIn the above example, the goroutine is running a closure that has closed over the iteration variable `salutation`, which has a type of `string`. As our loop iterates, `salutation` is being assigned to the next string value in the slice literal. Because the goroutines being scheduled may run at any point in time in the future, it is undetermined what values will be printed from within the goroutine. This means the `salutation` variable falls out of scope. This is an interesting side note about how Go manages memory. The Go runtime is observant enough to know that a reference to the salutation variable is still being held, and therefore will transfer the memory to the heap so that the goroutines can continue to access it.\\n\\nUsually, the _loop_ exits before any _goroutines_ begin running, so salutation is transferred to the heap holding a reference to the last value in the slice, `\\"good day\\"`.\\n\\nThe proper way to write this loop is to pass a copy of `salutation` into the closure so that by the time the goroutine is run, it will be operating on the data from its iteration of the loop.\\n\\n```go\\n// output: order is non-deterministic\\n// hello\\n// good day\\n// greetings\\nvar wg sync.WaitGroup\\nfor _, salutation := range []string{\\"hello\\", \\"greetings\\", \\"good day\\"} {\\n  wg.Add(1)\\n  go func(salutation string) { // declare a parameter, which shadow the original salutation variable\\n    defer wg.Done()\\n    fmt.Println(salutation)\\n  }(salutation) // pass in the current iteration\u2019s variable to the closure\\n}\\nwg.Wait()\\n```"},{"id":"/2020/04/01/fullstack-starter","metadata":{"permalink":"/blog/2020/04/01/fullstack-starter","source":"@site/blog/2020-04-01-fullstack-starter.md","title":"Fullstack Starter Project Boilerplate","description":"\u9879\u76ee\u505a\u7684\u591a\u4e86\uff0c\u6240\u4ee5\u5c31\u62bd\u79bb\u51fa\u6765\u4e00\u4e2a\u5168\u6808\u9879\u76ee\u6a21\u677f\uff0c\u524d\u7aef\u4f7f\u7528 Angualr ( UI \u5e93 \u4f7f\u7528 Ng-Zorro ) \uff0c\u540e\u7aef\u4f7f\u7528 Nest \u3002Project on GitHub.","date":"2020-04-01T00:00:00.000Z","formattedDate":"April 1, 2020","tags":[{"label":"fullstack","permalink":"/blog/tags/fullstack"},{"label":"angular","permalink":"/blog/tags/angular"},{"label":"nest","permalink":"/blog/tags/nest"}],"readingTime":0.64,"hasTruncateMarker":false,"authors":[],"frontMatter":{"title":"Fullstack Starter Project Boilerplate","categories":["frontend"],"tags":["fullstack","angular","nest"]},"prevItem":{"title":"Learn some Golang","permalink":"/blog/2020/09/24/golang"},"nextItem":{"title":"Class Component ?= Function Component &plus; Hooks","permalink":"/blog/2020/02/15/class-fc-hooks"}},"content":"\u9879\u76ee\u505a\u7684\u591a\u4e86\uff0c\u6240\u4ee5\u5c31\u62bd\u79bb\u51fa\u6765\u4e00\u4e2a\u5168\u6808\u9879\u76ee\u6a21\u677f\uff0c\u524d\u7aef\u4f7f\u7528 `Angualr` ( UI \u5e93 \u4f7f\u7528 `Ng-Zorro` ) \uff0c\u540e\u7aef\u4f7f\u7528 `Nest` \u3002[Project on GitHub](https://github.com/AkatQuas/kiddo-plays/tree/master/fullstack-starter).\\n\\n\u6709\u4e00\u4e9b\u597d\u7528\u7684\u811a\u672c\u6765\u5e2e\u52a9\u9879\u76ee\u7684\u8d77\u6b65\u3001\u5f00\u53d1\u3001\u90e8\u7f72\u3002\\n\\n## Foundation\\n\\nThis boilerplate is build on [Angular](https://angular.io/), [Ng-Zorro-Antd](https://ng.ant.design/docs/introduce/en) and [Nest](https://nestjs.com/).\\n\\n## Setup\\n\\n`setup_all.sh` helps to set the development environment up, including:\\n\\n1. [commitizen](https://github.com/commitizen/cz-cli) for git commit message\\n\\n1. [nginx](http://nginx.org/en/download.html) for universal gateway\\n\\n1. [pm2](https://github.com/Unitech/pm2) for develop convenience\\n\\n1. [proxychains4](https://github.com/rofl0r/proxychains-ng) for proxy\\n\\n```bash\\n./setup_all.sh\\n```\\n\\n## Development\\n\\nExecute the `dev_all.sh` to develop.\\n\\n```bash\\n./dev_all.sh\\n```\\n\\n## Build or Deployment\\n\\nUse docker for build. Please check the [DockerFile](https://github.com/AkatQuas/kiddo-plays/blob/master/fullstack-starter/deploy/server/Dockerfile)."},{"id":"/2020/02/15/class-fc-hooks","metadata":{"permalink":"/blog/2020/02/15/class-fc-hooks","source":"@site/blog/2020-02-15-class-fc-hooks.md","title":"Class Component ?= Function Component &plus; Hooks","description":"Disclaimer","date":"2020-02-15T00:00:00.000Z","formattedDate":"February 15, 2020","tags":[{"label":"reactjs","permalink":"/blog/tags/reactjs"}],"readingTime":7.94,"hasTruncateMarker":true,"authors":[],"frontMatter":{"title":"Class Component ?= Function Component &plus; Hooks","categories":["frontend","javascript","reactjs"],"tags":["reactjs"]},"prevItem":{"title":"Fullstack Starter Project Boilerplate","permalink":"/blog/2020/04/01/fullstack-starter"},"nextItem":{"title":"\u4e00\u4e2a\u7b80\u5355\u7684QueryBuilder\u8bbe\u8ba1","permalink":"/blog/2020/02/13/simple-querybuilder"}},"content":"## Disclaimer\\n\\nI haven\'t read all the source code of React as well as understand its functionality very well, so there may be some wrong understandings, feel free to point out and rectify them.\\n\\n## Main Content\\n\\nLong time ago, I came across to [this awesome article](https://blog.webf.zone/contemporary-front-end-architectures-fb5b500b0231) about several architectures used in front end from the beginning of PC.\\n\\n\x3c!--truncate--\x3e\\n\\n<a id=\\"concerns\\"></a>In summary, what the front end mainly concerns are the following things:\\n\\n1. The current data, also known as state,\\n\\n1. The current view, which is user interface,\\n\\n1. Reaction to the user action, such as mutating data, animating the view, even side effects,\\n\\n1. Rendering the view according to the current data, in another phrase, synchronizing the view to the data.\\n\\nIn React, we mainly write two kinds of component: _stateful_ `Class component` and _stateless_ `Function component`. The differences between these two are not only the _state_ maintained by the component, but also the lifecycle events. So what are the lifecycle events?\\n\\nBefore talking about the lifecycle events, we need to understand some basic concepts in React.\\n\\nWhen it comes to rendering, there are three concepts we need to keep in mind, **Component**, **Elements**, **Instances**. [here is the official explanation on their differences](https://reactjs.org/blog/2015/12/18/react-components-elements-and-instances.html).\\n\\n> An **element** is a plain object describing what you want to appear on the screen in terms of the DOM nodes or other components. Elements can contain other elements in their props. Creating a React element is cheap. _Once an element is created, it is never mutated._\\n\\nSo we have to re-create a new element, (indeed, every time when the render function is invoked) if we need to update the DOM nodes. The React helps us to differ elements and patch the differences to the DOM nodes.\\n\\n> A **component** can be declared in different ways. It can be a class with a `render()` method. Alternatively, in simple cases, it can be defined as a function. _In either case, it takes props as an input, and returns an element tree as the output_.\\n\\nA component tells React how to create the elements using props and states, if necessary. But we cannot use the component directly, we need to instantize it.\\n\\n> An **instance** is what you refer to as `this` in the component class you write. _It is useful for storing local state, (local property/method) and reacting to the lifecycle events._\\n>\\n> Function components don\'t have instances at all.\\n>\\n> Class components have instances, but you never need to create a component instance directly\u2014React takes care of this.\\n\\nWhy we have to instantize the Class component?\\n\\nThe function components don\'t need instances because all the data, which used to create elements, can be accessed directly from the function invocation arguments. _It means we don\'t need to create closure to preserve the references._\\n\\nHowever, we need the references to the local state, local property/method when using Class components. We have to instantize an instance of a Class component. The `render` function is one of the local property/method belongs to this instance. So it can access to `this` instance easily.\\n\\n```jsx\\nclass MyComponent extends Component {\\n  constructor(props, context) {\\n    super(props, context);\\n    this.state = {};\\n    this.nonStateProperty = \'non state property\';\\n    this.methodA = this.methodA.bind(this);\\n  }\\n  methodA() {}\\n\\n  render() {}\\n}\\n```\\n\\nThe above codes show how we to bind the local method to the specific instance. The bind statement is necessary in React for that JavaScript has the _magic_ `this`. It\'s implicit the instance is encapsulated as `this` during the runtime. **Believe it or not, it is a special case of closure.**\\n\\nBesides, local state, the Class components have the lifecycle events.\\n\\n> **lifecycle events** are those you can override to run code at particular times in the process.\\n\\n[Summary from the official document](https://reactjs.org/docs/react-component.html#the-component-lifecycle) indicates that when something changes, the lifecycle events would be triggered.\\n\\nHere is list of the types of change and the according lifecycle method, which would help you to understand when the certain lifecycle events will be invoked:\\n\\n- element patched to DOM nodes:\\n\\n  - `componentDidMount`, which is invoked immediately after a component is mounted (inserted into the tree), aka, _null -> new node_.\\n\\n  - `componentDidUpdate`, which is invoked immediately after updating occurs. This method is not called for the initial render, aka, _old node -> new node_.\\n\\n  - `componentWillUnmount`, which is invoked immediately before a component is unmounted and destroyed, aka, _old node -> null_.\\n\\n- props/state updates:\\n\\n  - _static_ `getDerivedStateFromProps`, synchronized function which should return an object to update the state, or null to update nothing.\\n\\n  - _deprecated_ `componentWillReceiveProps`, Use this as an opportunity to perform preparation before an update occurs. This method is not called for the initial render.\\n\\n  - `componentDidUpdate`, after the render function called to create the possible new elements, it will be invoked after updating occurs.\\n\\nBy using the name _lifecycle_, we could imagine that the instances of Class components has a _lifetime_ to span. But, how about Function components, what do they have if they don\'t have lifecycle events?\\n\\nActually, Function components have _lifecycle_ as well. To understand this saying, we have to rethink what the _lifecycle_ really is.\\n\\n_Lifecycle methods are the response action to certain changes and events_.\\n\\nIn simple words, when the state/props changes, we have to re-create elements. But, we could make some actions before, during and after the re-rendering process.\\n\\n```jsx\\nconst FunctionComponent = (props) => {\\n  // doing side effects\\n  return <ComponentTree />;\\n};\\n```\\n\\nBefore hooks come out, we can only make the actions before the re-rendering process. The equivalent lifecycle method is `componentWillReceiveProps`. There is not much we can do after the re-rendering process.\\n\\nHere comes the `useEffect` to rescue. This article, written by Dan, [`A complete guide to useEffect`](https://overreacted.io/a-complete-guide-to-useeffect/), shows how `useEffect` works, specifically, staring from [here](https://overreacted.io/a-complete-guide-to-useeffect/#each-render-has-its-own-effects);\\n\\n```jsx\\nfunction Counter() {\\n  const [count, setCount] = useState(0);\\n\\n  const increment = useCallback(() => {\\n    setCount((c) => c + 1);\\n  }, []);\\n\\n  useEffect(() => {\\n    document.title = `You clicked ${count} times`;\\n  });\\n\\n  return (\\n    <div>\\n      <p>You clicked {count} times</p>\\n      <button onClick={increment}>Click me</button>\\n    </div>\\n  );\\n}\\n```\\n\\n1. **React**: Give me the UI when the state is 0.\\n\\n1. **The component**:\\n\\n   Here\u2019s the render result: `<p>You clicked 0 times</p>`. Also remember to run this _effect_ after you\u2019re done: `() => { document.title = \'You clicked 0 times\' }`.\\n\\n1. **React**: Sure. Updating the UI. Hey browser, I\u2019m adding some stuff to the DOM.\\n\\n1. **Browser**: Cool, I painted it to the screen.\\n\\n1. **React**: OK, now I\u2019m going to run the _effect_ you gave me.\\n\\n   Running `() => { document.title = \'You clicked 0 times\' }`.\\n\\nNow we click the button:\\n\\n1. **The component**: Hey React, set my state to 1.\\n\\n1. **React**: Give me the UI for when the state is 1.\\n\\n1. **The component**:\\n\\nHere\u2019s the render result: `<p>You clicked 1 times</p>`. Also remember to run this _effect_ after you\u2019re done: () => { document.title = \'You clicked 1 times\' }.\\n\\n1. **React**: Sure. Updating the UI. Hey browser, I\u2019ve changed the DOM.\\n\\n1. **Browser**: Cool, I painted your changes to the screen.\\n\\n1. **React**: OK, now I\u2019ll run the _effect_ that belongs to the render I just did.\\n\\n   Running `() => { document.title = \'You clicked 1 times\' }`.\\n\\nThe function defined in the `useEffect` is different on every render, because no dependency is specified.\\n\\nMore generally, effects could:\\n\\n1. run after every render, because it\'s specified by the rendering mechanism\\n\\n1. are conceptually a part of the component output, because it can do some side effects after rendering element.\\n\\n1. \u201csee\u201d the props and state from that particular render, because it creates a closure when creating the effect function.\\n\\n**React synchronizes the DOM according to our current props and state**, it just creates/re-creates elements according to our jsx code. There is no distinction between a \\"mount\\" or an \\"update\\" when rendering.\\n\\nWhilst, **useEffect lets you synchronize things outside of the React tree according to our props and state**. When looking back at, take `componentWillReceiveProps`, `componentDidUpdate` as examples, we used to do these synchronizations in these lifecycle events.\\n\\nSo `useEffect` is not something that replicate the lifecycle events such as `componentDidMount`, and their mental model is closer to implementing synchronization than to responding to lifecycle events. Trying to find effects exact equivalents with lifecycle events may confuse you more than help.\\n\\nIn Class component, we can access to the state by referring to `this` in a instance, _implicit closure_.\\n\\nBy using `useState` in Function components, we also create a closure to encapsulate the state. Also, React ensures the `setState` function stable for the render, still with the help of closure. (So does the `dispatch` generated by `useReducer` as long as the reducer stable.)\\n\\nThe instance methods are bound to `this` instance. Whilst hooks provide us with `useCallback`, which also would create closures to encapsulate the props/state it can access to in the scope.\\n\\nConceptually, the instances of the Class components implicitly create closures for us to keep the reference to the methods, props, state. Whilst, hooks have to do the closure encapsulating since there\'s no instance in Function components.\\n\\n## In the end\\n\\nIs Class component the combination of Function component and hooks?\\n\\nThe answer is no. They both could work very well with their own pros and cons. They are just two means of tackling the above [concerns](#concerns).\\n\\nIt\'s fine to use either of them, as long as it meets your requirements.\\n\\n## Useful Reference\\n\\n1. [A complete guide to useEffect](https://overreacted.io/a-complete-guide-to-useeffect/)\\n\\n1. [Contemporary front end architectures](https://blog.webf.zone/contemporary-front-end-architectures-fb5b500b0231)\\n\\n1. [React\'s useEffect and useRef Explained for Mortals](https://leewarrick.com/blog/react-use-effect-explained/)"},{"id":"/2020/02/13/simple-querybuilder","metadata":{"permalink":"/blog/2020/02/13/simple-querybuilder","source":"@site/blog/2020-02-13-simple-querybuilder.md","title":"\u4e00\u4e2a\u7b80\u5355\u7684QueryBuilder\u8bbe\u8ba1","description":"\u4e1a\u52a1\u9700\u8981\u652f\u6301\u591a\u91cd\u6761\u4ef6\u7684\u7b5b\u9009\uff0c\u6700\u597d\u7684\u5de5\u5177\u5c31\u662f query builder\uff0c\u4e0b\u9762\u4ece\u5e95\u5411\u4e0a\u5730\u7ed9\u51fa\u4e00\u4e2a\u7b80\u5355\u7684 QueryBuilder \u7684\u8bbe\u8ba1\u3002","date":"2020-02-13T00:00:00.000Z","formattedDate":"February 13, 2020","tags":[{"label":"querybuilder","permalink":"/blog/tags/querybuilder"}],"readingTime":4.355,"hasTruncateMarker":true,"authors":[],"frontMatter":{"title":"\u4e00\u4e2a\u7b80\u5355\u7684QueryBuilder\u8bbe\u8ba1","categories":["programming language"],"tags":["querybuilder"]},"prevItem":{"title":"Class Component ?= Function Component &plus; Hooks","permalink":"/blog/2020/02/15/class-fc-hooks"},"nextItem":{"title":"Redux \u6e90\u7801\u8bfb\u540e\u611f","permalink":"/blog/2020/02/10/redux-source-code-impression"}},"content":"\u4e1a\u52a1\u9700\u8981\u652f\u6301\u591a\u91cd\u6761\u4ef6\u7684\u7b5b\u9009\uff0c\u6700\u597d\u7684\u5de5\u5177\u5c31\u662f query builder\uff0c\u4e0b\u9762\u4ece\u5e95\u5411\u4e0a\u5730\u7ed9\u51fa\u4e00\u4e2a\u7b80\u5355\u7684 QueryBuilder \u7684\u8bbe\u8ba1\u3002\\n\\n\u5148\u4ece\u6761\u4ef6 _query_ \u5f00\u59cb\u8003\u8651\uff0c\u8fd9\u4e2a\u6761\u4ef6\u662f _atomic_ \u7684\u8bb0\u505a `Q`\u3002\u6211\u4eec\u9700\u8981\uff1a\\n\\n1. \u4e00\u4e2a `key` \u5b57\u6bb5\uff0c\u7528\u6765\u8868\u793a query \u7684\u7d22\u5f15\u57df\uff0c\uff08\u53ef\u4ee5\u7b80\u5355\u5730\u8ba4\u4e3a\u662f\u5b57\u6bb5\u540d\u79f0\uff0c\u4f46\u662f mongo \u91cc\u9762\u7528\u7684\u662f\u8def\u5f84\uff09\u3002\\n\\n1. \u4e00\u4e2a `operator` \u5b57\u6bb5\uff0c\u8868\u793a \u8fd9\u4e2a\u7d22\u5f15\u8ddf\u540e\u9762\u7684\u503c\u76f4\u63a5\u7528\u4ec0\u4e48\u64cd\u4f5c\u7b26\uff0c\u6570\u503c/\u5b57\u7b26\u4e32/\u6b63\u5219 \u7b49\u5e94\u5f53\u6709\u6240\u4e0d\u540c\u3002\\n\\n1. \u4e00\u4e2a `value` \u5b57\u6bb5\uff0c\u8868\u793a\u524d\u9762 \u7d22\u5f15\u57df \u7684\u754c\u5b9a\u9650\u5ea6\u3002\\n\\n\x3c!--truncate--\x3e\\n\\n\u4f8b\u5982 `key` \u4e3a `name`\uff0c `operator` \u4e3a `!=` \uff0c `value` \u4e3a `Tom` \uff0c\u53ef\u4ee5\u77e5\u9053 _query_ \u7ed3\u679c\u662f `name != \\"Tom\\"`\u3002\\n\\n\u518d\u4f8b\u5982 `key` \u4e3a `age`\uff0c `operator` \u4e3a `>` \uff0c `value` \u4e3a `20` \uff0c\u53ef\u4ee5\u77e5\u9053 _query_ \u7ed3\u679c\u662f `age > 20`\u3002\\n\\n\u5f80\u4e0a\u4e00\u5c42\u62bd\u8c61\uff0c\u591a\u4e2a atomic \u6761\u4ef6\u53ef\u4ee5\u7ecf\u7531\u7edf\u4e00\u7684 \u903b\u8f91 `AND` \u6216\u8005 `OR` \u6784\u5efa\u5f97\u5230\u4e00\u4e2a _queryGroup_\uff0c \u8bb0\u505a `QG`\u3002\\n\\n`QG = Q1 AND Q2 AND Q3 ... AND Qn`\\n\\n\u6216\u8005\\n\\n`QG = Q1 OR Q2 OR Q3 ... OR Qn`\\n\\n\u518d\u5f80\u4e0a\u4e00\u5c42\u62bd\u8c61\uff0c_queryGroup_ \u5141\u8bb8\u5d4c\u5957\uff0c\u4f46\u662f\u5728\u5d4c\u5957\u7684\u540c\u4e00\u5c42\u6b21\u5185\uff0c\u53ea\u80fd\u9009\u4e00\u4e2a\u903b\u8f91\u64cd\u4f5c\u7b26\u6765\u8fdb\u884c\u7efc\u5408\uff0c \u8bb0\u505a `QG`\u3002\\n\\n`QGX = QG1 AND QG2 AND QG3 ... AND QGn`\\n\\n\u6216\u8005\\n\\n`QGX = QG1 OR QG2 OR QG3 ... OR QGn`\\n\\n\u663e\u7136\u8fd9\u662f\u6a21\u5f0f\u7684\u9012\u5f52\u63cf\u8ff0\u7684\u4e00\u4e2a\u4f8b\u5b50\u3002\\n\\n\u90a3\u4e48\uff0c \u4e09\u4e2a `QG` \u4e4b\u95f4\u7528\u4e0d\u540c\u7684\u903b\u8f91\u64cd\u4f5c\u7b26\u600e\u4e48\u505a\u7ec4\u5408\uff1f\\n\\n\u8fd9\u5c31\u9700\u8981\u5b9a\u4e49\u597d `AND` \u548c `OR` \u7684\u4f18\u5148\u7ea7\u987a\u5e8f\u3002\u53c2\u7167\u4ee3\u6570\u57fa\u672c\u56db\u5219\u8fd0\u7b97\uff0c \u53ef\u9009\u53d6 \u5de6\u7ed3\u5408 \u7279\u6027\uff0c `AND` \u548c `OR` \u662f\u540c\u4f18\u5148\u7ea7\u7684\u3002\\n\\n\u8ba9\u6211\u4eec\u6765\u89e3\u6790\u4e0b\u9762\u7684\u8868\u8fbe\u5f0f\\n\\n`QGX = QG1 AND QG2 OR QG3`\\n\\n\u7531\u64cd\u4f5c\u7b26\u4f18\u5148\u7ea7\u53ef\u4ee5\u5148\u5bf9 `QG1` \u548c `QG2` \u505a\u8ba1\u7b97 \uff0c `QG4 = QG1 AND QG2`\uff0c \u7136\u540e\u518d\u8ddf `QG3` \u505a `AND` \u8ba1\u7b97\uff0c `QGX = QG4 OR QG3`\u3002\\n\\n\u540c\u6837\u7684\uff0c\u5f15\u5165\u5c0f\u62ec\u53f7 `()`\uff0c \u62ec\u53f7\u5185\u7684\u8ba1\u7b97\u4f18\u5148\u7ea7\u9ad8\u4e8e \u5de6\u7ed3\u5408\u3002\\n\\n\u8868\u8fbe\u5f0f\\n\\n`QGX = QG1 AND ( QG2 OR QG3 )`\\n\\n\u53ef\u4ee5\u5148\u89e3\u6790\u62ec\u53f7\u5185\u7684\u7ed3\u679c\u4e3a `QG4 = QG2 OR QG3`\uff0c\u7136\u540e\u5bf9\u5916\u5c42\u505a\u8ba1\u7b97\uff0c `QGX = QG1 AND QG4`\u3002\\n\\n\u7406\u8bba\u4e0a\u6765\u770b\uff0c_queryGroup_ \u53ef\u4ee5\u662f\u65e0\u9650\u5d4c\u5957\u3002\\n\\n\u5f15\u7533\u5730\uff0c\u4e00\u4e2a\u6570\u636e\u5e93\u5982\u4f55\u67e5\u8be2\u591a\u91cd\u5d4c\u5957\u7684\u641c\u7d22\u6761\u4ef6\uff1f\\n\\n\u5728\u6ca1\u6709\u7d22\u5f15\u7684\u60c5\u51b5\u4e0b\uff0c\u9700\u8981\u8fdb\u884c\u6240\u6709\u6761\u76ee\u7684\u5b8c\u5168\u904d\u5386\uff0c\u5bf9\u6bcf\u4e2a\u6240\u9700\u7684\u6761\u4ef6\u8fdb\u884c\u68c0\u9a8c\u3002\u8fd9\u91cc\u6709\u4e00\u70b9\u7ec6\u8282\uff0c\u6709\u4e24\u79cd\u7b80\u5355\u7684\u67e5\u8be2\u65b9\u5f0f\\n\\n1. \u5c06\u6574\u4e2a\u6761\u4ef6\u96c6\u5408\u5bf9\u6761\u76ee\u8fdb\u884c\u68c0\u9a8c\uff0c\\n\\n1. \u5148\u5c06\u6761\u4ef6\u7ec4\u62c6\u5c01\uff0c\u6bcf\u4e2a\u6761\u4ef6\u5b50\u7ec4\u8fdb\u884c\u68c0\u9a8c\uff0c\u7136\u540e\u5bf9\u5b50\u7ec4\u7684\u68c0\u9a8c\u7ed3\u679c\u518d\u6b21\u8fdb\u884c\u4e00\u4e2a\u4ea4\u5e76\u8ba1\u7b97\u3002\\n\\n\u5f88\u663e\u7136\u7684\uff0c\u65e0\u8bba\u54ea\u79cd\u65b9\u5f0f\uff0c\u5bf9\u4e8e\u96c6\u5408\u5185\u6240\u6709\u6761\u76ee\u7684\u904d\u5386\u662f\u4e0d\u53ef\u5c11\u7684\uff0c\u533a\u522b\u5728\u4e8e\u4e00\u4e2a\u5e38\u6570\u9879\uff0c\u56e0\u6b64\u9700\u8981\u5c3d\u53ef\u80fd\u5730\u964d\u4f4e\u8fd9\u4e2a\u5f85\u904d\u5386\u96c6\u5408\u7684\u603b\u6761\u76ee\u6570\u91cf\u3002\\n\\n\u53e6\u4e00\u5404\u65b9\u9762\u5c31\u662f\u4f18\u5316 _query_ \u8bed\u53e5\uff0c\u8f6c\u5316\u4e3a\u7b49\u4ef7\u5f62\u5f0f\u7684 _query_ \u8bed\u53e5\uff0c\u4ee5\u63d0\u9ad8\u67e5\u8be2\u6027\u80fd\u3002 \u8fd9\u5757\u53ef\u4ee5\u9605\u8bfb\u76f8\u5173 SQL \u8bed\u53e5\u4f18\u5316\u3002\\n\\n\u6700\u540e\u5f53\u7136\u662f\u5f15\u5165\u7d22\u5f15\u4e86\u3002\\n\\n\u989d\u5916\u7684\uff0c\u6570\u636e\u5b58\u50a8\u53ef\u4ee5\u8003\u8651\u6811\u7684\u5f62\u5f0f\uff0c\u4e24\u79cd\u57fa\u672c\u6570\u636e\u7ed3\u6784\\n\\n```\\nQueryGroup {\\n  operator: AND | OR;\\n  children: Array<QueryGroup | Query>\\n}\\n\\nQuery {\\n  operator: == | != | < | > | >= | <= | LIKE | $in | $nin ...\\n  key: string;\\n  value: any;\\n}\\n```\\n\\n\u6700\u540e\u7684\u6bcf\u4e2a atomical _query_ \u5219\u9700\u8981\u6839\u636e\u4e0d\u540c\u7684\u503c\u7c7b\u578b\u63d0\u4f9b\u4e0d\u540c\u7684\u64cd\u4f5c\u7b26\u3002\\n\\n\u4e00\u4e9b\u524d\u7aef\u7ec4\u4ef6\u5e93\uff1a\\n\\n[Angular QueryBuilder](https://github.com/zebzhao/Angular-QueryBuilder)\\n\\n[react awesome query builder](https://github.com/ukrbublik/react-awesome-query-builder)"},{"id":"/2020/02/10/redux-source-code-impression","metadata":{"permalink":"/blog/2020/02/10/redux-source-code-impression","source":"@site/blog/2020-02-10-redux-source-code-impression.md","title":"Redux \u6e90\u7801\u8bfb\u540e\u611f","description":"redux version is 4.0.5.","date":"2020-02-10T00:00:00.000Z","formattedDate":"February 10, 2020","tags":[{"label":"reactjs","permalink":"/blog/tags/reactjs"},{"label":"redux","permalink":"/blog/tags/redux"}],"readingTime":15.68,"hasTruncateMarker":true,"authors":[],"frontMatter":{"title":"Redux \u6e90\u7801\u8bfb\u540e\u611f","categories":["frontend","javascript","reactjs"],"tags":["reactjs","redux"]},"prevItem":{"title":"\u4e00\u4e2a\u7b80\u5355\u7684QueryBuilder\u8bbe\u8ba1","permalink":"/blog/2020/02/13/simple-querybuilder"},"nextItem":{"title":"Depth in Event loop","permalink":"/blog/2019/12/11/depth-in-event-loop"}},"content":"> redux version is 4.0.5.\\n\\n`redux` \u672c\u8eab\u7684\u8bbe\u8ba1\u5f88\u7b80\u5355\uff0c\u4e3b\u8981\u662f\u901a\u8fc7 _pure function_ \u6765\u6539\u53d8 `store` \u91cc\u9762 `state` \u7684\u503c\u3002\\n\\n[source code](https://github.com/reduxjs/redux/blob/v4.0.5/src/createStore.js)\\n\\n```javascript\\n// \u6bcf\u4e00\u6b21\u5728\u7ec4\u4ef6\u5c42\u9762\u6216\u8005 store \u76f4\u63a5\u8c03\u7528 `dispatch`\\n// \u7ecf\u8fc7\u76f8\u5173\u4e2d\u95f4\u4ef6\u7684\u6267\u884c\u4e4b\u540e\uff0c\u6700\u540e\u7684\u51fd\u6570\u4f1a\u5230\u8fd9\u91cc\\nfunction dispatch(action) {\\n  // \u4e00\u4e9b\u9519\u8bef\u5224\u65ad\uff0c\u9884\u9632\u673a\u5236\\n  if (!isPlainObject(action)) {\\n    throw new Error(\\n      \'Actions must be plain objects. \' +\\n        \'Use custom middleware for async actions.\'\\n    );\\n  }\\n\\n  if (typeof action.type === \'undefined\') {\\n    throw new Error(\\n      \'Actions may not have an undefined \\"type\\" property. \' +\\n        \'Have you misspelled a constant?\'\\n    );\\n  }\\n\\n  if (isDispatching) {\\n    throw new Error(\'Reducers may not dispatch actions.\');\\n  }\\n\\n  try {\\n    isDispatching = true;\\n    // pure function \u66f4\u65b0 state\\n    currentState = currentReducer(currentState, action);\\n  } finally {\\n    isDispatching = false;\\n  }\\n\\n  // subscribed \u7684\u56de\u8c03\u5728\u8fd9\u91cc\u89e6\u53d1\\n  // ...\\n\\n  return action;\\n}\\n```\\n\\n\x3c!--truncate--\x3e\\n\\n\u8fdb\u4e00\u6b65\u5730\uff0c\u662f\u6574\u4e2a\u5bf9\u8c61\u7684\u6574\u4f53\u66ff\u6362\uff0c\u751a\u81f3\u5bf9\u4e8e `combineReducers` \u4e4b\u540e\u7684\u5de8\u5927 `state` \u4f9d\u7136\u662f\u901a\u8fc7\u904d\u5386\u6574\u4e2a `state` \u7684\u6bcf\u4e00\u4e2a _subState_ \u6765\u8fdb\u884c `action` \u7684 `dispatch`\u3002\u7406\u60f3\u6765\u770b\uff0c\u53ea\u6709\u4e9b\u8bb8\u7684\u5b58\u50a8\u5f00\u9500\uff0c\u4f46\u662f\u6bcf\u4e00\u6b65\u7684\u8fd0\u884c\u5f00\u9500\u662f\u4e0d\u53ef\u907f\u514d\u7684\u3002\\n\\n[source code](https://github.com/reduxjs/redux/blob/v4.0.5/src/combineReducers.js)\\n\\n```typescript\\n// \u5408\u5e76\u4e4b\u540e\u7684\u4e00\u4e2a reducer\uff0c\u4e5f\u662f\u4e2a pure function\\nfunction combination(\\n  state: StateFromReducersMapObject<typeof reducers> = {},\\n  action: AnyAction\\n) {\\n  // ...\\n  // \u4e00\u4e9b\u9519\u8bef\u68c0\u6d4b\\n  // ...\\n\\n  let hasChanged = false;\\n  const nextState: StateFromReducersMapObject<typeof reducers> = {};\\n  // \u904d\u5386\uff0c\u7136\u540e\u90a3\u76f8\u5e94\u7684 reducer \u6765\u6267\u884c action\\n  for (let i = 0; i < finalReducerKeys.length; i++) {\\n    const key = finalReducerKeys[i];\\n    const reducer = finalReducers[key];\\n    const previousStateForKey = state[key];\\n    const nextStateForKey = reducer(previousStateForKey, action);\\n    if (typeof nextStateForKey === \'undefined\') {\\n      const errorMessage = getUndefinedStateErrorMessage(key, action);\\n      throw new Error(errorMessage);\\n    }\\n    nextState[key] = nextStateForKey;\\n    hasChanged = hasChanged || nextStateForKey !== previousStateForKey;\\n  }\\n  hasChanged =\\n    hasChanged || finalReducerKeys.length !== Object.keys(state).length;\\n\\n  // \u5982\u679c\u6709\u53d8\u5316\uff0c\u4f1a\u8fd4\u56de\u4e00\u4e2a\u5168\u65b0\u7684\u5bf9\u8c61\u5f15\u7528\\n  return hasChanged ? nextState : state;\\n}\\n```\\n\\n\u53e6\u5916 `redux` \u63d0\u4f9b\u4e86\u4e00\u79cd`\u8ba2\u9605`\u6a21\u5f0f\uff0c\u5f62\u5982 `store.subscribe(callback)`\uff0c\u8fd9\u4e9b `callback` \u4f1a\u88ab\u5b58\u50a8\u5230\u4e00\u4e2a\u79c1\u6709\u7684\u56de\u8c03\u51fd\u6570\u6570\u7ec4 `listeners` \u91cc\u9762\u3002\\n\\n[source code](https://github.com/reduxjs/redux/blob/v4.0.5/src/createStore.js)\\n\\n```typescript\\nfunction ensureCanMutateNextListeners() {\\n  if (nextListeners === currentListeners) {\\n    nextListeners = currentListeners.slice();\\n  }\\n}\\n\\nfunction subscribe(listener: () => void) {\\n  /// ...\\n  // \u9519\u8bef\u68c0\u6d4b\\n  // ...\\n\\n  let isSubscribed = true;\\n\\n  ensureCanMutateNextListeners();\\n  // \u63d2\u5165\u56de\u8c03\u6570\u7ec4\\n  nextListeners.push(listener);\\n\\n  // \u8fd4\u56de unsubscribe \u51fd\u6570\uff0c\u89e3\u9664\u76d1\u542c\\n  return function unsubscribe() {\\n    if (!isSubscribed) {\\n      return;\\n    }\\n\\n    if (isDispatching) {\\n      throw new Error(\\n        \'You may not unsubscribe from a store listener while the reducer is executing. \' +\\n          \'See https://redux.js.org/api-reference/store#subscribelistener for more details.\'\\n      );\\n    }\\n\\n    isSubscribed = false;\\n\\n    ensureCanMutateNextListeners();\\n    const index = nextListeners.indexOf(listener);\\n    nextListeners.splice(index, 1);\\n    currentListeners = null;\\n  };\\n}\\n```\\n\\n\u5f53\u6bcf\u4e00\u6b21 `store` \u8fdb\u884c\u5730 `dispatch` \u4e00\u6b21\u6210\u529f\u7684 `action` \u4e4b\u540e\uff0c\uff08\u65e0\u8bba `state` \u662f\u5426\u53d1\u751f\u4e86\u53d8\u5316\uff09\uff0c\u90fd\u4f1a\u5bf9\u4e0a\u8ff0\u7684 `listener` \u8fdb\u884c\u904d\u5386\uff0c\u8c03\u7528\u6bcf\u4e00\u4e2a\u51fd\u6570\u3002\u56e0\u6b64\uff0c\u56de\u8c03\u51fd\u6570\u91cc\u9762\u8981\u663e\u793a\u7684\u68c0\u67e5\u4e00\u4e0b\u4e24\u6b21 `state` \u662f\u5426\u4e00\u81f4\u3002\uff08`react-redux` \u91cc\u9762\u7684 `Provider` \u5c31\u8fd9\u4e48\u505a\u7684\u3002\uff09\\n\\n[source code](https://github.com/reduxjs/redux/blob/v4.0.5/src/createStore.js)\\n\\n```typescript\\nfunction dispatch(action) {\\n  // ...\\n  try {\\n    isDispatching = true;\\n    // pure function \u66f4\u65b0 state\\n    currentState = currentReducer(currentState, action);\\n  } finally {\\n    isDispatching = false;\\n  }\\n\\n  //  \u6267\u884c\u4e86dispatch\\n  // \u65e0\u8bba state \u662f\u5426\u53d1\u751f\u6539\u53d8\\n\\n  // subscribed \u7684\u56de\u8c03\u5728\u8fd9\u91cc\u89e6\u53d1\\n  const listeners = (currentListeners = nextListeners);\\n  for (let i = 0; i < listeners.length; i++) {\\n    const listener = listeners[i];\\n    listener();\\n  }\\n\\n  return action;\\n}\\n```\\n\\n\u989d\u5916\u7684\uff0c`redux` \u63d0\u4f9b\u4e86 `middleware`\uff0c\u5141\u8bb8\u5728\u6267\u884c\u771f\u6b63\u7684 `action` _mutation_ \u4e4b\u524d\uff0c\u8fdb\u884c\u5176\u4ed6\u5f62\u5f0f\u7684\u51fd\u6570\u8c03\u7528\uff0c\u5e38\u89c1\u7684\u6709\u5f02\u6b65\u64cd\u4f5c\u3002\\n\\n`compose` \u7684\u5b9e\u73b0\u4ee3\u7801\u6bd4\u8f83\u5de7\u5999\uff0c\u8ddf `koa-compose` \u53ef\u4ee5\u76f8\u63d0\u5e76\u8bba\uff0c\u503c\u5f97\u597d\u597d\u5206\u6790\u3002\u6e90\u7801\u91cc\u8fd8\u5b9a\u4e49\u4e86\u8bb8\u591a\u53c2\u6570\u60c5\u5f62\u4e0b `compose` \u7684\u8868\u73b0\u3002\\n\\n[source code](https://github.com/reduxjs/redux/blob/v4.0.5/src/compose.js)\\n\\n```typescript\\nfunction compose(...funcs: Function[]) {\\n  if (funcs.length === 0) {\\n    return <T>(arg: T) => arg;\\n  }\\n\\n  if (funcs.length === 1) {\\n    return funcs[0];\\n  }\\n\\n  // \u6bcf\u6b21\u8fd4\u56de\u53e6\u4e00\u4e2a\u51fd\u6570\uff0c\\n  // \u6309\u5e8f\u6267\u884c\\n  return funcs.reduce((a, b) => (...args: any[]) => a(b(...args)));\\n}\\n```\\n\\n\u4e3a\u4e86\u52a0\u6df1\u7406\u89e3\uff0c\u6700\u540e\u4e00\u4e2a\u8fd4\u56de\u8868\u8fbe\u5f0f\u7ffb\u8bd1\u5982\u4e0b\uff0c\u6700\u7ec8\u5f62\u6210\u4e00\u4e2a\u5d4c\u5957\u591a\u5c42\u7684\u51fd\u6570\uff1a\\n\\n```javascript\\nfuncs.reduce(function (a, b) {\\n  return function middle() {\\n    return a(b.apply(void 0, arguments));\\n  };\\n});\\n```\\n\\n## React \u548c Redux\\n\\n`redux` \u548c `react` \u4e00\u8d77\u4f7f\u7528\u7684\u65f6\u5019\uff0c\u8981\u501f\u52a9 `react-redux` \u7684\u5e2e\u5fd9\u3002\u539f\u56e0\u662f\u5728 `store` \u91cc\u9762\u7684 `state` \u66f4\u65b0\u4e4b\u540e\uff0c\u8981\u89e6\u53d1 `react` *\u76f8\u5173\u7ec4\u4ef6*\u7684\u66f4\u65b0\u3002\\n\\n### react-redux v6.x\\n\\n\u5728 v6.x \u7684\u4ee3\u7801\u4e2d\uff0c\\n\\n`connect` \u662f `react-redux` \u63d0\u4f9b\u7684\u5c01\u88c5\u8fc7\u7684\u9ad8\u9636\u7ec4\u4ef6 _HOC_\uff0c\u4e3b\u8981\u529f\u80fd\u662f\u4ece `store` \u91cc\u9762 `state` \u548c `dispatch` \u8fdb\u884c\u76f8\u5173 `props` \u7684\u6ce8\u5165\u3002\\n\\n[source code](https://github.com/reduxjs/react-redux/blob/v6.0.1/src/connect/connect.js)\\n\\n```javascript\\nfunction connect(\\n  mapStateToProps, // \u7ecf\u5e38\u4f7f\u7528\u7684\u4ece store \u91cc\u9762\u8bfb\u53d6 state \u6570\u636e\u7684\u6ce8\u5165\\n  mapDispatchToProps, // dispatch \u51fd\u6570\u7684\u6ce8\u5165\\n  mergeProps,\\n  {\\n    pure = true,\\n    areStatesEqual = strictEqual,\\n    areOwnPropsEqual = shallowEqual,\\n    areStatePropsEqual = shallowEqual,\\n    areMergedPropsEqual = shallowEqual,\\n    ...extraOptions\\n  } = {}\\n) {\\n  const initMapStateToProps = match(\\n    mapStateToProps,\\n    mapStateToPropsFactories,\\n    \'mapStateToProps\'\\n  );\\n  const initMapDispatchToProps = match(\\n    mapDispatchToProps,\\n    mapDispatchToPropsFactories,\\n    \'mapDispatchToProps\'\\n  );\\n  const initMergeProps = match(mergeProps, mergePropsFactories, \'mergeProps\');\\n\\n  // selectorFactory \u5c31\u662f\u5b9e\u9645\u4e0a\u7528\u5230\u7684\u7ec4\u4ef6\uff0c\\n  // \u540e\u9762\u7684\u53c2\u6570\u90fd\u662f\u4e00\u822c\u90fd\u662f\u539f\u6709 \u95ed\u5305 \u4e2d\u5e26\u8fdb\u6765\u7684\u9ed8\u8ba4\u503c\uff0c\\n  // \u5f53\u7136\u53ef\u4ee5\u5728 connect \u7684\u8c03\u7528\u65f6\u4f20\u8fdb\u6765\\n  return connectHOC(selectorFactory, {\\n    methodName: \'connect\',\\n\\n    getDisplayName: (name) => `Connect(${name})`,\\n\\n    shouldHandleStateChanges: Boolean(mapStateToProps),\\n\\n    initMapStateToProps,\\n    initMapDispatchToProps,\\n    initMergeProps,\\n    pure,\\n    areStatesEqual,\\n    areOwnPropsEqual,\\n    areStatePropsEqual,\\n    areMergedPropsEqual,\\n\\n    ...extraOptions,\\n  });\\n}\\n```\\n\\n\u9ed8\u8ba4\u7684 [connectHOC](https://github.com/reduxjs/react-redux/blob/v6.0.1/src/components/connectAdvanced.js).\\n\\n\u4f46\u662f `connect` \u672c\u8eab\u9f20\u6ca1\u6709\u6d89\u53ca\u6ce8\u518c `store` \u53d8\u5316\u7684\u76d1\u542c\u54cd\u5e94\uff0c\u56e0\u6b64\u5355\u5355\u4e00\u4e2a `connect` \u662f\u4e0d\u591f\u7684\uff0c\u4e8e\u662f `react-redux` \u8fd8\u63d0\u4f9b\u4e86 `Provider`\uff0c\u4e00\u4e2a\u7528\u4e8e\u6839\u7ec4\u4ef6\u5305\u88c5\u7684\u7ec4\u4ef6\u3002\\n\\n`Provider` \u672c\u8eab\u4e5f\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u7ec4\u4ef6\uff0c\u5b83\u4e3b\u8981\u505a\u4e86\u4e00\u4ef6\u4e8b\u60c5\uff0c\u5373\u5bf9 `store` \u8fdb\u884c\u4e86\u4e00\u6b21\u76d1\u542c\uff0c\u7136\u540e\u8c03\u7528 `setState`\uff0c\u4ee5\u6b64\u5f00\u59cb\uff0c\u89e6\u53d1\u4e86 `react` \u7ec4\u4ef6\u7684\u66f4\u65b0\u3002\u4e00\u822c\u800c\u8a00\uff0c\u8fd9\u4e2a `Provider` \u662f\u6574\u4e2a\u7ec4\u4ef6\u6811\u7684\u6839\uff0c\u4ece\u8fd9\u91cc\u5f00\u59cb\uff0c\u4f1a\u89e6\u53d1\u6574\u68f5\u7ec4\u4ef6\u6811\u7684\u66f4\u65b0\uff0c\u90a3\u4e9b\u7528\u4e86 `connect` \u5305\u88f9\u7684\u7ec4\u4ef6\u540c\u65f6\u5c31\u4f1a\u53d6\u5f97\u6700\u65b0\u7684 `store` \u91cc\u9762\u7684\u72b6\u6001\u503c\uff0c\u56e0\u6b64\u8fbe\u5230\u4e86\u66f4\u65b0\u7684\u7ed3\u679c\u3002\\n\\n[source code](https://github.com/reduxjs/react-redux/blob/master/src/components/Provider.js)\\n\\n```javascript\\nclass Provider extends Component {\\n  constructor(props) {\\n    super(props);\\n\\n    const { store } = props;\\n\\n    this.state = {\\n      storeState: store.getState(),\\n      store,\\n    };\\n  }\\n\\n  componentDidMount() {\\n    this._isMounted = true;\\n    this.subscribe();\\n  }\\n\\n  componentWillUnmount() {\\n    if (this.unsubscribe) this.unsubscribe();\\n\\n    this._isMounted = false;\\n  }\\n\\n  componentDidUpdate(prevProps) {\\n    if (this.props.store !== prevProps.store) {\\n      if (this.unsubscribe) this.unsubscribe();\\n\\n      this.subscribe();\\n    }\\n  }\\n\\n  subscribe() {\\n    const { store } = this.props;\\n\\n    // \u6ce8\u518c\uff0c\u5f53 store \u91cc\u9762 state \u53d8\u5316\u65f6\uff0c\u8fdb\u884c re-render\\n    this.unsubscribe = store.subscribe(() => {\\n      const newStoreState = store.getState();\\n\\n      if (!this._isMounted) {\\n        return;\\n      }\\n\\n      this.setState((providerState) => {\\n        // If the value is the same, skip the unnecessary state update.\\n        if (providerState.storeState === newStoreState) {\\n          return null;\\n        }\\n\\n        return { storeState: newStoreState };\\n      });\\n    });\\n\\n    // Actions might have been dispatched between render and mount - handle those\\n    const postMountStoreState = store.getState();\\n    if (postMountStoreState !== this.state.storeState) {\\n      this.setState({ storeState: postMountStoreState });\\n    }\\n  }\\n\\n  render() {\\n    const Context = this.props.context || ReactReduxContext;\\n\\n    return (\\n      <Context.Provider value={this.state}>\\n        {this.props.children}\\n      </Context.Provider>\\n    );\\n  }\\n}\\n```\\n\\n### react-redux v7.x\\n\\nv7.x \u7684\u7248\u672c\u4e2d\uff0c\u7ec4\u4ef6\u7684\u57fa\u672c\u90fd\u7528 `hooks` \u76f8\u5173 API \u8fdb\u884c\u4e86\u91cd\u6784\uff0c\u628a\u4e0a\u8ff0\u7684\u53d8\u5316\u8fdb\u884c\u4e86\u8c03\u6574\uff0c\u53ef\u4ee5\u505a\u5230\u5728\u6839\u7ec4\u4ef6 `Provider` \u5b9e\u4f8b\u4e00\u4e2a\u6839\u7ea7\u8ba2\u9605\u5668\uff0c\u7136\u540e\u5728 `connect` \u7684 HOC \u91cc\u9762\u8fdb\u884c\u5d4c\u5957\u8ba2\u9605\uff0c\u8fbe\u5230\u4e86\u5728\u7ec4\u4ef6\u5c42\u7ea7\u7684 re-render\uff0c\u5c31\u4e0d\u5fc5\u4ece\u6839\u7ec4\u4ef6\u91cd\u65b0\u6e32\u67d3\u4e86\u3002\\n\\n[source code](https://github.com/reduxjs/react-redux/blob/v7.1.3/src/components/Provider.js)\\n\\n```javascript\\n// \u7528\u4e86 hooks \u4e4b\u540e\u5c31\u53d8\u6210\u4e86\u4e00\u4e2a stateless \u7ec4\u4ef6\\n// react-redux \u5b9e\u73b0\u4e86\u4e00\u4e2a\u7b80\u5355\u7684\u8ba2\u9605\u5668\uff0c\u56e0\u4e3a\u8981\u7ef4\u62a4 useEffect \u526f\u4f5c\u7528\u53d8\u5316\u5e26\u6765\u7684 \u53d6\u6d88/\u91cd\u65b0 \u8ba2\u9605\u673a\u5236\u3002\\nfunction Provider({ store, context, children }) {\\n  // \u4e00\u822c\u6765\u8bf4\uff0cstore \u662f\u4e0d\u53d8\u7684\uff0c\\n  // contextValue \u4e5f\u662f\u4e0d\u53d8\u7684\\n  const contextValue = useMemo(() => {\\n    const subscription = new Subscription(store);\\n    subscription.onStateChange = subscription.notifyNestedSubs;\\n    return {\\n      store,\\n      subscription,\\n    };\\n  }, [store]);\\n\\n  // \u4e00\u822c\u6765\u8bf4\uff0c store \u4e0d\u53d8\uff0c previousState \u4e5f\u662f\u4e0d\u53d8\u7684\\n  const previousState = useMemo(() => store.getState(), [store]);\\n\\n  useEffect(() => {\\n    const { subscription } = contextValue;\\n    subscription.trySubscribe();\\n\\n    if (previousState !== store.getState()) {\\n      // \u5982\u679c store \u6574\u4e2a\u66f4\u65b0\u4e86\uff0c\u81ea\u7136\u8981\u901a\u77e5\u4e0b\u9762\u7684\u7ec4\u4ef6\u66f4\u65b0\u3002\u6574\u4f53 re-render\\n      subscription.notifyNestedSubs();\\n    }\\n    return () => {\\n      subscription.tryUnsubscribe();\\n      subscription.onStateChange = null;\\n    };\\n  }, [contextValue, previousState]);\\n\\n  const Context = context || ReactReduxContext;\\n\\n  return <Context.Provider value={contextValue}>{children}</Context.Provider>;\\n}\\n```\\n\\n`connectHOC` \u7684\u4ee3\u7801\u6bd4\u8f83\u590d\u6742\uff0c\u6bd4\u8f83\u7e41\u91cd\uff0c\u4f46\u603b\u4f53\u4e0a\u8fd8\u662f\u4e3a\u4e86\u5904\u7406 \u6570\u636e\u4ece `store` \u4e2d\u7684\u83b7\u53d6\uff0c\u4ee5\u53ca\u6ce8\u518c `state` \u66f4\u65b0\u7684\u54cd\u5e94\u4e8b\u4ef6\u3002\u5176\u5b9e\u4ece\u8fd9\u4e2a\u5730\u65b9\u6765\u770b\uff0c `react-redux` \u5bf9\u4e8e `store` \u7684\u5904\u7406\u5e76\u4e0d\u7b80\u6d01\u660e\u4e86\uff0c\u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u54cd\u5e94\u66f4\u65b0\u95ee\u9898\uff0c\u80af\u5b9a\u662f\u4ed8\u51fa\u4e86\u5f88\u591a\u52aa\u529b\u3002\\n\\n[connectHOC source](https://github.com/reduxjs/react-redux/blob/v7.1.3/src/components/connectAdvanced.js)\\n\\n```javascript\\nfunction connectAdvanced(\\n  selectorFactory,\\n  // options object:\\n  {\\n    // ...\\n  } = {}\\n) {\\n  // \u9519\u8bef\u68c0\u67e5\\n\\n  const Context = context;\\n\\n  // \u8fd4\u56de\u5305\u88c5\u540e\u7684\u7ec4\u4ef6\\n  return function wrapWithConnect(WrappedComponent) {\\n    // ... \u4e00\u4e9b\u6570\u636e\u51c6\u5907\uff0c\u914d\u7f6e\u9879\u53c2\u6570\u7b49\\n\\n    function ConnectFunction(props) {\\n      const ContextToUse = useMemo(() => {\\n        // Users may optionally pass in a custom context instance to use instead of our ReactReduxContext.\\n        // Memoize the check that determines which context instance we should use.\\n        return propsContext &&\\n          propsContext.Consumer &&\\n          isContextConsumer(<propsContext.Consumer />)\\n          ? propsContext\\n          : Context;\\n      }, [propsContext, Context]);\\n\\n      // \u627e\u5230\u76f8\u5173\u7684 context\uff0c\u4ee5\u4fbf\u627e\u5230\u4e0b\u9762\u7684 store\\n      const contextValue = useContext(ContextToUse);\\n\\n      // ... store \u68c0\u67e5\\n\\n      // Based on the previous check, one of these must be true\\n      const store = didStoreComeFromProps ? props.store : contextValue.store;\\n\\n      // ....\\n\\n      const [subscription, notifyNestedSubs] = useMemo(() => {\\n        if (!shouldHandleStateChanges) return NO_SUBSCRIPTION_ARRAY;\\n\\n        // \u5b50\u7ec4\u4ef6\u4e5f\u5b9e\u4f8b\u5316\u4e00\u4e2a\u8ba2\u9605\u5668\uff0c\u4ee5\u540e\u66f4\u65b0\u7ec4\u4ef6\u4f7f\u7528\\n        const subscription = new Subscription(\\n          store,\\n          didStoreComeFromProps ? null : contextValue.subscription\\n        );\\n\\n        // `notifyNestedSubs` is duplicated to handle the case where the component is unmounted in\\n        // the middle of the notification loop, where `subscription` will then be null. This can\\n        // probably be avoided if Subscription\'s listeners logic is changed to not call listeners\\n        // that have been unsubscribed in the  middle of the notification loop.\\n        const notifyNestedSubs = subscription.notifyNestedSubs.bind(\\n          subscription\\n        );\\n\\n        return [subscription, notifyNestedSubs];\\n      }, [store, didStoreComeFromProps, contextValue]);\\n\\n      // Determine what {store, subscription} value should be put into nested context, if necessary,\\n      // and memoize that value to avoid unnecessary context updates.\\n      const overriddenContextValue = useMemo(() => {\\n        if (didStoreComeFromProps) {\\n          // This component is directly subscribed to a store from props.\\n          // We don\'t want descendants reading from this store - pass down whatever\\n          // the existing context value is from the nearest connected ancestor.\\n          return contextValue;\\n        }\\n\\n        // Otherwise, put this component\'s subscription instance into context, so that\\n        // connected descendants won\'t update until after this component is done\\n        return {\\n          ...contextValue,\\n          subscription,\\n        };\\n      }, [didStoreComeFromProps, contextValue, subscription]);\\n\\n      // We need to force this wrapper component to re-render whenever a Redux store update\\n      // causes a change to the calculated child component props (or we caught an error in mapState)\\n      const [\\n        [previousStateUpdateResult],\\n        forceComponentUpdateDispatch,\\n      ] = useReducer(storeStateUpdatesReducer, EMPTY_ARRAY, initStateUpdates);\\n\\n      // Propagate any mapState/mapDispatch errors upwards\\n      if (previousStateUpdateResult && previousStateUpdateResult.error) {\\n        throw previousStateUpdateResult.error;\\n      }\\n\\n      // Set up refs to coordinate values between the subscription effect and the render logic\\n      const lastChildProps = useRef();\\n      const lastWrapperProps = useRef(wrapperProps);\\n      const childPropsFromStoreUpdate = useRef();\\n      const renderIsScheduled = useRef(false);\\n\\n      const actualChildProps = usePureOnlyMemo(() => {\\n        // Tricky logic here:\\n        // - This render may have been triggered by a Redux store update that produced new child props\\n        // - However, we may have gotten new wrapper props after that\\n        // If we have new child props, and the same wrapper props, we know we should use the new child props as-is.\\n        // But, if we have new wrapper props, those might change the child props, so we have to recalculate things.\\n        // So, we\'ll use the child props from store update only if the wrapper props are the same as last time.\\n        if (\\n          childPropsFromStoreUpdate.current &&\\n          wrapperProps === lastWrapperProps.current\\n        ) {\\n          return childPropsFromStoreUpdate.current;\\n        }\\n\\n        // TODO We\'re reading the store directly in render() here. Bad idea?\\n        // This will likely cause Bad Things (TM) to happen in Concurrent Mode.\\n        // Note that we do this because on renders _not_ caused by store updates, we need the latest store state\\n        // to determine what the child props should be.\\n        return childPropsSelector(store.getState(), wrapperProps);\\n      }, [store, previousStateUpdateResult, wrapperProps]);\\n\\n      // We need this to execute synchronously every time we re-render. However, React warns\\n      // about useLayoutEffect in SSR, so we try to detect environment and fall back to\\n      // just useEffect instead to avoid the warning, since neither will run anyway.\\n      useIsomorphicLayoutEffect(() => {\\n        // We want to capture the wrapper props and child props we used for later comparisons\\n        lastWrapperProps.current = wrapperProps;\\n        lastChildProps.current = actualChildProps;\\n        renderIsScheduled.current = false;\\n\\n        // If the render was from a store update, clear out that reference and cascade the subscriber update\\n        if (childPropsFromStoreUpdate.current) {\\n          childPropsFromStoreUpdate.current = null;\\n          notifyNestedSubs();\\n        }\\n      });\\n\\n      // Our re-subscribe logic only runs when the store/subscription setup changes\\n      useIsomorphicLayoutEffect(() => {\\n        // If we\'re not subscribed to the store, nothing to do here\\n        if (!shouldHandleStateChanges) return;\\n\\n        // Capture values for checking if and when this component unmounts\\n        let didUnsubscribe = false;\\n        let lastThrownError = null;\\n\\n        // \u6bcf\u6b21 store \u66f4\u65b0\u7684\u65f6\u5019\uff0c\u8fd9\u4e2a\u51fd\u6570\u90fd\u4f1a\u6267\u884c\uff0cre-render\\n        const checkForUpdates = () => {\\n          if (didUnsubscribe) {\\n            // Don\'t run stale listeners.\\n            // Redux doesn\'t guarantee unsubscriptions happen until next dispatch.\\n            return;\\n          }\\n\\n          const latestStoreState = store.getState();\\n\\n          let newChildProps, error;\\n          try {\\n            // Actually run the selector with the most recent store state and wrapper props\\n            // to determine what the child props should be\\n            newChildProps = childPropsSelector(\\n              latestStoreState,\\n              lastWrapperProps.current\\n            );\\n          } catch (e) {\\n            error = e;\\n            lastThrownError = e;\\n          }\\n\\n          if (!error) {\\n            lastThrownError = null;\\n          }\\n\\n          // If the child props haven\'t changed, nothing to do here - cascade the subscription update\\n          // \u5411\u4e0b\u4f20\u9012\u66f4\u65b0\u4e8b\u4ef6\\n          if (newChildProps === lastChildProps.current) {\\n            if (!renderIsScheduled.current) {\\n              notifyNestedSubs();\\n            }\\n          } else {\\n            // Save references to the new child props.  Note that we track the \\"child props from store update\\"\\n            // as a ref instead of a useState/useReducer because we need a way to determine if that value has\\n            // been processed.  If this went into useState/useReducer, we couldn\'t clear out the value without\\n            // forcing another re-render, which we don\'t want.\\n            lastChildProps.current = newChildProps;\\n            childPropsFromStoreUpdate.current = newChildProps;\\n            renderIsScheduled.current = true;\\n\\n            // If the child props _did_ change (or we caught an error), this wrapper component needs to re-render\\n            forceComponentUpdateDispatch({\\n              type: \'STORE_UPDATED\',\\n              payload: {\\n                error,\\n              },\\n            });\\n          }\\n        };\\n\\n        // Actually subscribe to the nearest connected ancestor (or store)\\n        subscription.onStateChange = checkForUpdates;\\n        subscription.trySubscribe();\\n\\n        // Pull data from the store after first render in case the store has\\n        // changed since we began.\\n        // \u4fdd\u5e95\u7684re-render\\n        checkForUpdates();\\n\\n        // ... \u53d6\u6d88\u8ba2\u9605\u5668\\n        const unsubscribeWrapper = () => {\\n          didUnsubscribe = true;\\n          subscription.tryUnsubscribe();\\n          subscription.onStateChange = null;\\n\\n          if (lastThrownError) {\\n            throw lastThrownError;\\n          }\\n        };\\n\\n        return unsubscribeWrapper;\\n      }, [store, subscription, childPropsSelector]);\\n\\n      //...\\n    }\\n\\n    // \u6536\u5c3e\u5de5\u4f5c\uff0c\u8fd4\u56de\u6700\u7ec8\u5305\u88f9\u7684\u7ec4\u4ef6\\n    // ...\\n  };\\n}\\n```\\n\\n## \u7ec4\u4ef6\u66f4\u65b0\u95ee\u9898\u7684\u8003\u8651\\n\\n\u53ef\u4ee5\u770b\u5230\u6bcf\u6b21 `store` \u7684\u66f4\u65b0\uff0c\u90fd\u4f1a\u5f15\u8d77\u4ece `Provider` \u4e3a\u6839\u8282\u70b9\u7684\u6574\u68f5\u7ec4\u4ef6\u6811\u7684\u66f4\u65b0\uff0c\u7136\u540e\u8fdb\u884c\u76f8\u5e94\u7684 diff \u548c update\u3002\\n\\n\u56e0\u6b64\u7406\u8bba\u4e0a\u6765\u770b\uff0c\u5bf9\u4e8e\u4e0d\u540c\u7684\u6570\u636e\u6765\u6e90\u7684\u7ec4\u4ef6\uff0c\u53ef\u4ee5\u591a\u62c6\u51e0\u4e2a `store`\uff0c\u4e0d\u5f3a\u6c42\u7ef4\u62a4\u5230\u540c\u4e00\u4e2a `store` \u4e0b\uff0c\u8fd9\u5176\u5b9e\u5c31\u662f `mobx` \u7684\u4e00\u4e2a\u7279\u522b\u5f62\u5f0f\u4e86\u3002\\n\\n\u6298\u4e2d\u7684\u529e\u6cd5\uff0c\u5c31\u76f8\u5f53\u4e8e\u628a `state` \u4e0b\u653e\u5230\u4e0b\u9762\u7684\u7ec4\u4ef6\uff0c\u7ed9\u4e00\u4e2a\u8f83\u9ad8\u7684\u7236\u7ec4\u4ef6\u6765\u7ef4\u62a4 `state` \u7136\u540e\u5f80\u4e0b\u4f20\u503c\uff0c\u7f3a\u70b9\u5c31\u662f\u65e0\u6cd5\u4ece\u5b50\u7ec4\u4ef6\u76f4\u63a5\u6539\u53d8\u8fd9\u4e2a\u7236\u7ec4\u4ef6\u7684 `state`\uff08\u56e0\u4e3a\u6ca1\u6709\u66b4\u9732\u7c7b\u4f3c\u7684 `dispatch`\u65b9\u6cd5\uff09\uff0c\u8fd9\u5bf9\u4e8e\u7ec4\u4ef6\u4f20\u503c\u8fc7\u6df1\u7684\u5b50\u7ec4\u4ef6\u6709\u4e00\u5b9a\u5f71\u54cd\u3002\\n\\n\u56e0\u6b64\uff0c `redux` \u7684\u4f7f\u7528\u5e94\u8be5\u4ecd\u4e3b\u8981\u4ece\u6570\u636e\u7684\u5171\u4eab\u6027\u51fa\u53d1\u6765\u8003\u8651\u3002\u591a\u4f59\u7684\u72b6\u6001\u53ef\u4ee5\u653e\u5728\u7ec4\u4ef6\u81ea\u5df1\u4e2d\u7ef4\u62a4\uff0c\u5c3d\u91cf\u4f7f\u7528 `hooks`\u3002"},{"id":"/2019/12/11/depth-in-event-loop","metadata":{"permalink":"/blog/2019/12/11/depth-in-event-loop","source":"@site/blog/2019-12-11-depth-in-event-loop.md","title":"Depth in Event loop","description":"For those JavaScript programmers, event loop is an important concept, inevitably.","date":"2019-12-11T00:00:00.000Z","formattedDate":"December 11, 2019","tags":[{"label":"event loop","permalink":"/blog/tags/event-loop"},{"label":"nodejs","permalink":"/blog/tags/nodejs"}],"readingTime":8.07,"hasTruncateMarker":true,"authors":[],"frontMatter":{"title":"Depth in Event loop","categories":["programming language","javascript"],"tags":["event loop","nodejs"]},"prevItem":{"title":"Redux \u6e90\u7801\u8bfb\u540e\u611f","permalink":"/blog/2020/02/10/redux-source-code-impression"},"nextItem":{"title":"Is it possible to break a promise chain?","permalink":"/blog/2019/11/30/promise-interception"}},"content":"For those JavaScript programmers, event loop is an important concept, inevitably.\\n\\nLiterally, event loop is what JavaScript uses to implement non-blocking execution. Understanding how the event loops works internally would benefit you a lot when programming in JavaScript.\\n\\nThere are two major environments JavaScript runs in: [browser](#browser) and [Node.js](#node.js).\\n\\n\x3c!--truncate--\x3e\\n\\n## Browser\\n\\nAs mentioned in the book [Secrets.of.the.JavaScript.Ninja.2nd.Edition](https://www.manning.com/books/secrets-of-the-javascript-ninja-second-edition):\\n\\n> Note the difference between handling the macrotask and microtask queues: In a single loop iteration, one macrotask at most is processed (others are left waiting in the queue), whereas all microtasks are processed.\\n\\nHere comes the first question: why only one marcotask is executed in each iteration?\\n\\nThe [HTML standards](https://html.spec.whatwg.org/multipage/webappapis.html#event-loop-processing-model) says the reason.\\n\\nAccording to the description, in each iteration, only one task, aka macrotask, is taken from task queue, is executed, while the microtask queue is flushed to empty. After flushing, there\'s a phase that the browser would evaluate the necessity to re-render the UI.\\n\\nHere is how the flow works:\\n\\n```\\nEngine starts:\\n\\n    Evaluate mainline JavaScript Code\\n\\n    Registering callbacks, timers, etc\\n\\nFirst loop:\\n\\n    take one MacroTask from task queue\\n\\n    flush MicroTasks\\n\\n    optional UI -rendering\\n\\nNext loop:\\n\\n    take one MacroTask from task queue\\n\\n    flush MicroTasks\\n\\n    optional UI-rendering\\n\\nNext loop:\\n\\n    take one MacroTask from task queue\\n\\n    flush MicroTasks\\n\\n    optional UI-rendering\\n\\nNext loop:\\n   ...\\n```\\n\\nThis loop will continue to the end of the browser page lifetime.\\n\\nTo verify the above loop execution, here are two example snippets;\\n\\n```js\\n// you can just run these code in the console (press F12 please).\\nconsole.info(\'MANILINE> START\');\\nsetTimeout(() => {\\n  console.info(\'MACRO> setTimeout.1\');\\n\\n  Promise.resolve()\\n    .then(() => {\\n      console.info(\'MICRO> setTimeout.1.promise.1\');\\n\\n      Promise.resolve().then(() => {\\n        console.info(\'MICRO> setTimeout.1.promise.inner.1\');\\n        Promise.resolve().then(() =>\\n          console.info(\'MICRO> setTimeout.1.promise.inner.1.inner\')\\n        );\\n      });\\n      Promise.resolve().then(() =>\\n        console.info(\'MICRO> setTimeout.1.promise.inner.2\')\\n      );\\n    })\\n    .then(() => {\\n      console.info(\'MICRO> setTimeout.1.promise.1.then\');\\n    })\\n    .then(() => {\\n      console.info(\'MICRO> setTimeout.1.promise.1.then.then\');\\n    });\\n}, 0);\\n\\nsetTimeout(() => {\\n  console.info(\'MACRO> setTimeout.2\');\\n\\n  Promise.resolve().then(() => console.info(\'MICRO> setTimeout.2.promise.1\'));\\n  Promise.resolve().then(() => console.info(\'MICRO> setTimeout.2.promise.2\'));\\n}, 0);\\n\\nsetTimeout(() => console.info(\'MACRO> setTimeout.3\'), 0);\\n\\nconsole.info(\'MAINLINE> END\');\\n```\\n\\nIf you open a new tab, press F12, copy and run the above code, here comes the output.\\n\\n```\\nMANILINE> START\\nMAINLINE> END\\n        # this line is empty\\nMACRO> setTimeout.1\\nMICRO> setTimeout.1.promise.1\\nMICRO> setTimeout.1.promise.inner.1\\nMICRO> setTimeout.1.promise.inner.2\\nMICRO> setTimeout.1.promise.1.then\\nMICRO> setTimeout.1.promise.inner.1.inner\\nMICRO> setTimeout.1.promise.1.then.then\\nMACRO> setTimeout.2\\nMICRO> setTimeout.2.promise.1\\nMICRO> setTimeout.2.promise.2\\nMACRO> setTimeout.3\\n```\\n\\nAs we can clearly see the execution flow.\\n\\n<details>\\n<summary> And another example is actually an html file that you need to load from the browser at the very beginning. The code would run as expected also. </summary>\\n\\n```html\\n<!DOCTYPE html>\\n<html lang=\\"en\\">\\n  <head>\\n    <meta charset=\\"UTF-8\\" />\\n    <meta name=\\"viewport\\" content=\\"width=device-width, initial-scale=1.0\\" />\\n    <meta http-equiv=\\"X-UA-Compatible\\" content=\\"ie=edge\\" />\\n    <title>Event loop</title>\\n  </head>\\n\\n  <body>\\n    <div>Division 1</div>\\n    <script>\\n      console.info(\'MAINLINE> script.1 START\');\\n      setTimeout(() => {\\n        Promise.resolve().then(() => {\\n          console.info(\'MICRO> script.1.timeout.1.promise\');\\n        });\\n        console.info(\'MACRO> script.1.timeout.1\');\\n      });\\n      setTimeout(() => {\\n        console.info(\'MACRO> script.1.timeout.2\');\\n      });\\n      console.info(\'MAINLINE> script.1 END\');\\n    <\/script>\\n    <div>Divison 2</div>\\n    <script>\\n      console.info(\'MAINLINE> script.2 START\');\\n      setTimeout(() => {\\n        Promise.resolve().then(() => {\\n          console.info(\'MICRO> script.2.timeout.1.promise\');\\n        });\\n        console.info(\'MACRO> script.2.timeout.1\');\\n      });\\n      setTimeout(() => {\\n        console.info(\'MACRO> script.2.timeout.2\');\\n      });\\n      Promise.resolve().then(() => {\\n        console.info(\'MAINLINE> promise\');\\n      });\\n      console.info(\'MAINLINE> script.2 END\');\\n    <\/script>\\n    <p>The correct logging order in console is</p>\\n    <ol>\\n      <li>MAINLINE> script.1 START</li>\\n      <li>MAINLINE> script.1 END</li>\\n      <li>MAINLINE> script.2 START</li>\\n      <li>MAINLINE> script.2 END</li>\\n      <li>MAINLINE> promise</li>\\n      <li>MACRO> script.1.timeout.1</li>\\n      <li>MICRO> script.1.timeout.1.promise</li>\\n      <li>MACRO> script.1.timeout.2</li>\\n      <li>MACRO> script.2.timeout.1</li>\\n      <li>MICRO> script.2.timeout.1.promise</li>\\n      <li>MACRO> script.2.timeout.2</li>\\n    </ol>\\n  </body>\\n</html>\\n```\\n\\n</details>\\n\\n## Node.js\\n\\nEvent loop is a bit different running in Node.js environment.\\n\\nThough the [official document](https://nodejs.org/en/docs/guides/event-loop-timers-and-nexttick/#event-loop-explained) illustrates something on the event loop, I think the [tutorial from IBM](https://developer.ibm.com/tutorials/learn-nodejs-the-event-loop/#why-you-need-to-understand-the-event-loop) is better.\\n\\n<a id=\\"event-loop-node\\"></a>\\n\\n![](https://developer.ibm.com/developer/tutorials/learn-nodejs-the-event-loop/images/figure-1.png)\\n\\nBefore diving into the execution flow, we have some basic glossaries to clarify.\\n\\n### Microtasks\\n\\nMicrotasks execute immediately _following mainline_ and _after every phase_ of the event loop.\\n\\nMicrotasks are callbacks form `process.nextTick()` and `then()` handlers for Promises. (`process.nextTick()` has higher priority to `Promise`.)\\n\\n### Timers phase\\n\\nTimers have two categories: [Immediate](https://nodejs.org/dist/latest-v12.x/docs/api/timers.html#timers_class_immediate) and [Timeout](https://nodejs.org/dist/latest-v12.x/docs/api/timers.html#timers_class_timeout).\\n\\nAn _immediate_ timer is a Node object that runs immediately during the next Check phase.\\n\\nA _timeout timer_ is a Node object that runs a callback as soon as possible after the timer expires.\\n\\nOnce the timer expires, the callback is invoked during the next Timers phase of the event loop.\\n\\nThere are two types of Timeout timers: _Interval_ and _Timeout_.\\n\\nWhen there are no more expired timer callbacks to run, the event loop runs any microtasks.\\n\\nAfter running microtasks, the event loop moves to the Pending phase.\\n\\n### Pending phase\\n\\nCertain system-level callback are executed during this phase. You don\'t really need to worry about this phase.\\n\\n### Idle and Prepare phase\\n\\nApparently, this phase is \u201conly used internally\u201d. You don\'t really need to worry about this phase.\\n\\n### Poll phase\\n\\nI/O callbacks are executed during this phase.\\n\\nNormally, if the poll queue is empty, it blocks and waits for any in-flight I/O operations to complete, then execute their callbacks right away.\\n\\nHowever, if timers are scheduled the poll phase will end.\\n\\nAny microtasks will be run as necessary, and the event loop proceeds to the check phase.\\n\\n### Check phase\\n\\nThis phase is a sort of \u201cpost I/O\u201d phase during which only `setImmediate()` callbacks are executed. This allows you to run code that executes as soon as the poll phase becomes idle.\\n\\nOnce the check phase callback queue is empty, any microtasks run, and the event loop proceeds to the close phase.\\n\\n### Close phase\\n\\nThis phase is executed if a socket or handle is closed suddenly.\\n\\n## Example\\n\\nThe following code should be run like `node <file>.js`.\\n\\n```js\\nconst fs = require(\'fs\');\\nconst EventEmitter = require(\'events\').EventEmitter;\\nconst ITERATIONS_MAX = 3;\\nlet iteration = 0;\\nconst event = new EventEmitter();\\n\\nconsole.info(\'MAINLINE> START\');\\n\\nconsole.info(\'MAINLINE> Registering Event\');\\nevent.on(\'simple\', (eventName, message, source, timestamp) => {\\n  console.info(\\n    \'EVENTS> Received event: name \\"%s\\", message \\"%s\\", source \\"%s\\", timestamp %s\',\\n    eventName,\\n    message,\\n    source,\\n    timestamp\\n  );\\n});\\n\\nconst hrtime = process.hrtime().join(\'.\');\\nevent.emit(\'simple\', \'simpleEvent\', \'Custom message\', \'MAINLINE\', hrtime);\\n\\nPromise.resolve().then(() => {\\n  console.info(\'MAINLINE> promise.1\');\\n});\\nprocess.nextTick(() => {\\n  console.info(\'MAINLINE> process.nextTick\');\\n});\\nPromise.resolve().then(() => {\\n  console.info(\'MAINLINE> promise.2\');\\n});\\nconst interval = setInterval(() => {\\n  console.info(\'TIMERS PHASE> START: iteration %d: setInterval\', iteration);\\n  if (iteration >= ITERATIONS_MAX) {\\n    console.info(\'TIMERS PHASE> Max interval count exceeded. Goodbye.\');\\n    clearInterval(interval);\\n  } else {\\n    {\\n      const htime = process.hrtime().join(\'.\');\\n      event.emit(\\n        \'simple\',\\n        \'simpleEvent\',\\n        \'Custom message A from \' + iteration,\\n        \'setInterval.EventEmitter\',\\n        htime\\n      );\\n    }\\n    setTimeout(\\n      (ite) => {\\n        console.info(\\n          \'TIMERS EXPIRED (from iteration %d)> setInterval.setTimeout\',\\n          ite\\n        );\\n        Promise.resolve().then(() => {\\n          console.info(\\n            \'TIMERS PHASE MICROTASK> setInterval.setTimeout.promise 1\'\\n          );\\n        });\\n        process.nextTick(() => {\\n          console.info(\\n            \'TIMERS PHASE MICROTASK> setInterval.setTimeout.process.nextTick\'\\n          );\\n        });\\n        Promise.resolve().then(() => {\\n          console.info(\\n            \'TIMERS PHASE MICROTASK> setInterval.setTimeout.promise 2\'\\n          );\\n        });\\n      },\\n      0,\\n      iteration\\n    );\\n    fs.readdir(\'./\', (err, files) => {\\n      if (err) throw err;\\n      console.info(\'POLL PHASE> fs.readdir() callback\');\\n      process.nextTick(() => {\\n        console.info(\\n          \'POLL PHASE MICROTASK> setInterval.fs.readdir.process.nextTick\'\\n        );\\n      });\\n    });\\n    setImmediate(() => {\\n      console.info(\'CHECK PHASE> setInterval.setImmediate\');\\n      process.nextTick(() => {\\n        console.info(\\n          \'CHECK PHASE MICROTASK> setInterval.setImmediate.process.nextTick\'\\n        );\\n      });\\n    });\\n    {\\n      const htime = process.hrtime().join(\'.\');\\n      event.emit(\\n        \'simple\',\\n        \'simpleEvent\',\\n        \'Custom message B from \' + iteration,\\n        \'setInterval.EventEmitter\',\\n        htime\\n      );\\n    }\\n\\n    process.nextTick((ite) => {\\n      console.info(\\n        \'TIMER PHASE MICROTASK> iteration %d, setInterval.process.nextTick\',\\n        ite\\n      );\\n    }, iteration);\\n  }\\n  console.info(\'TIMERS PHASE> END: iteration %d: setInterval\', iteration);\\n\\n  iteration++;\\n}, 0);\\nconsole.info(\'MAINLINE> END\');\\n```\\n\\n<details>\\n<summary>After running the above scripts, the terminal would print like (click to open the output result): </summary>\\n\\n```txt\\nMAINLINE> START\\nMAINLINE> Registering Event\\nEVENTS> Received event: name \\"simpleEvent\\", message \\"Custom message\\", source \\"MAINLINE\\", timestamp 385796.462973198\\nMAINLINE> END\\nMAINLINE> process.nextTick\\nMAINLINE> promise.1\\nMAINLINE> promise.2\\nTIMERS PHASE> START: iteration 0: setInterval\\nEVENTS> Received event: name \\"simpleEvent\\", message \\"Custom message A from 0\\", source \\"setInterval.EventEmitter\\", timestamp 385796.464664300\\nEVENTS> Received event: name \\"simpleEvent\\", message \\"Custom message B from 0\\", source \\"setInterval.EventEmitter\\", timestamp 385796.465196848\\nTIMERS PHASE> END: iteration 0: setInterval\\nTIMER PHASE MICROTASK> iteration 0, setInterval.process.nextTick\\nPOLL PHASE> fs.readdir() callback\\nPOLL PHASE MICROTASK> setInterval.fs.readdir.process.nextTick\\nCHECK PHASE> setInterval.setImmediate\\nCHECK PHASE MICROTASK> setInterval.setImmediate.process.nextTick\\nTIMERS EXPIRED (from iteration 0)> setInterval.setTimeout\\nTIMERS PHASE MICROTASK> setInterval.setTimeout.process.nextTick\\nTIMERS PHASE MICROTASK> setInterval.setTimeout.promise 1\\nTIMERS PHASE MICROTASK> setInterval.setTimeout.promise 2\\nTIMERS PHASE> START: iteration 1: setInterval\\nEVENTS> Received event: name \\"simpleEvent\\", message \\"Custom message A from 1\\", source \\"setInterval.EventEmitter\\", timestamp 385796.466206990\\nEVENTS> Received event: name \\"simpleEvent\\", message \\"Custom message B from 1\\", source \\"setInterval.EventEmitter\\", timestamp 385796.466439664\\nTIMERS PHASE> END: iteration 1: setInterval\\nTIMER PHASE MICROTASK> iteration 1, setInterval.process.nextTick\\nPOLL PHASE> fs.readdir() callback\\nPOLL PHASE MICROTASK> setInterval.fs.readdir.process.nextTick\\nCHECK PHASE> setInterval.setImmediate\\nCHECK PHASE MICROTASK> setInterval.setImmediate.process.nextTick\\nTIMERS EXPIRED (from iteration 1)> setInterval.setTimeout\\nTIMERS PHASE MICROTASK> setInterval.setTimeout.process.nextTick\\nTIMERS PHASE MICROTASK> setInterval.setTimeout.promise 1\\nTIMERS PHASE MICROTASK> setInterval.setTimeout.promise 2\\nTIMERS PHASE> START: iteration 2: setInterval\\nEVENTS> Received event: name \\"simpleEvent\\", message \\"Custom message A from 2\\", source \\"setInterval.EventEmitter\\", timestamp 385796.468226076\\nEVENTS> Received event: name \\"simpleEvent\\", message \\"Custom message B from 2\\", source \\"setInterval.EventEmitter\\", timestamp 385796.468287021\\nTIMERS PHASE> END: iteration 2: setInterval\\nTIMER PHASE MICROTASK> iteration 2, setInterval.process.nextTick\\nPOLL PHASE> fs.readdir() callback\\nPOLL PHASE MICROTASK> setInterval.fs.readdir.process.nextTick\\nCHECK PHASE> setInterval.setImmediate\\nCHECK PHASE MICROTASK> setInterval.setImmediate.process.nextTick\\nTIMERS EXPIRED (from iteration 2)> setInterval.setTimeout\\nTIMERS PHASE MICROTASK> setInterval.setTimeout.process.nextTick\\nTIMERS PHASE MICROTASK> setInterval.setTimeout.promise 1\\nTIMERS PHASE MICROTASK> setInterval.setTimeout.promise 2\\nTIMERS PHASE> START: iteration 3: setInterval\\nTIMERS PHASE> Max interval count exceeded. Goodbye.\\nTIMERS PHASE> END: iteration 3: setInterval\\n```\\n\\n</details>\\n\\nAs we can see:\\n\\n1. First, mainline runs, followed by its microtask, (remember, `process.nextTick` comes before `Promise`).\\n\\n1. Then, Timers phase and its microtask, (again, `process.nextTick` comes before `Promise`).\\n\\n1. Then, Poll phase and its microtask.\\n\\n1. Then, Check phase and its microtask.\\n\\n1. Loop to the next Timers phase, and so on.\\n\\nYou can check the [illustration image](#event-loop-node) again.\\n\\n## EventEmitter\\n\\nOne more thing about the EventEmitter. We register a callback for some event, which would be called in the future, _asynchronously_.\\n\\nWhen we make the specific event emitted, it will execute _synchronously_ at that emitting moment.\\n\\n## In the end\\n\\nMany efforts have been made to figure out it thoroughly. It\'s may be not easy to understand event loop in such a short article, you could read more if you do need a deeper understanding in event loop.\\n\\nHope this would help you in your JavaScript programming!"},{"id":"/2019/11/30/promise-interception","metadata":{"permalink":"/blog/2019/11/30/promise-interception","source":"@site/blog/2019-11-30-promise-interception.md","title":"Is it possible to break a promise chain?","description":"Actually, you don\'t break the then/catch callback chain. But you can leverage the duck typing mechanism in Javascript to redirect the callback chain.","date":"2019-11-30T00:00:00.000Z","formattedDate":"November 30, 2019","tags":[{"label":"promise","permalink":"/blog/tags/promise"}],"readingTime":0.9,"hasTruncateMarker":true,"authors":[],"frontMatter":{"title":"Is it possible to break a promise chain?","categories":["frontend","javascript"],"tags":["promise"]},"prevItem":{"title":"Depth in Event loop","permalink":"/blog/2019/12/11/depth-in-event-loop"},"nextItem":{"title":"Test-Driven Development and Behavior-Driven Development","permalink":"/blog/2019/11/23/tdd-n-bdd"}},"content":"> Actually, you don\'t _break_ the `then/catch` callback chain. But you can leverage the duck typing mechanism in Javascript to _redirect_ the callback chain.\\n\\nCheck out list of tricky code to _break_ a promise chain.\\n\\n\x3c!--truncate--\x3e\\n\\n```javascript\\nconst NoopPromise = {\\n  then: () => NoopPromise,\\n  catch: () => NoopPromise,\\n};\\n\\nPromise.resolve()\\n  .then(() => {\\n    const number = Math.random();\\n    if (number > 0.5) {\\n      return number;\\n    }\\n    // something bad happend,\\n    // we have to stop the promise chain from here\\n    // the rest chained code wouldn\'t execute,\\n    // even with `catch` method\\n\\n    // ...\\n    // do something error handler, like message, toast, event collection\\n    // ...\\n    return NoopPromise;\\n  })\\n  .then((data) => {\\n    console.log(\'We got the data from up-promise %d\', data);\\n  })\\n  .catch((e) => {\\n    // This never printed\\n    console.error(\'We encountered an error %o\', e);\\n  });\\n```\\n\\n---\\n\\n```javascript\\n// use it to suppress error\\nPromise.resolve()\\n  .then(() => {\\n    throw new Error(\'Bad Promise\');\\n  })\\n  .catch((e) => {\\n    console.error(\'We encountered an error %o\', e);\\n    return NoopPromise;\\n  })\\n  .then(() => {\\n    console.log(\'This never printed\');\\n  })\\n  .catch(() => {\\n    console.log(\'This never printed\');\\n  });\\n```"},{"id":"/2019/11/23/tdd-n-bdd","metadata":{"permalink":"/blog/2019/11/23/tdd-n-bdd","source":"@site/blog/2019-11-23-tdd-n-bdd.md","title":"Test-Driven Development and Behavior-Driven Development","description":"Tests help us to write better programmes, better code.","date":"2019-11-23T00:00:00.000Z","formattedDate":"November 23, 2019","tags":[{"label":"unit test","permalink":"/blog/tags/unit-test"},{"label":"jest","permalink":"/blog/tags/jest"},{"label":"jasmine","permalink":"/blog/tags/jasmine"},{"label":"mocha","permalink":"/blog/tags/mocha"}],"readingTime":0.72,"hasTruncateMarker":true,"authors":[],"frontMatter":{"title":"Test-Driven Development and Behavior-Driven Development","categories":["frontend","unit test"],"tags":["unit test","jest","jasmine","mocha"]},"prevItem":{"title":"Is it possible to break a promise chain?","permalink":"/blog/2019/11/30/promise-interception"},"nextItem":{"title":"Demo for Key-Value editor","permalink":"/blog/2019/11/21/key-value-editor"}},"content":"Tests help us to write better programmes, better code.\\n\\nIn this project, we take a tour to several test framework, such as [jasmine](https://jasmine.github.io/), [mocha](https://mochajs.org/), [jest](https://jestjs.io/).\\n\\nSome of them are very powerful, while others may be more flexible, choose the one meets your requirements.\\n\\nIf you are new to test framework, please do start with `jasmine`, which provides [wonderful tutorial](https://jasmine.github.io/tutorials/your_first_suite)!\\n\\nPersonally, I prefer `expect` style assertion and `jasmine`.\\n\\n\x3c!--truncate--\x3e\\n\\n**UI Library/Framework Tests**\\n\\n[angulest](https://github.com/AkatQuas/kiddo-plays/tree/master/tdd-and-bdd/angulest) is a project generated by _ng new_. Most of the test cases come from [this document](https://angular.io/guide/testing), which is a comprehensive guide for writing test in Angular with Jasmine.\\n\\n[vuest](https://github.com/AkatQuas/kiddo-plays/tree/master/tdd-and-bdd/vuest) is a project generated by _vue-cli_, there are many [unit test case examples](https://github.com/AkatQuas/kiddo-plays/tree/master/tdd-and-bdd/vuest/tests/unit/). Vue.js has its own test framework called [@vue/test-utils](https://vue-test-utils.vuejs.org/). And there is a useful [handbook](https://lmiller1990.github.io/vue-testing-handbook/).\\n\\n[reacest](https://github.com/AkatQuas/kiddo-plays/tree/master/tdd-and-bdd/reacest) is a project generated by _create-react-app_, writing test with Jest and Enzyme.\\n\\n[Project on GitHub](https://github.com/AkatQuas/kiddo-plays/tree/master/tdd-and-bdd)"},{"id":"/2019/11/21/key-value-editor","metadata":{"permalink":"/blog/2019/11/21/key-value-editor","source":"@site/blog/2019-11-21-key-value-editor.md","title":"Demo for Key-Value editor","description":"\u8fd9\u4e2a\u9879\u76ee\u6765\u6e90\u4e8e\u4e00\u9053\u6240\u8c13\u7684\u9762\u8bd5\u9898\u3002","date":"2019-11-21T00:00:00.000Z","formattedDate":"November 21, 2019","tags":[{"label":"reactjs","permalink":"/blog/tags/reactjs"},{"label":"hooks","permalink":"/blog/tags/hooks"}],"readingTime":0.97,"hasTruncateMarker":true,"authors":[],"frontMatter":{"title":"Demo for Key-Value editor","categories":["frontend","javascript","reactjs"],"tags":["reactjs","hooks"]},"prevItem":{"title":"Test-Driven Development and Behavior-Driven Development","permalink":"/blog/2019/11/23/tdd-n-bdd"},"nextItem":{"title":"Play with Computer Graphics and WebGL","permalink":"/blog/2019/11/07/webgl"}},"content":"\u8fd9\u4e2a\u9879\u76ee\u6765\u6e90\u4e8e\u4e00\u9053\u6240\u8c13\u7684\u9762\u8bd5\u9898\u3002\\n\\n[Demo Page](https://akatquas.github.io/demo-key-value-editor/)\u3002\\n\\n[\u9879\u76ee\u4ee3\u7801](https://github.com/AkatQuas/demo-key-value-editor)\u3002\\n\\n\x3c!--truncate--\x3e\\n\\n\u539f\u9898\\n\\n## Key-Value Editor\\n\\n\u8be5\u7ec4\u4ef6\u662f\u4e00\u4e2a key-value\uff08\u4ee5\u4e0b\u7b80\u79f0 kv\uff09\u641c\u7d22\u9879\u8f93\u5165\u7ec4\u4ef6\uff0c\u53ef\u7528\u8ba9\u7528\u6237\u8f93\u5165\u591a\u4e2a kv \u5bf9\\n\\n### \u7ec4\u4ef6\u6548\u679c\u5c55\u793a\\n\\n#### \u5e03\u5c40\u5c55\u793a\\n\\n<img src=\\"/images/key-value-editor/layout.png\\" alt=\\"\u5e03\u5c40\\" />\\n\\n#### \u8f93\u5165\uff08gif \u793a\u610f\uff09\\n\\n\u53ef\u4ee5\u8f93\u5165\u65b0\u503c\uff0c\u5220\u9664\u5df2\u6709\u503c\\n\\n<img src=\\"/images/key-value-editor/add_delete.gif\\" alt=\\"\u65b0\u589e/\u5220\u9664\\" />\\n\\n\u53ef\u4ee5\u7f16\u8f91\u5df2\u8f93\u5165\u7684\u503c\\n\\n<img src=\\"/images/key-value-editor/edit.gif\\" alt=\\"\u7f16\u8f91\\" />\\n\\n#### \u8f93\u51fa\\n\\n\u70b9\u51fb\u67e5\u8be2\u65f6\uff0c\u63a7\u5236\u53f0\u6253\u5370\u8f93\u5165\u7684\u7ed3\u679c\uff0c\u6bd4\u5982:\\n\\n```javascript\\n{\\n  target: \\"es6\\",\\n  framework: \\"react\\",\\n}\\n```\\n\\n#### \u529f\u80fd\u70b9\\n\\n1.  \u65b0\u8f93\u5165 kv \u5bf9\\n2.  \u7f16\u8f91\u5df2\u8f93\u5165\u7684 kv \u5bf9\\n3.  \u5220\u9664\u5df2\u5b58\u5728\u7684 kv \u5bf9\\n4.  \u70b9\u51fb\u67e5\u8be2\u6309\u94ae\uff0clog \u8f93\u5165\u503c\\n5.  \u70b9\u51fb\u6e05\u7a7a\u6309\u94ae\uff0c\u6e05\u9664\u6240\u6709\u8f93\u5165\\n6.  \u8f93\u5165\u6821\u9a8c"},{"id":"/2019/11/07/webgl","metadata":{"permalink":"/blog/2019/11/07/webgl","source":"@site/blog/2019-11-07-webgl.md","title":"Play with Computer Graphics and WebGL","description":"WebGL is amazing! Learn something in the Graphics Library.","date":"2019-11-07T00:00:00.000Z","formattedDate":"November 7, 2019","tags":[{"label":"webgl","permalink":"/blog/tags/webgl"}],"readingTime":0.76,"hasTruncateMarker":true,"authors":[],"frontMatter":{"title":"Play with Computer Graphics and WebGL","categories":["computer graphics"],"tags":["webgl"]},"prevItem":{"title":"Demo for Key-Value editor","permalink":"/blog/2019/11/21/key-value-editor"},"nextItem":{"title":"Zero-width space","permalink":"/blog/2019/11/01/zero-width-space"}},"content":"[WebGL](https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/Tutorial) is amazing! Learn something in the Graphics Library.\\n\\nMaybe some practices, and collections on data visualization or web gaming.\\n\\nYou\'d better check the API usage while developing, how can you memorize all the drawing functions?\\n\\n\x3c!--truncate--\x3e\\n\\n[WebGL Basics](https://blogoben.wordpress.com/2011/02/20/webgl-comes/): A good blog on WebGL basic concepts, though it hasn\'t been updated for a long time.\\n\\n[OpenGL Basic](http://www.songho.ca/opengl/index.html): A fundamental information blog on OpenGL, but the concepts are similar.\\n\\n- **[WebGL tutorialspoint](https://github.com/AkatQuas/webgl-playlist/tree/master/webgl-tutorialspoint)**: A much detailed WebGL learning notes!\\n\\n- **[WebGL MDN](https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/Tutorial/Getting_started_with_WebGL)**: Official RFC.\\n\\n- **[WebGL Fundamentals](https://webglfundamentals.org/)**: Amazing collection of articles that teach WebGL from ground up.\\n\\n- [Ray Tracer](https://github.com/AkatQuas/webgl-playlist/tree/master/raytracer): A small project with self-implemented ray tracing to render image offline.\\n\\n- [Three Js](https://github.com/AkatQuas/webgl-playlist/tree/master/three)\\n\\n- [SVG](https://github.com/AkatQuas/webgl-playlist/tree/master/svg)\\n\\n- **[Canvas](https://akatquas.github.io/view/canvasDemos/index.html)**: Draw on canvas in vanilla way.\\n\\n- **[D3 in Depth](https://d3indepth.com/)**: Tutorial and Document on D3.\\n\\n- [Computer Graphics Beginner](https://github.com/AkatQuas/webgl-playlist/blob/master/ComputerGraphicsBeginner.xmind): An XMind file listing some basic concepts for computer graphics learning for beginners.\\n\\n![computer-graphics-beginner](/images/computer-graphics-beginner.png)\\n\\n[Project on GitHub](https://github.com/AkatQuas/webgl-playlist)"},{"id":"/2019/11/01/zero-width-space","metadata":{"permalink":"/blog/2019/11/01/zero-width-space","source":"@site/blog/2019-11-01-zero-width-space.md","title":"Zero-width space","description":"Insert zero-width space to cheat keywords detection without losing reading convenience.","date":"2019-11-01T00:00:00.000Z","formattedDate":"November 1, 2019","tags":[],"readingTime":0.17,"hasTruncateMarker":false,"authors":[],"frontMatter":{"title":"Zero-width space"},"prevItem":{"title":"Play with Computer Graphics and WebGL","permalink":"/blog/2019/11/07/webgl"},"nextItem":{"title":"Read input from command line in node","permalink":"/blog/2019/10/28/read-from-terminal-in-node"}},"content":"Insert zero-width space to cheat keywords detection without losing reading convenience.\\n\\n```javascript\\nfunction insertSpaces(string) {\\n  return Array.from(string).join(\'\\\\u200b\');\\n}\\n```\\n\\nIn Unicode, the zero-width space character is encoded as `U+200B` (HTML entity `&#8203;`)\\n\\n[See more](https://en.wikipedia.org/wiki/Zero-width_space)."},{"id":"/2019/10/28/read-from-terminal-in-node","metadata":{"permalink":"/blog/2019/10/28/read-from-terminal-in-node","source":"@site/blog/2019-10-28-read-from-terminal-in-node.md","title":"Read input from command line in node","description":"usage example","date":"2019-10-28T00:00:00.000Z","formattedDate":"October 28, 2019","tags":[{"label":"nodejs","permalink":"/blog/tags/nodejs"}],"readingTime":0.225,"hasTruncateMarker":false,"authors":[],"frontMatter":{"title":"Read input from command line in node","categories":["command line"],"tags":["nodejs"]},"prevItem":{"title":"Zero-width space","permalink":"/blog/2019/11/01/zero-width-space"},"nextItem":{"title":"Traverse directories in nodejs","permalink":"/blog/2019/09/24/traverse-directories-in-node"}},"content":"```javascript\\n// read-from-terminal.js\\nprocess.stdin.resume();\\nprocess.stdin.setEncoding(\'ascii\'); // \'utf-8\' also supported\\n\\nlet _input = \'\';\\n\\nprocess.stdin.on(\'data\', function (data) {\\n  _input += data;\\n});\\n\\nprocess.stdin.on(\'end\', function () {\\n  process.stdout.write(_input);\\n});\\n```\\n\\n**usage example**\\n\\nyou need to create a ReadStream using pipeline.\\n\\n```bash\\ncat <file> | node read-from-terminal.js\\n```"},{"id":"/2019/09/24/traverse-directories-in-node","metadata":{"permalink":"/blog/2019/09/24/traverse-directories-in-node","source":"@site/blog/2019-09-24-traverse-directories-in-node.md","title":"Traverse directories in nodejs","description":"This is a simple implementation for traversing directories in Nodejs.","date":"2019-09-24T00:00:00.000Z","formattedDate":"September 24, 2019","tags":[{"label":"nodejs","permalink":"/blog/tags/nodejs"}],"readingTime":0.91,"hasTruncateMarker":true,"authors":[],"frontMatter":{"title":"Traverse directories in nodejs","categories":["command line"],"tags":["nodejs"]},"prevItem":{"title":"Read input from command line in node","permalink":"/blog/2019/10/28/read-from-terminal-in-node"},"nextItem":{"title":"\u7981\u6b62 body \u5143\u7d20\u5728\u6d6e\u5c42\u4e0b\u6eda\u52a8","permalink":"/blog/2019/08/17/mute-body-element-when-popup-shows"}},"content":"This is a simple implementation for traversing directories in Nodejs.\\n\\nPlease use more robust modules, for example [walk](https://www.npmjs.com/package/walk), in production.\\n\\n\x3c!--truncate--\x3e\\n\\n```javascript\\nconst fse = require(\'fs-extra\');\\nconst path = require(\'path\');\\n\\nconst isNotDot = (filepath) => {\\n  const REG = /^\\\\..+/i;\\n  return !REG.test(filepath);\\n};\\n\\n/**\\n * calculate the relative path from `start` to `end`\\n * @param {String} start starting filepath\\n * @param {String} end ending filepath\\n * @returns {String}\\n */\\nfunction relativePath(start, end) {\\n  return path.relative(start, end);\\n}\\n\\n/**\\n * walk a directory to get a flatterned array of files\\n * @param {string} dir The directory path\\n * @param {{filter: Function, skipDot: boolean}} p the relative path origin\\n * @returns {Array<{ purename, fullpath }>}\\n */\\nfunction walk(dir, opt) {\\n  let children = fse.readdirSync(dir);\\n  const skipDot = opt.skipDot || true;\\n  if (skipDot) {\\n    children = children.filter(isNotDot);\\n  }\\n  if (opt.filter) {\\n    children = children.filter(opt.filter);\\n  }\\n  let res = [];\\n  children.forEach((f) => {\\n    const filepath = path.resolve(dir, f);\\n    const stat = fse.statSync(filepath);\\n    if (stat.isFile()) {\\n      res.push({\\n        purename: path.basename(filepath),\\n        fullpath: filepath,\\n      });\\n    } else if (stat.isDirectory()) {\\n      res = res.concat(walk(filepath, opt));\\n    }\\n  });\\n  return res;\\n}\\n```"},{"id":"/2019/08/17/mute-body-element-when-popup-shows","metadata":{"permalink":"/blog/2019/08/17/mute-body-element-when-popup-shows","source":"@site/blog/2019-08-17-mute-body-element-when-popup-shows.md","title":"\u7981\u6b62 body \u5143\u7d20\u5728\u6d6e\u5c42\u4e0b\u6eda\u52a8","description":"\u573a\u666f\u6765\u6e90\uff1a","date":"2019-08-17T00:00:00.000Z","formattedDate":"August 17, 2019","tags":[{"label":"javascript","permalink":"/blog/tags/javascript"},{"label":"html","permalink":"/blog/tags/html"}],"readingTime":0.745,"hasTruncateMarker":true,"authors":[],"frontMatter":{"title":"\u7981\u6b62 body \u5143\u7d20\u5728\u6d6e\u5c42\u4e0b\u6eda\u52a8","categories":["frontend"],"tags":["javascript","html"]},"prevItem":{"title":"Traverse directories in nodejs","permalink":"/blog/2019/09/24/traverse-directories-in-node"},"nextItem":{"title":"Markdown Press","permalink":"/blog/2019/08/15/mdpress"}},"content":"\u573a\u666f\u6765\u6e90\uff1a\\n\\n\u5728\u624b\u673a\u7aef\u67e5\u770b\u7f51\u9875\uff0c\u6709\u65f6\u9700\u8981\u5168\u5c4f\u5f39\u7a97\u5c55\u793a\u5185\u5bb9\u3002\\n\\n\u6b64\u65f6\uff0c\u7528\u6237\u53bb\u89e6\u6478\u5f39\u7a97\u7684\u5143\u7d20\uff0c\u6ed1\u52a8\u4e8b\u4ef6 (scroll) \u4f1a\u4f20\u9012\u4e0b\u53bb\u4f7f\u5f97 `body` \u5143\u7d20\u53d1\u751f\u6eda\u52a8\u3002\\n\\n\u4e0b\u9762\u7684\u4ee3\u7801\u53ef\u4ee5\u5e2e\u52a9\u7981\u6b62\u8fd9\u79cd\u884c\u4e3a\u3002\\n\\n\x3c!--truncate--\x3e\\n\\n```javascript\\nlet nowTop = 0;\\nconst bodyEl = document.body;\\n\\nexport default (mute) => {\\n  if (mute) {\\n    nowTop = window.scrollY;\\n\\n    bodyEl.style.position = \'fixed\';\\n    bodyEl.style.top = -nowTop + \'px\';\\n  } else {\\n    bodyEl.style.position = \'\';\\n    bodyEl.style.top = \'\';\\n\\n    window.scrollTo(0, nowTop);\\n  }\\n};\\n```\\n\\n\u4f7f\u7528\u4e3e\u4f8b\uff1a\\n\\n```javascript\\nimport muteBodyScroll from \'/path/to/mute-body-scroll.js\';\\n\\nlet modalVisible = false;\\n\\nconst openModal = () => {\\n  muteBodyScroll(true);\\n  modalVisible = true;\\n};\\n\\nconst closeModal = () => {\\n  muteBodyScroll();\\n  modalVisible = false;\\n};\\n```"},{"id":"/2019/08/15/mdpress","metadata":{"permalink":"/blog/2019/08/15/mdpress","source":"@site/blog/2019-08-15-mdpress.md","title":"Markdown Press","description":"A plain boilerplate project to generate static websites from markdown files.","date":"2019-08-15T00:00:00.000Z","formattedDate":"August 15, 2019","tags":[{"label":"html","permalink":"/blog/tags/html"},{"label":"markdown","permalink":"/blog/tags/markdown"}],"readingTime":1.305,"hasTruncateMarker":true,"authors":[],"frontMatter":{"title":"Markdown Press","categories":["frontend"],"tags":["html","markdown"]},"prevItem":{"title":"\u7981\u6b62 body \u5143\u7d20\u5728\u6d6e\u5c42\u4e0b\u6eda\u52a8","permalink":"/blog/2019/08/17/mute-body-element-when-popup-shows"},"nextItem":{"title":"Lite store with Hooks","permalink":"/blog/2019/07/15/lite-store-with-hooks"}},"content":"A plain boilerplate project to generate static websites from markdown files.\\n\\n> This project provides a naive way to generate static html files from markdown files, the robustness is still questionable. You\'d better use some framework such as [hexo](https://hexo.io/), [hugo](https://gohugo.io/), [jekyll](https://jekyllrb.com/), etc.\\n\\n\x3c!--truncate--\x3e\\n\\n## How it works\\n\\nThere is a property `templateParameters` in [html-webpack-plugin](https://github.com/jantimon/html-webpack-plugin), which helps to inject some `string` values into the template file.\\n\\n```js\\n// html-webpack-plugin\\n\\nconst htmlPlugins = new HtmlWebpackPlugin({\\n  template: \'path/to/template.html\',\\n  templateParameters: {\\n    title: \'new title\',\\n    content: \'new content\',\\n    footer: \'<footer>this is an html footer</footer>\',\\n  },\\n});\\n```\\n\\n```html\\n\x3c!-- template --\x3e\\n<!DOCTYPE html>\\n<html lang=\\"en\\">\\n  <head>\\n    <meta charset=\\"UTF-8\\" />\\n    <meta name=\\"viewport\\" content=\\"width=device-width, initial-scale=1.0\\" />\\n    <meta http-equiv=\\"X-UA-Compatible\\" content=\\"ie=edge\\" />\\n    <title><%= title%></title>\\n  </head>\\n\\n  <body>\\n    <section class=\\"content\\"><%= content %></section>\\n    <section class=\\"footer\\"><%= footer %></section>\\n  </body>\\n</html>\\n\\n\x3c!-- output --\x3e\\n<!DOCTYPE html>\\n<html lang=\\"en\\">\\n  <head>\\n    <meta charset=\\"UTF-8\\" />\\n    <meta name=\\"viewport\\" content=\\"width=device-width, initial-scale=1.0\\" />\\n    <meta http-equiv=\\"X-UA-Compatible\\" content=\\"ie=edge\\" />\\n    <title>new title</title>\\n  </head>\\n\\n  <body>\\n    <section class=\\"content\\">new content</section>\\n    <section class=\\"footer\\">\\n      <footer>this is an html footer</footer>\\n    </section>\\n  </body>\\n</html>\\n```\\n\\nThis helps to generate output html files dynamically.\\n\\nI choose [marked](https://github.com/markedjs/marked) for parsing markdown files, which return a string. Perfect, isn\'t it?\\n\\nAlthough the original `markedjs` is powerful enough to handle most usage cases, it doesn\'t support:\\n\\n- image size configuration, such as `![](src/to/image \\"100x200\\")` or `![](src/to/image \\"width=100px hegiht=200px\\")`.\\n\\n- `baseUrl` applied on raw html tags, such as `<img src=\\"path/to/image.png\\">`.\\n\\nI tweak a little to the original project, [here are the changes](https://github.com/AkatQuas/marked#forked-changes), which is the markdown parser used in this project. You can choose either one as long as that meets your requirement.\\n\\n[The complete repository](https://github.com/AkatQuas/mdpress)"},{"id":"/2019/07/15/lite-store-with-hooks","metadata":{"permalink":"/blog/2019/07/15/lite-store-with-hooks","source":"@site/blog/2019-07-15-lite-store-with-hooks.md","title":"Lite store with Hooks","description":"A brief example for using useContext, useReducer to create global store without other libraries.","date":"2019-07-15T00:00:00.000Z","formattedDate":"July 15, 2019","tags":[{"label":"reactjs","permalink":"/blog/tags/reactjs"},{"label":"hooks","permalink":"/blog/tags/hooks"}],"readingTime":0.92,"hasTruncateMarker":true,"authors":[],"frontMatter":{"title":"Lite store with Hooks","categories":["frontend","javascript","reactjs"],"tags":["reactjs","hooks"]},"prevItem":{"title":"Markdown Press","permalink":"/blog/2019/08/15/mdpress"},"nextItem":{"title":"Mini Egg","permalink":"/blog/2019/05/20/mini-egg"}},"content":"A brief example for using `useContext`, `useReducer` to create global store without other libraries.\\n\\n\x3c!--truncate--\x3e\\n\\n```javascript\\n/* reducer for useReducer */\\nconst authReducer = (state, action) => {\\n  switch (action.type) {\\n    case \'increment\':\\n      return {\\n        ...state,\\n        age: state.age + 1,\\n      };\\n    case \'login\':\\n      const { name } = action;\\n      return {\\n        ...state,\\n        name,\\n      };\\n    default:\\n      return state;\\n  }\\n};\\n\\n/* global context, could be use in any nested component */\\nconst AuthContext = createContext(null);\\n\\n/* Top level provider to provide the store */\\nconst AuthProvider = ({ children }) => {\\n  const [state, dispatch] = useReducer(authReducer, {\\n    name: \'yang\',\\n    age: 11,\\n  });\\n  return (\\n    <AuthContext.Provider value={{ state, dispatch }}>\\n      {children}\\n    </AuthContext.Provider>\\n  );\\n};\\n```\\n\\n```javascript\\n/* consumer to use store */\\nconst NameLabel = (props) => {\\n  const { state, dispatch } = useContext(AuthContext);\\n\\n  return (\\n    <Fragment>\\n      <p>\\n        {state.name} @ {state.age}\\n      </p>\\n      <p>{props.label}</p>\\n      <button onClick={() => dispatch({ type: \'increment\' })}>increment</button>\\n      <button\\n        onClick={() =>\\n          dispatch({\\n            type: \'login\',\\n            name: Math.random().toString(16),\\n          })\\n        }\\n      >\\n        chang name\\n      </button>\\n    </Fragment>\\n  );\\n};\\n\\n/* Render Entry */\\nfunction App() {\\n  return (\\n    <AuthProvider>\\n      <NameLabel label=\\"example\\" />\\n    </AuthProvider>\\n  );\\n}\\n```"},{"id":"/2019/05/20/mini-egg","metadata":{"permalink":"/blog/2019/05/20/mini-egg","source":"@site/blog/2019-05-20-mini-egg.md","title":"Mini Egg","description":"A mini node server boilerplate on top of Koa, aiming to shed light on how Egg works.","date":"2019-05-20T00:00:00.000Z","formattedDate":"May 20, 2019","tags":[{"label":"nodejs","permalink":"/blog/tags/nodejs"},{"label":"eggjs","permalink":"/blog/tags/eggjs"}],"readingTime":1.515,"hasTruncateMarker":true,"authors":[],"frontMatter":{"title":"Mini Egg","categories":["web server"],"tags":["nodejs","eggjs"]},"prevItem":{"title":"Lite store with Hooks","permalink":"/blog/2019/07/15/lite-store-with-hooks"},"nextItem":{"title":"Learn some GraphQL","permalink":"/blog/2019/05/05/graphql"}},"content":"A mini node server boilerplate on top of Koa, aiming to shed light on how [Egg](https://github.com/eggjs/egg/) works.\\n\\nSlightly different on how are the `ctx`, `app` initialized and used.\\n\\nYou should take it more like a shadow project for egg, rather than a framework, though, this project is suitable for small backend node project. You\'d better use something more robust in production.\\n\\n\x3c!--truncate--\x3e\\n\\n## Features\\n\\n- Static sever supported, the path can be configured in the `config/config.js`, which is relative to the directory `/app`.\\n\\n- Session supported.\\n\\n- Using [bunyan](https://github.com/trentm/node-bunyan) as logger, however the logger config is _hardcoded_.\\n\\n- Websocket, using [ws](https://github.com/websockets/ws). You have to set these variables (`token` for example) in the first connection in the url.\\n\\n```js\\n// client\\nconst wsc = new WebSocket(\\n  \'ws://localhost:8081/path-for-specific-websocket-server-instance?token=lmKam8IMg52dHbyCTk0A&uuid=hoO0TNpcIac0q7iXM139oQ\'\\n);\\n\\n// server\\nwss.on(\'connection\', (ws, req) => {\\n  ws.on(\'message\', async (message) => {\\n    console.log(\'In thunder receive message: %s\', message);\\n    console.log(\'[Thunder] got headers: %o \', req.headers);\\n    const { query } = url.parse(req.url, true);\\n    console.log(\\n      \'[Thunder] got token \\"%s\\", got uuid \\"%s\\" \',\\n      query.token,\\n      query.uuid\\n    );\\n\\n    ws.send(\'We[thunder] have you \'.concat(message));\\n    ws.close();\\n  });\\n  ws.on(\'close\', async () => {\\n    console.log(\'thunder close\');\\n  });\\n});\\n```\\n\\n## Under the hood\\n\\nThe files in [`/app/loader`](https://github.com/AkatQuas/mini-egg/tree/master/app/loader) help you to manually register those functions or instances in the `app` fields, such as `controller`, `service`, `logger` etc.\\n\\n```javascript\\nconst app = new Koa();\\n\\n// extend the context in app, mounting controller,\\n// service, logger, database connection, model, etc\\nloadLogger(app);\\nloadController(app);\\nloadService(app);\\n\\n// apply middleware, body, json, csrf, staticServer, etc\\napp.use(sessionMiddle(app));\\napp.use(bodyMiddle);\\napp.use(staticMiddle);\\n\\n// add router to handle requests\\napp.use(routerMiddle(app));\\n```\\n\\n> In some degree, these `loader` functions play the role of the `plugin` or `extensions`.\\n\\n## What\'s not included?\\n\\n- Server side rendering Engine.\\n\\n- Process daemon such as `pm2`.\\n\\n- <del>Agent/Worker mode for robust.</del>\\n\\n- Plugin extensions.\\n\\n- Testing Case.\\n\\n- Error Monitor.\\n\\n- Event trace."},{"id":"/2019/05/05/graphql","metadata":{"permalink":"/blog/2019/05/05/graphql","source":"@site/blog/2019-05-05-graphql.md","title":"Learn some GraphQL","description":"Learning the GraphQL.","date":"2019-05-05T00:00:00.000Z","formattedDate":"May 5, 2019","tags":[{"label":"graphql","permalink":"/blog/tags/graphql"}],"readingTime":2.765,"hasTruncateMarker":true,"authors":[],"frontMatter":{"title":"Learn some GraphQL","categories":["frontend","graphql"],"tags":["graphql"]},"prevItem":{"title":"Mini Egg","permalink":"/blog/2019/05/20/mini-egg"},"nextItem":{"title":"Wish Reply Bot","permalink":"/blog/2019/02/03/wish-reply"}},"content":"Learning the GraphQL.\\n\\n[Project on GitHub](https://github.com/AkatQuas/kiddo-plays/tree/master/graphql-language).\\n\\n## Example Projects\\n\\n[space-explorer](https://github.com/AkatQuas/kiddo-plays/tree/master/graphql-language/space-explorer): Full-stack apps with Apollo, `React` in frontend, `sqlite`, and `apollo-server` in the backend.\\n\\n[quick-apollo](https://github.com/AkatQuas/kiddo-plays/tree/master/graphql-language/quick-apollo): Use `@apollo/client` with `React`, focusing on frontend usage.\\n\\n\x3c!--truncate--\x3e\\n\\n## Quick notes\\n\\nEach `type` in schema should have a corresponding field definition in the resolver. Those _Scalar_ type could be omitted unless you want to do some introspection.\\n\\n```graphql\\n## in schema\\ntype Parent {\\n  name: String!\\n  children: [Child!]\\n}\\n\\ntype Child {\\n  name: String!\\n  toys: [Toy]\\n}\\n\\ntype Toy {\\n  name: String!\\n  createdAt: Date\\n}\\n\\ntype Query {\\n  parent(name: String!): Parent\\n  child(name: String!): Child\\n  toy(name: String!): Toy\\n}\\n```\\n\\n```js\\n// in reslovers\\nmodule.exports = {\\n  // Query is defined in the top type level\\n  Query: {\\n    // there is a field `parent` in the type Query\\n    parent: (root, args) => {\\n      return new Parent(/* params */);\\n    },\\n    // there is a field `child` in the type Query\\n    child: (root, args) => {\\n      return new Child(/* params */);\\n    },\\n    // there is a field `toy` in the type Query\\n    toy: (root, args) => {\\n      return new Toy(/* params */);\\n    },\\n  },\\n\\n  // Parent is defined in the top type level\\n  Parent: {\\n    /* optional for scalar type */\\n    name: (root, args) => root.name,\\n\\n    /* the children field is used for query for the list of child, and it\'s recommend to declare it */\\n    children: (root, args) => {\\n      /* do something with the nested args */\\n      return [new Child(), new Child()];\\n    },\\n  },\\n\\n  // Child is defined in the top type level\\n  Child: {\\n    toys: (parent, args) => {\\n      /* do something with the nested args */\\n      return [new Toy(), new Toy()];\\n    },\\n  },\\n\\n  // Toy is defined in the top type level\\n  Toy: {\\n    createdAt: (parent, args) => {\\n      /* do something with the nested args */\\n      return new Date();\\n    },\\n  },\\n};\\n```\\n\\n[Builtin directives](https://www.apollographql.com/docs/apollo-server/schema/directives/#default-directives)\\n\\n[Custom directives](https://www.apollographql.com/docs/apollo-server/schema/creating-directives/)\\n\\n```js\\nconst { ApolloServer, gql, SchemaDirectiveVisitor } = require(\'apollo-server\');\\nconst { defaultFieldResolver } = require(\'graphql\');\\n\\n// Create (or import) a custom schema directive\\nclass UpperCaseDirective extends SchemaDirectiveVisitor {\\n  visitFieldDefinition(field) {\\n    const { resolve = defaultFieldResolver } = field;\\n    field.resolve = async function (...args) {\\n      const result = await resolve.apply(this, args);\\n      if (typeof result === \'string\') {\\n        return result.toUpperCase();\\n      }\\n      return result;\\n    };\\n  }\\n}\\n\\n// Construct a schema, using GraphQL schema language\\nconst typeDefs = gql`\\n  directive @upper on FIELD_DEFINITION\\n\\n  type Query {\\n    hello: String @upper\\n  }\\n`;\\n\\n// Provide resolver functions for your schema fields\\nconst resolvers = {\\n  Query: {\\n    hello: (parent, args, context) => {\\n      return \'Hello world!\';\\n    },\\n  },\\n};\\n\\n// Add directive to the ApolloServer constructor\\nconst server = new ApolloServer({\\n  typeDefs,\\n  resolvers,\\n  schemaDirectives: {\\n    upper: UpperCaseDirective,\\n  },\\n});\\n```\\n\\n[Authorization via Custom Directives](https://www.apollographql.com/docs/apollo-server/security/authentication/#authorization-via-custom-directives)\\n\\n## Useful Links\\n\\n- [Official GraphQL document](https://graphql.org/learn/).\\n\\n- [Apollo graphql](https://www.apollographql.com/).\\n\\n  - [subscription](https://www.apollographql.com/docs/apollo-server/data/subscriptions/)\\n\\n  - [uploading file](https://www.apollographql.com/docs/apollo-server/data/file-uploads/)\\n\\n  - [writing a schema](https://www.apollographql.com/docs/apollo-server/essentials/schema.html)\\n\\n    _ObjectType_\\n\\n    _Response Format_\\n\\n    _Input Type_\\n\\n  - [building a server](https://www.apollographql.com/docs/apollo-server/essentials/server.html)\\n\\n    It has something about the middlewares.\\n\\n  - [fetching data with resolvers](https://www.apollographql.com/docs/apollo-server/essentials/data.html)\\n\\n    [_Resolvers results_](https://www.apollographql.com/docs/apollo-server/essentials/data.html#result):\\n\\n    > related: [How graphql execute the Query](https://blog.apollographql.com/graphql-explained-5844742f195e)\\n    >\\n    > related: [Dataloader for caching](https://github.com/facebook/dataloader#using-with-graphql)\\n\\n    [_Parent argument_](https://www.apollographql.com/docs/apollo-server/essentials/data.html#parent): Every GraphQL query is a tree of function calls in the server.\\n\\n    [_Context argument_](https://www.apollographql.com/docs/apollo-server/essentials/data.html#context): The context is how you access your shared connections and fetchers in resolvers to get data.\\n\\n    [_Info argument_](https://www.prisma.io/blog/graphql-server-basics-demystifying-the-info-argument-in-graphql-resolvers-6f26249f613a): What is the `info` argument in the last position??\\n\\n- [GraphQL yoga](https://github.com/prisma/graphql-yoga/)"},{"id":"/2019/02/03/wish-reply","metadata":{"permalink":"/blog/2019/02/03/wish-reply","source":"@site/blog/2019-02-03-wish-reply.md","title":"Wish Reply Bot","description":"\u8fd9\u662f\u4e00\u4e2a\u5fae\u4fe1\u81ea\u52a8\u53d1\u9001\u795d\u798f\u548c\u56de\u590d\u795d\u798f\u7684\u5c0f\u673a\u5668\u4eba \ud83e\udd16\ufe0f\u3002","date":"2019-02-03T00:00:00.000Z","formattedDate":"February 3, 2019","tags":[{"label":"python","permalink":"/blog/tags/python"},{"label":"wechat","permalink":"/blog/tags/wechat"}],"readingTime":1.875,"hasTruncateMarker":true,"authors":[],"frontMatter":{"title":"Wish Reply Bot","tags":["python","wechat"]},"prevItem":{"title":"Learn some GraphQL","permalink":"/blog/2019/05/05/graphql"},"nextItem":{"title":"Huaban \u6252\u56fe\u5b9e\u8df5","permalink":"/blog/2019/01/25/huaban-pins"}},"content":"\u8fd9\u662f\u4e00\u4e2a\u5fae\u4fe1\u81ea\u52a8\u53d1\u9001\u795d\u798f\u548c\u56de\u590d\u795d\u798f\u7684\u5c0f\u673a\u5668\u4eba \ud83e\udd16\ufe0f\u3002\\n\\n## \u8bf4\u660e\\n\\n\u8bf7\u8c28\u614e\u4f7f\u7528\uff0c\u53ef\u80fd\u5b58\u5728\u5c01\u53f7\u5371\u9669\u3002\\n\\n\u9274\u4e8e\u56fe\u7247/\u8868\u60c5\u5305\u8fd9\u7c7b\u4fe1\u606f\u7684\u5206\u6790\u6210\u672c\u592a\u9ad8\uff0c\u4e14\u51c6\u786e\u5ea6\u65e0\u6cd5\u4fdd\u8bc1\u3002\u5f53\u524d\u53ea\u652f\u6301\u6587\u672c\u6d88\u606f\u7684\u5904\u7406\u3002\\n\\n\u4e3b\u8981\u529f\u80fd\uff1a\\n\\n1. \u6328\uff08\u7fa4\uff09\u4e2a\uff08\u53d1\uff09\u795d\u798f\uff1a`auto_send_wish`.\\n\\n1. \u79d2\u56de\u795d\u798f\uff1a`auto_reply_wish`\uff0c\u79d2\u56de\u7684\u795d\u798f\u6587\u672c\u7b80\u5316\uff0c\u663e\u5f97\u66f4\u52a0\u81ea\u7136\u3002\\n\\n\u5e95\u5c42\u673a\u5668\u4eba\u6765\u6e90\u4e3a [itchat](https://itchat.readthedocs.io/zh/latest/)\u3002\\n\\n\x3c!--truncate--\x3e\\n\\n## \u4f7f\u7528\u4f53\u9a8c\\n\\n\u5148\u8dd1\u4e00\u56de\u7fa4\u53d1\u529f\u80fd\uff0c\u7136\u540e\u4e0a\u4eba\u5de5\u6765\u8fdb\u884c\u540e\u7eed\u5904\u7406\u3002\\n\\n\u7b49\u8fc7\u4e86\u65f6\u95f4\u70b9\uff0c\u5f00\u7740\u79d2\u56de\u529f\u80fd\uff0c\u7136\u540e\u5c31\u53ef\u4ee5\u53bb\u5b89\u5fc3\u505a\u522b\u7684\u4e8b\u60c5\u4e86\u3002\\n\\n\u5982\u679c\u4f60\u662f\u4e00\u4e2a\u793e\u4ea4\u8fbe\u4eba\uff0c\u5750\u7740\u90fd\u80fd\u6536\u5230\u5f88\u591a\u795d\u798f\uff0c\u5374\u53c8\u4e0d\u662f\u90a3\u4e48\u79ef\u6781\u5730\u4e3b\u52a8\u56de\u590d\uff0c\u5c31\u6267\u884c\u79d2\u56de\u7684\u529f\u80fd\u5427\u3002\\n\\n\u795d\u798f\u8bed\u7684\u81ea\u52a8\u62fc\u51d1\u5728`wish_txt.py`\u4e2d\u7684`randomWish`\u4e2d\u5b9e\u73b0\uff0c\u56e0\u4e3a\u52a0\u4e86 emoji\uff0c\u4f7f\u5f97\u795d\u798f\u53d8\u5f97\u6d3b\u6cfc\u4e86\u70b9\u3002\u795d\u798f\u8bed\u6587\u6848\u5f88\u666e\u901a\uff0c\u5982\u6709\u9700\u8981\uff0c\u53ef\u4ee5\u5728\u81ea\u884c\u66ff\u6362\u3002\\n\\n## \u4f7f\u7528\\n\\n```bash\\ngit clone git@github.com:AkatQuas/wish-reply-bot.git\\n\\ncd  wish-reply-bot\\n\\npip3 install -r requirements.txt\\n```\\n\\n## \u8fd0\u884c\\n\\n\u67e5\u770b\u5f53\u524d\u597d\u53cb\u5217\u8868\\n\\n```bash\\npython3 list-friends.py\\n```\\n\\n\u7ed9\u597d\u53cb\u6328\u4e2a\u5355\u72ec\u53d1\u9001\u795d\u798f\u3002\\n\\n\u4e3a\u4e86\u65b9\u4fbf\u8c03\u8bd5\u548c\u9690\u79c1\u95ee\u9898\uff0c\u5efa\u8bae\u5f15\u5165\u8be5\u6a21\u5757\uff0c\u7136\u540e\u8fdb\u884c\u4f20\u53c2\u8c03\u7528\uff0c\u793a\u4f8b\u5982\u4e0b\uff1a\\n\\n```python\\nimport auto_send_wish\\n\\ndef main():\\n    auto_send_wish.sendWish(send=True, me=\'\u4f60\u7684\u540d\u5b57\')\\n\\nif __name__ == \\"__main__\\":\\n    main()\\n```\\n\\n\u9488\u5bf9\u597d\u53cb\u7684\u795d\u798f\uff0c\u8fdb\u884c\u79d2\u56de\u3002\\n\\n```bash\\npython3 auto_reply_wish.py\\n```\\n\\n## \u6548\u679c\\n\\n![](https://github.com/AkatQuas/wish-reply-bot/raw/master/screenshot.png)\\n\\n## \u5927\u5bb6\u6625\u8282\u5feb\u4e50\uff01"},{"id":"/2019/01/25/huaban-pins","metadata":{"permalink":"/blog/2019/01/25/huaban-pins","source":"@site/blog/2019-01-25-huaban-pins.md","title":"Huaban \u6252\u56fe\u5b9e\u8df5","description":"\u9002\u7528\u65f6\u95f4 2019-01-25","date":"2019-01-25T00:00:00.000Z","formattedDate":"January 25, 2019","tags":[{"label":"nodejs","permalink":"/blog/tags/nodejs"}],"readingTime":3.645,"hasTruncateMarker":true,"authors":[],"frontMatter":{"title":"Huaban \u6252\u56fe\u5b9e\u8df5","tags":["nodejs"]},"prevItem":{"title":"Wish Reply Bot","permalink":"/blog/2019/02/03/wish-reply"},"nextItem":{"title":"Simple Argv Parser for node","permalink":"/blog/2018/12/21/node-argv"}},"content":"**\u9002\u7528\u65f6\u95f4 2019-01-25**\\n\\n## \u8d77\u56e0\\n\\n\u56e0\u4e3a\u82b1\u74e3\u8981\u5173\u95ed\u4e86\uff0c\u540c\u4e8b\u5728\u82b1\u74e3\u91c7\u96c6\u7684 1w6 \u4e2a\u56fe\u7247\u65e0\u6cd5\u88ab\u5728\u7ebf\u8bbf\u95ee\u4e86\uff0c\u9700\u8981\u8fdb\u884c\u4fdd\u5b58\u3002\u6240\u4ee5\u5c31\u5199\u4e86\u70b9\u811a\u672c\u5e2e\u5979\u4fdd\u5b58\u56fe\u7247\u3002\\n\\n\x3c!--truncate--\x3e\\n\\n## \u8fc7\u7a0b\\n\\n\u5728\u4e2a\u4eba\u4e3b\u9875\u5355\u4e2a\u91c7\u96c6\uff08\u4e0d\u662f\u753b\u677f\uff09\u8fdb\u884c\u6d4f\u89c8\uff0c\u53ef\u4ee5\u6293\u53d6\u5230\u4ee5\u4e0b\u7684 Ajax \u8bf7\u6c42\u3002\\n\\n```\\nhttp://login.meiwu.co/hxkkqippkx/pins/?jr91h12a&max=2239464418&limit=20&wfl=1\\n```\\n\\n\u5176\u4e2d`max`\u4e3a\u4e0a\u4e00\u6b21\u8bf7\u6c42\u7ed3\u679c\u4e2d\u6700\u540e\u4e00\u5f20\u91c7\u96c6\u56fe\u7247\u7684`pin_id`\u3002\u8868\u73b0\u903b\u8f91\u4e3a\u5c06\u91c7\u96c6\u96c6\u5408\u4e2d\u5927\u4e8e\u8be5`max`\u7684\u6570\u636e\uff0c\u53d6`limit`\u6761\u8fd4\u56de\uff0c\u5f53\u7136`limit`\u53ef\u4ee5\u8c03\u6574\u6210`100`\u3002\\n\\n\u8bf7\u6c42\u672c\u8eab\u4e2d\u643a\u5e26`cookie`\u7b49\u5fc5\u8981\u56e0\u7d20\uff0c\u53ef\u4ee5\u81ea\u884c\u6458\u53d6\u3002\u8fd9\u91cc\u6709\u4e2a[\u8bf7\u6c42\u7684\u4f8b\u5b50](https://github.com/AkatQuas/huaban-pins/blob/master/sample-curl.sh)\u3002\\n\\n\u8fd9\u91cc\u6709\u4e2a[\u8bf7\u6c42\u7ed3\u679c\u7684\u4f8b\u5b50](https://github.com/AkatQuas/huaban-pins/blob/master/sample-res.json)\u3002\\n\\n\u6bcf\u4e2a\u82b1\u74e3\u7684\u7ed3\u6784\u4e2d\u6709\u5982\u4e0b\u5fc5\u8981\u5b57\u6bb5\\n\\n```json\\n{\\n  \\"pin_id\\": 33579511,\\n  \\"user_id\\": \\"tongshi_id\\",\\n  \\"board_id\\": 3455962,\\n  \\"file_id\\": 7094309,\\n  \\"file\\": {\\n    \\"farm\\": \\"farm1\\",\\n    \\"bucket\\": \\"hbimg\\",\\n    \\"key\\": \\"dee9c9f1f9cf144fa103bd3120ca99677e116a4532b41-xGFBEv\\",\\n    \\"type\\": \\"image/jpeg\\",\\n    \\"width\\": 740,\\n    \\"height\\": 340,\\n    \\"frames\\": 1\\n  },\\n  \\"media_type\\": 2,\\n  \\"source\\": \\"fun.alipay.com\\",\\n  \\"link\\": \\"http://fun.alipay.com/zhthd/index.htm?src=wdzfb_bottom02\\",\\n  \\"raw_text\\": \\"\u597d\u7c89, \u597d\u591a\u5b57,\u597d\u591a\u5143\u7d20. \u8d26\u6237\u901a\u4e3a\u4f60\u7684\u5f02\u5730\u604b\u60c5\u62a4\u822a - \u652f\u4ed8\u5b9d \u77e5\u6258\u4ed8\uff01\\"\\n}\\n```\\n\\n\u5176\u4e2d `pin_id` \u6709\u52a9\u4e8e\u4e0b\u4e00\u671f\u8bf7\u6c42\u3002`file`\u4e2d\u7684`key`\u6709\u52a9\u4e8e\u83b7\u5f97\u56fe\u7247\u6700\u540e\u7684\u5730\u5740\u3002\\n\\n\u4e8e\u662f\u5f88\u660e\u663e\u5730\uff0c\u5c31\u53ea\u6709\u4e24\u6b65\u8981\u505a\uff1a\\n\\n1. \u5c06\u6240\u6709\u91c7\u96c6\u7684\u7ed3\u679c\u8bf7\u6c42\u5230\u672c\u5730\u4fdd\u5b58\u8d77\u6765\u3002[\u91c7\u96c6\u7ed3\u679c\u6240\u9700\u811a\u672c](https://github.com/AkatQuas/huaban-pins/blob/master/get-pins.js)\\n\\n1. \u6839\u636e\u91c7\u96c6\u7684\u6570\u636e\u4e2d\u56fe\u7247\u7684\u4fe1\u606f\uff0c\u62fc\u51fa\u56fe\u7247\u5730\u5740\uff0c\u8bf7\u6c42\u5e76\u4fdd\u5b58\u5230\u672c\u5730\u3002[\u4fdd\u5b58\u56fe\u7247\u6240\u9700\u811a\u672c](https://github.com/AkatQuas/huaban-pins/blob/master/main-down.js)\\n\\n\u5f88\u5e78\u8fd0\u7684\u662f\uff0c\u6240\u6709\u7684\u56fe\u7247\u90fd\u5728\u82b1\u74e3\u7684 cdn \u5b58\u653e\uff0c\u5730\u5740\u5f62\u5982`hash`\u90e8\u5206\u4f1a\u5728\u7b2c\u4e00\u6b65\u7684\u7ed3\u679c\u627e\u5230\u3002\\n\\n```\\nhttp://img.hb.meiwu.co/${hash}\\n```\\n\\n\u5982\u628a\u4e0a\u9762\u7684`key`\u62fc\u5230\u8fd9\u4e2a\u5730\u5740\u540e\u9762\u90e8\u5206\uff0c\u53ef\u4ee5\u5f97\u5230\u5730\u5740\uff1a`http://img.hb.meiwu.co/dee9c9f1f9cf144fa103bd3120ca99677e116a4532b41-xGFBEv` \uff0c\u4e5f\u5c31\u662f\u4e0b\u9762\u7684\u56fe\\n\\n![\u6ca1\u56fe\uff1f\u82b1\u74e3\u70b8\u4e86\uff1f\uff01](http://img.hb.meiwu.co/dee9c9f1f9cf144fa103bd3120ca99677e116a4532b41-xGFBEv)\\n\\n\u4e8e\u662f\u4e4e\uff0c\u5c31\u53ef\u4ee5\u6279\u91cf\u4e0b\u8f7d\u4e86\u3002\\n\\n\u4e0b\u8f7d\u91c7\u7528\u4e86[aria2c](https://aria2.github.io/)\u3002\\n\\n## \u8e29\u5751\\n\\n\u82b1\u74e3 CDN \u5bf9 IP \u6709\u9650\u5236\uff0c\u5927\u7ea6 500 \u5f20\u7684\u9891\u7e41\u8bf7\u6c42\u4e4b\u540e\u5c31\u88ab\u9650\u5236\uff0c\u4e8e\u662f\u505a\u4e86\u4e00\u4e0b\u5ef6\u65f6\u5904\u7406\u3002\u4fd7\u79f0 IP \u51b7\u5374\u3002\\n\\n\u5177\u4f53\u505a\u6cd5\u4e3a\uff1a\\n\\n- \u5c06`worker`\u4e2d\u7684\u6587\u4ef6\u5168\u90e8\u79fb\u52a8\u5230`done`\u6587\u4ef6\u5939\uff0c\u8fdb\u884c\u6e05\u7a7a\u3002\\n\\n- \u5c06\u91c7\u96c6\u5230\u7684\u6536\u85cf\u7ed3\u679c\u96c6`source`\u6587\u4ef6\u5939\u4e2d\u53d6 4 \u4e2a JSON \u6587\u4ef6\u653e\u5230`worker`\u6587\u4ef6\u5939\\n\\n- \u4e0b\u8f7d\u811a\u672c\u8bfb\u53d6`worker`\u6587\u4ef6\u5939\u4e2d\u7684\u6587\u4ef6\uff0c\u8fdb\u884c\u4e0b\u8f7d\uff0c\u5b58\u50a8\u5230`output`\u6587\u4ef6\u5939\u3002\\n\\n- \u4e0b\u8f7d\u5b8c\u6210\u540e\uff0c\u7ed3\u675f\u8fdb\u7a0b\u3002\\n\\n\u4e3a\u4e86\u81ea\u52a8\u5316\u6267\u884c\u8fd9\u4e2a\u5faa\u73af\uff0c\u5c31\u6709\u4e86\u4e0b\u9762\u7684\u811a\u672c\u3002\u5b83\u76d1\u542c\u5230`nohup`\u5305\u88f9\u7684\u8fdb\u7a0b\u7684\u7ed3\u675f\u540e\uff0c\u518d\u6b21\u542f\u52a8`nohup`\uff0c\u6765\u91cd\u590d\u8fd9\u4e2a\u8fc7\u7a0b\u3002\\n\\n```javascript\\nconst shell = require(\'shelljs\');\\nconst fs = require(\'fs-extra\');\\nconst resolve = require(\'path\').resolve;\\n\\nconst sourceDir = resolve(__dirname, \'source\');\\nconst script = \'nohup npm run download &\';\\nfunction runOne() {\\n  shell.exec(script, { silent: true, async: true }, (code, stdout, stderr) => {\\n    const length = fs\\n      .readdirSync(sourceDir)\\n      .filter((item) => item.endsWith(\'.json\')).length;\\n\\n    if (length > 0) {\\n      setTimeout(() => {\\n        runOne();\\n      }, 5000);\\n    } else {\\n      console.log(\\"no files, job\'s done\\");\\n    }\\n  });\\n}\\n\\nrunOne();\\n```\\n\\n\u5f53\u7136\u8fd8\u6709\u66f4\u597d\u7684\u505a\u6cd5\uff0c\u9650\u4e8e\u65f6\u95f4\uff0c\u5c31\u4e0d\u505a\u5c1d\u8bd5\u4e86\u3002\\n\\n[\u5b8c\u6574\u7684\u9879\u76ee\u5730\u5740](https://github.com/AkatQuas/huaban-pins)"},{"id":"/2018/12/21/node-argv","metadata":{"permalink":"/blog/2018/12/21/node-argv","source":"@site/blog/2018-12-21-node-argv.md","title":"Simple Argv Parser for node","description":"\u4e00\u65f6\u5174\u8d77\uff0c\u5199\u4e86\u4e00\u4e2a node \u53ef\u7528\u7684\u8f7b\u4f9d\u8d56\u547d\u4ee4\u884c\u53c2\u6570\u89e3\u6790\u811a\u672c\u3002","date":"2018-12-21T00:00:00.000Z","formattedDate":"December 21, 2018","tags":[{"label":"nodejs","permalink":"/blog/tags/nodejs"}],"readingTime":2.22,"hasTruncateMarker":true,"authors":[],"frontMatter":{"title":"Simple Argv Parser for node","categories":["command line"],"tags":["nodejs"]},"prevItem":{"title":"Huaban \u6252\u56fe\u5b9e\u8df5","permalink":"/blog/2019/01/25/huaban-pins"},"nextItem":{"title":"Garbage Collector in C","permalink":"/blog/2018/11/14/garbage-collector-in-c"}},"content":"\u4e00\u65f6\u5174\u8d77\uff0c\u5199\u4e86\u4e00\u4e2a node \u53ef\u7528\u7684\u8f7b\u4f9d\u8d56\u547d\u4ee4\u884c\u53c2\u6570\u89e3\u6790\u811a\u672c\u3002\\n\\n\x3c!--truncate--\x3e\\n\\n\u8fd9\u91cc\u6709\u4e2a\u7b80\u5355\u7684\u4e8b\u5b9e\uff0c`process.argv` \u662f\u5b57\u7b26\u4e32\u6570\u7ec4\uff0c\u5305\u542b\u4e86\u6267\u884c\u547d\u4ee4\uff0c\u6267\u884c\u6587\u4ef6\uff0c\u6267\u884c\u53c2\u6570\u3002\\n\\n```javascript\\nprocess.argv.slice(2);\\n```\\n\\n\u5f88\u76f4\u89c2\u5730\uff0c\u5bf9\u4e8e\u666e\u901a\u6587\u672c\u5b57\u7b26\u4e32\uff0c\u4f7f\u7528\u7f16\u8bd1\u539f\u7406\u7684\u65b9\u5f0f\u6765\u5bf9\u5176\u89e3\u6790\u662f\u5f88\u7b80\u5355\u800c\u6709\u6548\u5730\u3002\\n\\n**\u8bed\u6cd5\u89c4\u5219**\\n\\n```bash\\nnode [js_file] --var1 value1 --var2=value2 \\\\\\n      --var2=value22 --var3 -var4 value4 \\\\\\n      ------var5 value5\\n```\\n\\n1. \u4e00\u4e2a\u6216\u4ee5\u4e0a\u7684\u77ed\u5212\u7ebf `-` \u4f5c\u4e3a\u53c2\u6570\u6807\u5fd7\uff0c\u6216\u79f0 _\u952e_\\n\\n1. \u77ed\u5212\u7ebf\u540e\u7d27\u8ddf\u7684\u662f\u5408\u6cd5\u7684\u53d8\u91cf\u540d\\n\\n1. \u4ee5\u7a7a\u683c `&nbsp;` \u6216\u8005\u7b49\u53f7 `=` \u4f5c\u4e3a\u952e\u503c\u7684\u5206\u9694\\n\\n1. \u5982\u679c\u4ec5\u6709\u952e\uff0c\u6ca1\u6709\u503c\uff0c\u5219\u8be5\u952e\u7684\u503c\u7f6e\u4e3a\u5e03\u5c14\u503c `true`\\n\\n1. \u5982\u679c\u503c\u4e3a `\'true\'` / `\'false\'` \u5b57\u9762\u91cf\u8868\u8fbe\u5f0f\uff0c\u5c06\u4f1a\u5185\u7f6e\u8f6c\u6362\u6210\u5bf9\u5e94\u7684\u5e03\u5c14\u503c `true` / `false`\u3002\\n\\n1. \u5982\u679c\u6ca1\u6709\u952e\uff0c\u53ea\u6709\u503c\uff0c\u62a5\u9519\\n\\n1. \u540c\u4e00\u4e2a\u952e\u5206\u914d\u4e86\u591a\u4e2a\u503c\uff0c\u5c31\u628a\u8fd9\u4e9b\u503c\u7ec4\u5408\u6210\u4e00\u4e2a\u6570\u7ec4\\n\\n\u89e3\u6790\u65f6\u4e0d\u652f\u6301\u4e8c\u7ea7\u5b50\u547d\u4ee4\u3002\\n\\n```bash\\nnode [js_file] subcommand --var1 value1\\n```\\n\\n<details>\\n<summary>\\n\\n\u5148\u660e\u786e\u4e86\u8fd9\u4e9b\u6a21\u5f0f\uff0c\u5c31\u53ef\u4ee5\u5f00\u59cb\u5199\u76f8\u5e94\u7684\u8bcd\u6cd5\u5206\u6790\u51fd\u6570\uff0c\u8bed\u6cd5\u5206\u6790\u51fd\u6570\uff0c\u6700\u540e `parse` \u6765\u5f97\u5230\u4ea7\u51fa\u3002\\n\\n</summary>\\n\\n\u8fd9\u662f\u4e00\u4e2a\u6781\u5176\u7b80\u5355\u7684\u7f16\u8bd1\u8fc7\u7a0b\u3002\\n\\n1. \u5c06 `argv` \u4eec\u7ec4\u88c5\u6210\u4e00\u4e2a\u5b8c\u6574\u7684\u5b57\u7b26\u4e32\uff0c`join`\uff1b\\n\\n1. \u6309\u5355\u4e2a\u5b57\u7b26\u6b65\u8fdb\uff0c`tokenize` \u5f97\u5230\u5404\u4e2a `token`\uff0c\u5728\u5f53\u524d\u60c5\u5f62\u4e0b\u53ea\u6709\u4e24\u4e2a `token` \u7c7b\u578b\uff0c**\u952e** \u4e0e **\u503c**\uff1b\uff08\u4e8b\u5b9e\u4e0a\uff0c\u8fd9\u4e9b `token` \u7ec4\u6210\u4e86\u4e00\u4e2a\u5355\u94fe\u8868\u3002\uff09\\n\\n1. \u6309 `token` \u6b65\u8fdb\u5f00\u59cb `parse`\uff0c\u540c\u65f6\u8fdb\u884c `code generation`\uff0c\u5f53\u524d\u60c5\u5f62\u4e0b\u662f\u5bf9\u4e00\u4e2a\u7b80\u5355\u5bf9\u8c61 (`Object.create(null) \u5f97\u5230`) \u8fdb\u884c\u952e\u503c\u7684\u521b\u5efa\u4e0e\u4fee\u6539\u3002\\n\\n1. \u6700\u540e\u5f97\u5230\u7684 _\u6570\u636e\u5bf9\u8c61_ \u89e3\u6790\u7ed3\u679c\u3002\\n\\n</details>\\n\\n\u5b8c\u6574\u7684\u9879\u76ee\u4ee3\u7801\u5728[\u8fd9\u91cc](https://github.com/AkatQuas/simple-argv-parser)\u3002"},{"id":"/2018/11/14/garbage-collector-in-c","metadata":{"permalink":"/blog/2018/11/14/garbage-collector-in-c","source":"@site/blog/2018-11-14-garbage-collector-in-c.md","title":"Garbage Collector in C","description":"This tutorial comes from here.","date":"2018-11-14T00:00:00.000Z","formattedDate":"November 14, 2018","tags":[{"label":"garbage collector","permalink":"/blog/tags/garbage-collector"}],"readingTime":10.895,"hasTruncateMarker":true,"authors":[],"frontMatter":{"title":"Garbage Collector in C","categories":["programming language","garbage collector"],"tags":["garbage collector"]},"prevItem":{"title":"Simple Argv Parser for node","permalink":"/blog/2018/12/21/node-argv"},"nextItem":{"title":"Learn some jQuery","permalink":"/blog/2018/11/08/jquery"}},"content":"This tutorial comes from [here](http://journal.stuffwithstuff.com/2013/12/08/babys-first-garbage-collector/).\\n\\nIn this post, the author managed to whip up a basic [mark-and-sweep](<http://en.wikipedia.org/wiki/Garbage_collection_(computer_science)#Na.C3.AFve_mark-and-sweep>) collector.\\n\\nGarbage collection is one of the more shark-infested waters of programming, but in this post, the author provide us a nice kiddie pool to paddle around in.\\n\\n\x3c!--truncate--\x3e\\n\\n## reduce, reuse, recycle\\n\\nThe basic idea behind garbage collection is that the language appears to have access to infinite memory. The developer can just keep allocating and allocating and allocating and, as if by magic, it never fails.\\n\\nOf course, machines don\'t have infinite memory. So the awy the implementation does this is that when it needs to allocate a bit of memory and realizes it\'s running low, it collects _garbage_.\\n\\n_Garbage_ in this context means memory it previously allocated that is no longer being used. For the illusion of infinite memory to work, the language needs to be very safe about _no longer being used_. It would be no fun if random objects just stared getting reclaimed while your program was trying to access them.\\n\\nIn order to be collectible, the language has to ensure there\'s no way for the program to use that object again. If it can\'t get a reference to object, then it obviously can\'t use it again. So the definition of _in use_ is actually pretty simple:\\n\\n1. Any object that\'s being referenced by a variable that\'s still in scope is in use.\\n\\n1. Any object that\'s referenced by another object that\'s in use is in use.\\n\\nThe second rule is the recursive one. If object A is referenced by a variable, and has some field that references object B, then B is in use since you can get to it through A.\\n\\nThe end result is a graph of _reachable_ objects - all the objects in the world you can get to by starting at a variable and traversing through objects. Any object _not_ in that graph of reachable objects is dead to the program and its memory is ripe for a reaping.\\n\\n## marking and sweeping\\n\\nThere\'s a [bunch of different](<http://en.wikipedia.org/wiki/Garbage_collection_(computer_science)#Tracing_garbage_collectors>) ways you can implement the process of finding and reclaiming all the unused objects, but the simplest and first algorithm ever invented for it is called **mark-sweep**.\\n\\nIt works almost exactly like our definition of reachability:\\n\\n1. Starting at the roots, traverse the entire object graph. Every time you reach an object set a _mark_ bit on it to `true`.\\n\\n1. Once that\'s done, find all the objects whose mark bits are not set and delete them.\\n\\nThat\'s it.\\n\\n## a pair of objects\\n\\nBefore we can get to implementing those two steps, let\'s get a couple of preliminaries out of the way. We won\'t be actually implementing an interpreter for a language - no parser, bytecode, or any of that foolishness - but we do need some minimal amount of code to create some garbage to collect.\\n\\nLet\'s play pretend we\'re writing an interpreter for a little language. It\'s dynamically typed, and has two types of objects: **ints** and **pairs**. Here\'s an enum to identify an object\'s type:\\n\\n```c\\ntypedef enum {\\n    OBJ_INT,\\n    OBJ_PAIR\\n} ObjectType;\\n```\\n\\nA pair can be a pair of anything, two ints, an int and another pair, whatever. You can go surprisingly far with just that. Sine an object in the VM can be either of these, the typical way in C to implement it is with a [tagged union](http://en.wikipedia.org/wiki/Tagged_union).\\n\\nWe\'ll define it thus:\\n\\n```c\\ntypedef struct sObject {\\n    ObjectType type;\\n\\n    union {\\n        int value;\\n\\n        struct {\\n            struct sObject* head;\\n            struct sObject* tail;\\n        };\\n    };\\n} Object;\\n```\\n\\nThe main `Object` struct has a `type` field that identifies what kind of value it is - either an int or a pair. Then it has a union to hold the data for the int or pair. If your C is rusty, a union is a struct _where the fields overlap in memory_. Since a given object can only be an int or a pair, there\'s no reason to have memory in a single object for all three fields at the same time. A union does that. Groovy.\\n\\n## a minimal virtual machine\\n\\nNow we can wrap that in a little virtual machine structures. Its role in this story is to have a stack that stores the variables that are currently in scope. Most language VMs are either stack-based (like the JVM and CLR) or register-based (like Lua). In both cases, there is actually still a stack. It\'s used to store local variables and temporary variables needed in the middle of an expression.\\n\\nWe\'ll module that explicitly and simply like so:\\n\\n```c\\n#define STACK_MAX 256\\ntypedef struct {\\n    Object* stack[STACK_MAX];\\n    int stackSize;\\n} VM;\\n```\\n\\nNow we\'ve got our basic data structure in place, let\' slap together a bit of code to create some stuff. First, let\'s write a function that creates and initializes a VM:\\n\\n```c\\nVM* newVM() {\\n    VM* vm = malloc(sizeof(VM));\\n    vm->stackSize = 0;\\n    return vm;\\n}\\n```\\n\\nOnce we\'ve got a VM, we need to be able to manipulate its stack:\\n\\n```c\\nvoid push(VM* vm, Object* value) {\\n    assert(vm->stackSize < STACK_MAX, \\"Stack overflow!\\");\\n    vm->stack[vm->stackSize++] = value;\\n}\\n\\nObject* pop(VM* vm) {\\n    assert(vm->stackSize > 0, \\"Stack underflow!\\");\\n    return vm->stack[--vm->stackSize];\\n}\\n```\\n\\nOK, now we can stick stuff in variables, we need to be able to actually create objects. First a little helper function:\\n\\n```c\\nObject* newObject(VM* vm, ObjectType type) {\\n    Object* object = malloc(sizeof(Object));\\n    object->type = type;\\n    return objcet;\\n}\\n```\\n\\nThat does the actual memory allocation and set the type tag. We\'ll be revisiting this in a bit. Using that, we can write functions to push each kind of object onto the VM\'s stack:\\n\\n```c\\nvoid pushInt(VM* vm, int intValue) {\\n    Object* object = newObject(vm, OBJ_INT);\\n    object->value = intVaule;\\n    push(vm, object);\\n}\\n\\nObject* pushPair(VM* vm) {\\n    Object* object = newObject(vm, OBJ_PAIR);\\n    object->tail = pop(vm);\\n    object->head = pop(vm);\\n\\n    push(vm, object);\\n    return object;\\n}\\n```\\n\\nThat\'s it for the little VM. If we had a parser, and an interpreter that called those functions, we\'d have an honest to God language on our hands. And, if we had infinite memory, it would even be able to run real programs. Since we don\'t, let\'s start collecting some garbage.\\n\\n## marky mark\\n\\nThe first phase is marking. We need to walk all the reachable objects and set their mark bit. The first thing we need then is to add a mark bit to `Object`:\\n\\n```c\\ntypedef struct sObject {\\n    unsigned char marked;\\n    ObjectType type;\\n\\n    union {\\n        int value;\\n\\n        struct {\\n            struct sObject* head;\\n            struct sObject* tail;\\n        };\\n    };\\n} Object;\\n```\\n\\nWhen we create a new object, we\'ll modify `newObject()` to initialize `marked` to zero. To mark all the reachable objects, we start with the variables that are in memory, so that means walking the stack. That looks like this:\\n\\n```c\\nvoid mark(Object* object) {\\n    object->marked = 1;\\n}\\n\\nvoid markAll(VM* vm) {\\n    for (int i = 0; i < vm->stackSize; i++) {\\n        mark(vm->stack[i]);\\n    }\\n}\\n```\\n\\nThis is the most important bit, literally. We\'ve marked the object itself as reachable, but remember we also need to handle references in objects: reachability is _recursive_. If the object is a pair, its two fields are reachable too. Handling that is simple, and we will do the checking for _cycles_ to avoid the loop:\\n\\n```c\\nvoid mark(Object* object) {\\n    if (object->marked) return;\\n\\n    object->marked = 1;\\n\\n    if (object->type == OBJ_PAIR) {\\n        mark(object->head);\\n        mark(object->tail);\\n    }\\n}\\n```\\n\\nNow we can call `markAll()` and it will correctly mark every reachable object in memory.\\n\\n\\\\*\\\\* sweepy sweep\\n\\nThe next phase is to sweep through all the objects we\'ve allocated and free any of them that are not marked. But there\'s a problem here: all the unmarked objects are, by definition, unreachable!\\n\\nThe VM has implemented the _language\'s_ semantics for objects references, so we\'re only storing pointers to objects in variables and the pair elements. As soon as an object is no longer pointed to by one of those, we\'ve lost it entirely and actually leaked memory.\\n\\nThe trick to solve this is that the VM can have its _own_ references to objects that are distinct from the semantics that are visible the language user. In other words, we can keep track of them ourselves.\\n\\nThe simplest way to do this is to just maintain a linked list of every object we\'ve ever allocated. We\'ll extend `Object` itself to be a node in that list:\\n\\n```c\\ntypedef struct sObject {\\n    /* the next object in the list of all objects */\\n    struct sObject* next;\\n\\n    unsigned char marked;\\n\\n    ObjectType type;\\n\\n    union {\\n        int value;\\n\\n        struct {\\n            struct sObject* head;\\n            struct sObject* tail;\\n        };\\n    };\\n} Object;\\n```\\n\\nThe VM will keep track of the head of that list:\\n\\n```c\\n#define STACK_MAX 256\\n\\ntypedef struct {\\n    /* the first object in the list of all objects */\\n    Object* firstObject;\\n\\n    Object* stack[STACK_MAX];\\n    int stackSize;\\n} VM;\\n```\\n\\nIn `newVM()` we\'ll make sure to initialize `firstObject` to NULL. Whenever we create an object, we add it to the list:\\n\\n```c\\nObject* newObject(VM* vm, ObjectType type) {\\n    Object* object = malloc(sizeof(Object));\\n    object->type = type;\\n    object->marked = 0;\\n\\n    /* insert it into the list of allocated objcets */\\n    object->next = vm->firstObject;\\n    vm->firstObject = object;\\n\\n    return object;\\n}\\n```\\n\\nThis way, even if the _language_ can\'t find an object, the language _implementation_ still can. To sweep through and delete the unmarked objects, we just need to traverse the list:\\n\\n```c\\nvoid sweep(VM* vm) {\\n    Object** object = &vm->firstObject;\\n\\n    while(*object) {\\n        if (!(*object)->marked) {\\n            /* This object wasn\'t reached, so remove it from the list and free it. */\\n            Object* unreached = *object;\\n            *object = unreached->next;\\n            free(unreached);\\n        } else {\\n            /* This object was reached, so unmarkd it (for the next GC) and move on to the next. */\\n            (*object)->marked = 0;\\n            object = &(*object)->next;\\n        }\\n    }\\n}\\n```\\n\\nThat code is a bit tricky to read because of that pointer to a pointer, but if you walk through, you can see it\'s pretty straightforward. It just walks the entire linked list. Whenever it hits an object that isn\'t marked, it frees its memory and removes it from the list. When this is done, we will have deleted every unreachable object.\\n\\nCongratulation! We have a garbage collector! There\'s just one missing piece: actually calling it. First let\'s wrap the two phases together:\\n\\n```c\\nvoid gc(VM* vm) {\\n    markAll(vm);\\n    sweep(vm);\\n}\\n```\\n\\nYou couldn\'t ask for a more obvious mark-sweep implementation. The trickiest part is figuring out when to actually call this. What does \\"low on memory\\" even mean, especially on modern computers with near-infinite virtual memory?\\n\\nIt turns out there\'s no precise right or wrong answer here. It really depends on what you\'re using the VM for and what kind of hardware it runs on.\\n\\nWe\'ll extend `VM` to track how many we\'ve created:\\n\\n```c\\ntypedef struct {\\n    /* The total number of currently allocated objects */\\n    int numObjects;\\n\\n    /* The number of objects required to trigger a GC */\\n    int maxObjects;\\n\\n    Object* firstObject;\\n\\n    Object* stack[STACK_MAX];\\n    int stackSize;\\n} VM;\\n```\\n\\nAnd then initialize them:\\n\\n```c\\nVM* newVM() {\\n\\n    VM* vm = malloc(sizeof(VM));\\n    vm->stackSize = 0;\\n\\n    vm->numObjects = 0;\\n    vm->maxObjects = INITIAL_GC_THRESHOLD;\\n\\n    return vm;\\n}\\n```\\n\\nThe `INITIAL_GC_THRESHOLD` will be the number of objects at which you kick off the _first_ GC. A smaller number is more conservative with memory, a large number spends less time on garbage collection.\\n\\nWhenever we create an object, we increment `numObject` and run a collection if it reaches the max:\\n\\n```c\\nObject* newObject(VM* vm, ObjectType type) {\\n    if (vm->numObjects == vm->maxObjects) gc(vm);\\n\\n    Object* object = malloc(sizeof(Object));\\n    object->type = type;\\n    object->marked = 0;\\n\\n    object->next = vm->firstObject;\\n    vm->firstObject = object;\\n\\n    vm->numObjects++;\\n    return object;\\n}\\n```\\n\\nWe\u2019ll also tweak `sweep()` to decrement numObjects every time it frees one.\\n\\n```c\\nvoid sweep(VM* vm) {\\n    Object** object = &vm->firstObject;\\n\\n    while(*object) {\\n        if (!(*object)->marked) {\\n            /* This object wasn\'t reached, so remove it from the list and free it. */\\n            Object* unreached = *object;\\n            *object = unreached->next;\\n            free(unreached);\\n            vm->numObjects--;\\n        } else {\\n            /* This object was reached, so unmarkd it (for the next GC) and move on to the next. */\\n            (*object)->marked = 0;\\n            object = &(*object)->next;\\n        }\\n    }\\n}\\n```\\n\\nFinally, we modify `gc()` to adjust the max:\\n\\n```c\\nvoid gc(VM* vm) {\\n    markAll(vm);\\n    sweep(vm);\\n\\n    vm->maxObjects = vm->numObjects * 2;\\n}\\n```\\n\\nAfter every collection, we update `maxObjects` based on the number of _live_ objects left after the collection. The multiplier there lets our heap grow as the number of living objects increases. Likewise, it will shrink automatically if a bunch of objects end up being freed.\\n\\nThere are a ton of optimizations you can build on top of this (and in things like GC and programming languages, optimization is 90% of the effort), but the core code here is a legitimate real GC. It\u2019s very similar to the collectors that were in Ruby and Lua until recently. You can ship production code that uses something exactly like this. Now go build something awesome!\\n\\nAs for the [source code](/downloads/code/garbage-collector-in-c/main.c) and the [Makefile](/downloads/code/garbage-collector-in-c/Makefile.txt).\\n\\nRelated [git repo](https://github.com/munificent/mark-sweep)."},{"id":"/2018/11/08/jquery","metadata":{"permalink":"/blog/2018/11/08/jquery","source":"@site/blog/2018-11-08-jquery.md","title":"Learn some jQuery","description":"Literally, I don\'t learn much about jQuery before I take it seriously.","date":"2018-11-08T00:00:00.000Z","formattedDate":"November 8, 2018","tags":[{"label":"jquery","permalink":"/blog/tags/jquery"}],"readingTime":2.82,"hasTruncateMarker":true,"authors":[],"frontMatter":{"title":"Learn some jQuery","categories":["frontend","javascript","jquery"],"tags":["jquery"]},"prevItem":{"title":"Garbage Collector in C","permalink":"/blog/2018/11/14/garbage-collector-in-c"},"nextItem":{"title":"Assembly","permalink":"/blog/2018/10/23/assembly"}},"content":"Literally, I don\'t learn much about jQuery before I take it seriously.\\n\\nSo I dive into the official website on [jQuery](https://jquery.com/).\\n\\n\ud83d\ude07 What a challenge!\\n\\n\x3c!--truncate--\x3e\\n\\n## Beautiful Snippets\\n\\n[Demo project](https://github.com/AkatQuas/kiddo-plays/tree/master/jQuery)\\n\\n### extend object\\n\\n```javascript\\nvar newObject = $.extend({}, firstObject, secondObject);\\nconsole.log(\'new \', newObject);\\nconsole.log(\'first \', firstObject);\\nconsole.log(\'second \', secondObject);\\n```\\n\\n### create an element and put it into DOM\\n\\n```javascript\\n$(\'<div />\')\\n  .attr({ class: \'append\' })\\n  .text(\'an appended div\')\\n  .appendTo(\'#content\');\\n\\n$(\'<div />\')\\n  .attr({ class: \'append\' })\\n  .text(\'an insert before div\')\\n  .insertBefore(\'#content\');\\n\\n$(\'<div />\')\\n  .attr({ class: \'append\' })\\n  .text(\'an insert after div\')\\n  .insertAfter(\'#content\');\\n\\n$(\'#content\').append(\\n  $(\'<div />\').attr(\'class\', \'append\').text(\'parent called append\')\\n);\\n```\\n\\n### event management with delegation, default parameters\\n\\n```javascript\\n$(\'#one\').on(\'click\', \'span\', { foo: \'bark\' }, function (e) {\\n  e.stopPropagation();\\n  e.preventDefault();\\n  console.log(e.pageX, e.pageY);\\n  console.log(e.type);\\n  console.log(e.data);\\n  console.log($(this));\\n  console.log(\'click p#one\');\\n});\\n```\\n\\n### custom events\\n\\n```javascript\\n// bad\\n$(\'.switch, .clapper\').on(\'click\', function () {\\n  var light = $(this).closest(\'.room\').find(\'.lightbulb\');\\n  if (light.is(\'.on\')) {\\n    light.removeClass(\'on\').addClass(\'off\');\\n  } else {\\n    light.removeClass(\'off\').addClass(\'on\');\\n  }\\n});\\n\\n// better\\n$(\'.lightbulb\')\\n  .on(\'light:toggle\', function (e) {\\n    var light = $(this);\\n    if (light.is(\'.on\')) {\\n      light.removeClass(\'on\').addClass(\'off\');\\n    } else {\\n      light.removeClass(\'off\').addClass(\'on\');\\n    }\\n  })\\n  .on(\'light:on\', function (e) {\\n    $(this).removeClass(\'off\').addClass(\'on\');\\n  })\\n  .on(\'light:off\', function (e) {\\n    $(this).removeClass(\'on\').addClass(\'off\');\\n  });\\n\\n$(\'.switch, .clapper\').click(function () {\\n  var room = $(this).closest(\'.room\');\\n  room.find(\'.lightbulb\').trigger(\'light:toggle\');\\n});\\n```\\n\\n### ajax requests\\n\\n```javascript\\n$.getJSON(\'foo.json\', function (json) {\\n  console.log(json);\\n  $(\'<h1>\').text(json.title).appendTo(\'body\');\\n  $(\'<div class=\\"content\\">\').html(json.html).appendTo(\'body\');\\n})\\n  .fail(function (xhr, status, errorThrown) {\\n    alert(\'Sorry, there was a problem!\');\\n    console.log(\'Error: \' + errorThrown);\\n    console.log(\'Status: \' + status);\\n    console.dir(xhr);\\n  })\\n  .always(function (xhr, status) {\\n    alert(\'Sec request complete with status: \' + status);\\n  });\\n```\\n\\n### effects / animation\\n\\n```javascript\\n$(\'div.funtimes\').animate(\\n  {\\n    width: [\'+=50\', \'swing\'],\\n    opacity: [0.25, \'linear\'],\\n  },\\n\\n  // Duration\\n  800,\\n\\n  // Callback to invoke when the animation is finished\\n  function () {\\n    $(\'div.funtimes\')\\n      .animate({ height: \'+= 50\' }, 500)\\n      .queue(function (next) {\\n        $(this).text(\'funtimes queue\');\\n        $(this).dequeue();\\n\\n        // or call next to dequeue automatically\\n        // next();\\n      });\\n  }\\n);\\n```\\n\\n### plugins\\n\\n```javascript\\n// Plugin defaults \u2013 added as a property on our plugin function.\\n$.fn.hilight.defaults = {\\n  foreground: \'red\',\\n  background: \'yellow\',\\n};\\n\\n$.fn.hilight = function (options) {\\n  // Extend our default options with those provided.\\n  // Note that the first argument to extend is an empty\\n  // object \u2013 this is to keep from overriding our \\"defaults\\" object.\\n  var opts = $.extend({}, $.fn.hilight.defaults, options);\\n\\n  // Our plugin implementation code goes here.\\n\\n  // todo\\n};\\n\\n$.fn.showLinkLocation = function () {\\n  /*\\n    // ok\\n    this.filter(\\"a\\").each(function () {\\n        var link = $(this);\\n        link.append(\\" -> \\" + link.attr(\\"href\\"));\\n    });\\n    */\\n\\n  // better\\n  this.filter(\'a\').append(function () {\\n    return \' -> \' + this.href;\\n  });\\n\\n  return this;\\n};\\n\\n// using optinos to minimize plugin\\n// bad\\n$.fn.openPopup = function () {\\n  // Open popup code.\\n};\\n\\n$.fn.closePopup = function () {\\n  // Close popup code.\\n};\\n\\n// good\\n$.fn.popup = function (action) {\\n  if (action === \'open\') {\\n    // Open popup code.\\n  }\\n\\n  if (action === \'close\') {\\n    // Close popup code.\\n  }\\n};\\n```\\n\\n## Useful References\\n\\n- [i18n](https://github.com/AkatQuas/kiddo-plays/tree/master/jQuery/i18next)\\n\\n- [DOM]\\n\\n  - [selection](https://learn.jquery.com/using-jquery-core/selecting-elements/)\\n\\n  - [elements manipulating](https://learn.jquery.com/using-jquery-core/manipulating-elements/)\\n\\n  - [Understanding the jQuery-Object](https://learn.jquery.com/using-jquery-core/jquery-object/)\\n\\n  - [Traversing among the elements](https://learn.jquery.com/using-jquery-core/traversing/)\\n\\n  - [jQuery Utility Methods](https://learn.jquery.com/using-jquery-core/utility-methods/)\\n\\n    - [more](http://api.jquery.com/category/utilities/)\\n\\n  - [FAQ examples](https://learn.jquery.com/using-jquery-core/faq/)\\n\\n- [Events]\\n\\n  - [events binding basics](https://learn.jquery.com/events/event-basics/)\\n\\n  - [events handling examples](https://learn.jquery.com/events/handling-events/)\\n\\n  - [event delegation](https://learn.jquery.com/events/event-delegation/)\\n\\n  - [custom events](https://learn.jquery.com/events/introduction-to-custom-events/)\\n\\n  - [**event extensions**](https://learn.jquery.com/events/event-extensions/)\\n\\n- [Ajax](https://learn.jquery.com/ajax/)\\n\\n  - [Ajax Events](http://api.jquery.com/Ajax_Events/)\\n\\n- [Plugins](https://learn.jquery.com/plugins/basic-plugin-creation/)\\n\\n  - [Stateful Plugins](https://learn.jquery.com/plugins/stateful-plugins-with-widget-factory/)\\n\\n- [Performance](https://learn.jquery.com/performance/): minimize the operation on dom tree, most jobs should be done with in JavaScript\\n\\n  - [Detach Elements to Work with Them](https://learn.jquery.com/performance/detach-elements-before-work-with-them/)\\n\\n  - [Optimize selectors](https://learn.jquery.com/performance/optimize-selectors/)\\n\\n- [Code Organization](https://learn.jquery.com/code-organization/)\\n\\n- [jQuery UI, tl;dr](https://learn.jquery.com/jquery-ui/)\\n\\n- [jQuery Mobile](https://learn.jquery.com/jquery-mobile/)"},{"id":"/2018/10/23/assembly","metadata":{"permalink":"/blog/2018/10/23/assembly","source":"@site/blog/2018-10-23-assembly.md","title":"Assembly","description":"Awesome Assembly!","date":"2018-10-23T00:00:00.000Z","formattedDate":"October 23, 2018","tags":[{"label":"assembly","permalink":"/blog/tags/assembly"}],"readingTime":21.875,"hasTruncateMarker":true,"authors":[],"frontMatter":{"title":"Assembly","categories":["programming language","assembly"],"tags":["assembly"]},"prevItem":{"title":"Learn some jQuery","permalink":"/blog/2018/11/08/jquery"},"nextItem":{"title":"New a project using CLI","permalink":"/blog/2018/10/08/react-create-cli"}},"content":"[Awesome Assembly!](https://github.com/AkatQuas/kiddo-plays/tree/master/assembly)\\n\\n\u6709\u4e00\u6b21\u9762\u8bd5\u7684\u65f6\u5019\uff0c\u5bf9\u65b9\u95ee\u6211\u4e3a\u4ec0\u4e48\u5b66\u4e60\u6c47\u7f16\uff1f\u90a3\u4e2a\u65f6\u5019\u6211\u7684\u56de\u7b54\u662f\u51fa\u4e8e\u597d\u5947\uff0c\u7eaf\u7cb9\u968f\u4fbf\u5b66\u4e60\u4e00\u4e0b\u3002\\n\\n\u4f46\u4e8b\u5b9e\u4e0a\u662f\u5e0c\u671b\u901a\u8fc7 [ollydbg](http://www.ollydbg.de/) \u6765\u5f3a\u884c\u6539\u6c47\u7f16\u6307\u4ee4\u3002\u5f53\u7136\u8fd9\u4e2a\u8ba1\u5212\u6401\u6d45\u4e86\uff0c\u56e0\u4e3a\u914d\u7f6e\u73af\u5883\u5931\u8d25\u4e86\u3002\\n\\n\u56de\u60f3\u8d77\u6765\uff0c\u6709\u5982\u4e0b\u6536\u83b7\uff1a\\n\\n1. \u6c47\u7f16\u5176\u5b9e\u662f\u4e00\u79cd `imperative programming` \u7684\u8303\u5f0f\uff0c\u4ece\u6307\u4ee4\u6267\u884c\u89d2\u5ea6\u53bb\u5b8c\u6210\u6240\u6709\u7684\u4efb\u52a1\uff0c\u8fd9\u4e5f\u5bfc\u81f4\u4e86\u5b83\u7684\u62bd\u8c61\u7a0b\u5ea6\u662f\u5f88\u4f4e\u7684\u3002\\n\\n1. \u6c47\u7f16\u4f5c\u4e3a\u9ad8\u7ea7\u7a0b\u5e8f\u8bed\u8a00\u5230\u673a\u5668\u8bed\u8a00\u7684\u4e2d\u95f4\u5c42\uff0c\u6709\u5229\u4e8e\u7406\u89e3\u4ee3\u7801\u7684\u6267\u884c\u8fc7\u7a0b (procedure) \u7684\u8f6c\u79fb\u903b\u8f91\uff0c\u5728\u4e00\u5b9a\u5c42\u9762\u4e0a\u6709\u5229\u4e8e\u4f18\u5316\u4e0a\u5c42\u4ee3\u7801\u7684\u7f16\u5199\u3002\\n\\n   \u56e0\u4e3a\u4ee3\u7801\u5199\u5b8c\u4e4b\u540e\uff0c\u4f60\u5c31\u4f1a\u77e5\u9053\u4ed6\u7684\u5927\u81f4\u6267\u884c\u8fc7\u7a0b\uff0c\u6240\u4ee5\u4f60\u53ef\u4ee5\u53cd\u5411\u6765\u4f18\u5316\u4ee3\u7801\u7f16\u5199\uff0c\u5982\u51cf\u5c11\u4e0d\u5fc5\u8981\u7684\u7a0b\u5e8f\u8f6c\u79fb\uff0c\u4f7f\u7528\u66f4\u77ed\u8def\u5f84\u6765\u8fdb\u884c\u5185\u5b58\u8bbf\u95ee\u3002\\n\\n1. \u6c47\u7f16\u4f5c\u4e3a\u76f4\u63a5\u5bf9\u8bdd\u673a\u5668\u6307\u4ee4\u7684\u8bed\u8a00\uff0c\u53ef\u4ee5\u8ba9\u4f60\u5bf9\u4e8e CPU \u7684\u6267\u884c\uff0c\u5185\u5b58\u7684\u4f7f\u7528\u6709\u66f4\u6df1\u523b\u7684\u7406\u89e3\u3002\\n\\n\x3c!--truncate--\x3e\\n\\n## Set up\\n\\nWe can set up the DOS environment by two means.\\n\\n1. Installing [MS-DOS](https://github.com/Microsoft/MS-DOS) in the [Virtual Box](https://www.virtualbox.org/).\\n\\n   What you need are:\\n\\n   1. An dos image (soft disk)\\n\\n   1. A DOS ISO (CD-ROM)\\n\\n   Install them in the old-school way:\\n\\n   Open the Computer, copy the files in the soft disk to your virtual hard driver and reboot. If you are lucky enough, you would get the DOS:\\n\\n   ![](/images/assembly/dos-622.png)\\n\\n2. Mount a local folder to [DOS-BOX](https://www.dosbox.com/) (**Recommended**)\\n\\n   ![](/images/assembly/dos-box.png)\\n\\n   You can write the `asm` files in the host computer (Windows, MacOS, etc), and compile and debug them in **Dos-Box**.\\n\\n## Tricks\\n\\n### Debug Commands\\n\\n[Useful online pdf](http://kipirvine.com/asm/debug/debug_tutorial.pdf), [backup pdf file](https://github.com/AkatQuas/kiddo-plays/blob/master/assembly/debug_tutorial.pdf). All copy rights are reserved to the author whom I believe is [Kip Irvine](http://kipirvine.com/).\\n\\n### Addressing the memory\\n\\n1. `[idata]`, a constant for addressing the memory directly\\n\\n1. `[bx]`, using variable (register value)\\n\\n1. `[bx+idata]`, using variable (register value) and offset, aka `[bx].idata`\\n\\n1. `[bx+si/di]`, using two variables (two register values) , aka `[bx][si/di]`\\n\\n1. `[bx+si/di+idata]`, using two variables and offset, aka `[bx][si/di].idata`\\n\\n![](/images/assembly/addressing.png)\\n\\n### Flag Register in 8086\\n\\n![Amazing Flag Register in 8086](/images/assembly/flag-register.png)\\n\\n### DOSBox \u5e38\u7528\u547d\u4ee4 debug \u6a21\u5f0f\u4e0b\uff1a\\n\\n- -g \u6267\u884c\u5b8c exe \u8fd0\u884c\u7ed3\u679c\u663e\u793a\\n- -a \u7f16\u5199\u6c47\u7f16\u547d\u4ee4\\n- -t \u5355\u6b65\u6267\u884c\\n- -p \u76f4\u63a5\u6267\u884c\u5b8c\u4e0d\u662f\u5355\u6b65\u6267\u884c\\n- -u \u53cd\u7f16\u8bd1\\n- -r \u67e5\u770b\u4fee\u6539\u5bc4\u5b58\u5668\u7684\u503c\\n- -d \u67e5\u770b\u5185\u5b58\u5355\u5143\\n- -e \u4fee\u6539\u5185\u5b58\u5355\u5143\\n- -? \u67e5\u770b\u6307\u4ee4\u5e2e\u52a9\\n\\n### X86 \u548c X87 \u6c47\u7f16\u6307\u4ee4\u5927\u5168\uff08\u6709\u6ce8\u91ca\uff09\\n\\n**\u6570\u636e\u4f20\u8f93\u6307\u4ee4**\\n\\n\u5b83\u4eec\u5728\u5b58\u8d2e\u5668\u548c\u5bc4\u5b58\u5668\u3001\u5bc4\u5b58\u5668\u548c\u8f93\u5165\u8f93\u51fa\u7aef\u53e3\u4e4b\u95f4\u4f20\u9001\u6570\u636e.\\n\\n- \u901a\u7528\u6570\u636e\u4f20\u9001\u6307\u4ee4.\\n\\n| CMD     | note                                                                                                             |\\n| ------- | ---------------------------------------------------------------------------------------------------------------- |\\n| MOV     | \u4f20\u9001\u5b57\u6216\u5b57\u8282.                                                                                                    |\\n| MOVSX   | \u5148\u7b26\u53f7\u6269\u5c55,\u518d\u4f20\u9001.                                                                                               |\\n| MOVZX   | \u5148\u96f6\u6269\u5c55,\u518d\u4f20\u9001.                                                                                                 |\\n| PUSH    | \u628a\u5b57\u538b\u5165\u5806\u6808.                                                                                                    |\\n| POP     | \u628a\u5b57\u5f39\u51fa\u5806\u6808.                                                                                                    |\\n| PUSHA   | \u628a AX,CX,DX,BX,SP,BP,SI,DI \u4f9d\u6b21\u538b\u5165\u5806\u6808.                                                                         |\\n| POPA    | \u628a DI,SI,BP,SP,BX,DX,CX,AX \u4f9d\u6b21\u5f39\u51fa\u5806\u6808.                                                                         |\\n| PUSHAD  | \u628a EAX,ECX,EDX,EBX,ESP,EBP,ESI,EDI \u4f9d\u6b21\u538b\u5165\u5806\u6808.                                                                 |\\n| POPAD   | \u628a EDI,ESI,EBP,ESP,EBX,EDX,ECX,EAX \u4f9d\u6b21\u5f39\u51fa\u5806\u6808.                                                                 |\\n| BSWAP   | \u4ea4\u6362 32 \u4f4d\u5bc4\u5b58\u5668\u91cc\u5b57\u8282\u7684\u987a\u5e8f                                                                                     |\\n| XCHG    | \u4ea4\u6362\u5b57\u6216\u5b57\u8282.(\u81f3\u5c11\u6709\u4e00\u4e2a\u64cd\u4f5c\u6570\u4e3a\u5bc4\u5b58\u5668,\u6bb5\u5bc4\u5b58\u5668\u4e0d\u53ef\u4f5c\u4e3a\u64cd\u4f5c\u6570)                                                   |\\n| CMPXCHG | \u6bd4\u8f83\u5e76\u4ea4\u6362\u64cd\u4f5c\u6570.(\u7b2c\u4e8c\u4e2a\u64cd\u4f5c\u6570\u5fc5\u987b\u4e3a\u7d2f\u52a0\u5668 AL/AX/EAX)                                                            |\\n| XADD    | \u5148\u4ea4\u6362\u518d\u7d2f\u52a0.(\u7ed3\u679c\u5728\u7b2c\u4e00\u4e2a\u64cd\u4f5c\u6570\u91cc)                                                                              |\\n| XLAT    | \u5b57\u8282\u67e5\u8868\u8f6c\u6362.----BX \u6307\u5411\u4e00\u5f20 256 \u5b57\u8282\u7684\u8868\u7684\u8d77\u70b9,AL \u4e3a\u8868\u7684\u7d22\u5f15\u503c(0-255,\u5373 0-FFH);\u8fd4\u56de AL \u4e3a\u67e5\u8868\u7ed3\u679c.([BX+AL]->AL) |\\n\\n- \u8f93\u5165\u8f93\u51fa\u7aef\u53e3\u4f20\u9001\u6307\u4ee4.\\n\\n| CMD | note                                                                                                                              |\\n| --- | --------------------------------------------------------------------------------------------------------------------------------- |\\n| IN  | I/O \u7aef\u53e3\u8f93\u5165. ( \u8bed\u6cd5: IN \u7d2f\u52a0\u5668, {\u7aef\u53e3\u53f7 \u2502DX} )                                                                                   |\\n| OUT | I/O \u7aef\u53e3\u8f93\u51fa. ( \u8bed\u6cd5: OUT {\u7aef\u53e3\u53f7 \u2502DX},\u7d2f\u52a0\u5668 )\u8f93\u5165\u8f93\u51fa\u7aef\u53e3\u7531\u7acb\u5373\u65b9\u5f0f\u6307\u5b9a\u65f6, \u5176\u8303\u56f4\u662f 0-255; \u7531\u5bc4\u5b58\u5668 DX \u6307\u5b9a\u65f6,\u5176\u8303\u56f4\u662f 0-65535. |\\n\\n- \u76ee\u7684\u5730\u5740\u4f20\u9001\u6307\u4ee4.\\n\\n| CMD | note                                                                           |\\n| --- | ------------------------------------------------------------------------------ |\\n| LEA | \u88c5\u5165\u6709\u6548\u5730\u5740.\u4f8b: LEA DX,string ;\u628a\u504f\u79fb\u5730\u5740\u5b58\u5230 DX.                             |\\n| LDS | \u4f20\u9001\u76ee\u6807\u6307\u9488,\u628a\u6307\u9488\u5185\u5bb9\u88c5\u5165 DS.\u4f8b: LDS SI,string ;\u628a\u6bb5\u5730\u5740:\u504f\u79fb\u5730\u5740\u5b58\u5230 DS:SI. |\\n| LES | \u4f20\u9001\u76ee\u6807\u6307\u9488,\u628a\u6307\u9488\u5185\u5bb9\u88c5\u5165 ES.\u4f8b: LES DI,string ;\u628a\u6bb5\u5730\u5740:\u504f\u79fb\u5730\u5740\u5b58\u5230 ES:DI. |\\n| LFS | \u4f20\u9001\u76ee\u6807\u6307\u9488,\u628a\u6307\u9488\u5185\u5bb9\u88c5\u5165 FS.\u4f8b: LFS DI,string ;\u628a\u6bb5\u5730\u5740:\u504f\u79fb\u5730\u5740\u5b58\u5230 FS:DI. |\\n| LGS | \u4f20\u9001\u76ee\u6807\u6307\u9488,\u628a\u6307\u9488\u5185\u5bb9\u88c5\u5165 GS.\u4f8b: LGS DI,string ;\u628a\u6bb5\u5730\u5740:\u504f\u79fb\u5730\u5740\u5b58\u5230 GS:DI. |\\n| LSS | \u4f20\u9001\u76ee\u6807\u6307\u9488,\u628a\u6307\u9488\u5185\u5bb9\u88c5\u5165 SS.\u4f8b: LSS DI,string ;\u628a\u6bb5\u5730\u5740:\u504f\u79fb\u5730\u5740\u5b58\u5230 SS:DI. |\\n\\n- \u6807\u5fd7\u4f20\u9001\u6307\u4ee4.\\n\\n| CMD   | note                                     |\\n| ----- | ---------------------------------------- |\\n| LAHF  | \u6807\u5fd7\u5bc4\u5b58\u5668\u4f20\u9001,\u628a\u6807\u5fd7\u88c5\u5165 AH.            |\\n| SAHF  | \u6807\u5fd7\u5bc4\u5b58\u5668\u4f20\u9001,\u628a AH \u5185\u5bb9\u88c5\u5165\u6807\u5fd7\u5bc4\u5b58\u5668. |\\n| PUSHF | \u6807\u5fd7\u5165\u6808.                                |\\n| POPF  | \u6807\u5fd7\u51fa\u6808.                                |\\n| PUSHD | 32 \u4f4d\u6807\u5fd7\u5165\u6808.                           |\\n| POPD  | 32 \u4f4d\u6807\u5fd7\u51fa\u6808.                           |\\n\\n**\u7b97\u672f\u8fd0\u7b97\u6307\u4ee4**\\n\\n| CMD  | note                                                                                      |\\n| ---- | ----------------------------------------------------------------------------------------- |\\n| ADD  | \u52a0\u6cd5.                                                                                     |\\n| ADC  | \u5e26\u8fdb\u4f4d\u52a0\u6cd5.                                                                               |\\n| INC  | \u52a0 1.                                                                                     |\\n| AAA  | \u52a0\u6cd5\u7684 ASCII \u7801\u8c03\u6574.                                                                      |\\n| DAA  | \u52a0\u6cd5\u7684\u5341\u8fdb\u5236\u8c03\u6574.                                                                         |\\n| SUB  | \u51cf\u6cd5.                                                                                     |\\n| SBB  | \u5e26\u501f\u4f4d\u51cf\u6cd5.                                                                               |\\n| DEC  | \u51cf 1.                                                                                     |\\n| NEG  | \u6c42\u53cd(\u4ee5 0 \u51cf\u4e4b).                                                                          |\\n| CMP  | \u6bd4\u8f83.(\u4e24\u64cd\u4f5c\u6570\u4f5c\u51cf\u6cd5,\u4ec5\u4fee\u6539\u6807\u5fd7\u4f4d,\u4e0d\u56de\u9001\u7ed3\u679c).                                            |\\n| AAS  | \u51cf\u6cd5\u7684 ASCII \u7801\u8c03\u6574.                                                                      |\\n| DAS  | \u51cf\u6cd5\u7684\u5341\u8fdb\u5236\u8c03\u6574.                                                                         |\\n| MUL  | \u65e0\u7b26\u53f7\u4e58\u6cd5.\u7ed3\u679c\u56de\u9001 AH \u548c AL(\u5b57\u8282\u8fd0\u7b97),\u6216 DX \u548c AX(\u5b57\u8fd0\u7b97),                               |\\n| IMUL | \u6574\u6570\u4e58\u6cd5.\u7ed3\u679c\u56de\u9001 AH \u548c AL(\u5b57\u8282\u8fd0\u7b97),\u6216 DX \u548c AX(\u5b57\u8fd0\u7b97),                                 |\\n| AAM  | \u4e58\u6cd5\u7684 ASCII \u7801\u8c03\u6574.                                                                      |\\n| DIV  | \u65e0\u7b26\u53f7\u9664\u6cd5.\u7ed3\u679c\u56de\u9001:\u5546\u56de\u9001 AL,\u4f59\u6570\u56de\u9001 AH, (\u5b57\u8282\u8fd0\u7b97);\u6216 \u5546\u56de\u9001 AX,\u4f59\u6570\u56de\u9001 DX, (\u5b57\u8fd0\u7b97). |\\n| IDIV | \u6574\u6570\u9664\u6cd5.\u7ed3\u679c\u56de\u9001:\u5546\u56de\u9001 AL,\u4f59\u6570\u56de\u9001 AH, (\u5b57\u8282\u8fd0\u7b97);\u6216 \u5546\u56de\u9001 AX,\u4f59\u6570\u56de\u9001 DX, (\u5b57\u8fd0\u7b97).   |\\n| AAD  | \u9664\u6cd5\u7684 ASCII \u7801\u8c03\u6574.                                                                      |\\n| CBW  | \u5b57\u8282\u8f6c\u6362\u4e3a\u5b57. (\u628a AL \u4e2d\u5b57\u8282\u7684\u7b26\u53f7\u6269\u5c55\u5230 AH \u4e2d\u53bb)                                          |\\n| CWD  | \u5b57\u8f6c\u6362\u4e3a\u53cc\u5b57. (\u628a AX \u4e2d\u7684\u5b57\u7684\u7b26\u53f7\u6269\u5c55\u5230 DX \u4e2d\u53bb)                                          |\\n| CWDE | \u5b57\u8f6c\u6362\u4e3a\u53cc\u5b57. (\u628a AX \u4e2d\u7684\u5b57\u7b26\u53f7\u6269\u5c55\u5230 EAX \u4e2d\u53bb)                                           |\\n| CDQ  | \u53cc\u5b57\u6269\u5c55. (\u628a EAX \u4e2d\u7684\u5b57\u7684\u7b26\u53f7\u6269\u5c55\u5230 EDX \u4e2d\u53bb)                                            |\\n\\n**\u903b\u8f91\u8fd0\u7b97\u6307\u4ee4**\\n\\n| CMD  | note                                             |\\n| ---- | ------------------------------------------------ |\\n| AND  | \u4e0e\u8fd0\u7b97.                                          |\\n| OR   | \u6216\u8fd0\u7b97.                                          |\\n| XOR  | \u5f02\u6216\u8fd0\u7b97.                                        |\\n| NOT  | \u53d6\u53cd.                                            |\\n| TEST | \u6d4b\u8bd5.(\u4e24\u64cd\u4f5c\u6570\u4f5c\u4e0e\u8fd0\u7b97,\u4ec5\u4fee\u6539\u6807\u5fd7\u4f4d,\u4e0d\u56de\u9001\u7ed3\u679c). |\\n| SHL  | \u903b\u8f91\u5de6\u79fb.                                        |\\n| SAL  | \u7b97\u672f\u5de6\u79fb.(=SHL)                                  |\\n| SHR  | \u903b\u8f91\u53f3\u79fb.                                        |\\n| SAR  | \u7b97\u672f\u53f3\u79fb.(=SHR)                                  |\\n| ROL  | \u5faa\u73af\u5de6\u79fb.                                        |\\n| ROR  | \u5faa\u73af\u53f3\u79fb.                                        |\\n| RCL  | \u901a\u8fc7\u8fdb\u4f4d\u7684\u5faa\u73af\u5de6\u79fb.                              |\\n| RCR  | \u901a\u8fc7\u8fdb\u4f4d\u7684\u5faa\u73af\u53f3\u79fb.                              |\\n\\n\u4ee5\u4e0a\u516b\u79cd\u79fb\u4f4d\u6307\u4ee4,\u5176\u79fb\u4f4d\u6b21\u6570\u53ef\u8fbe 255 \u6b21. \u79fb\u4f4d\u4e00\u6b21\u65f6, \u53ef\u76f4\u63a5\u7528\u64cd\u4f5c\u7801. \u5982 SHL AX,1. \u79fb\u4f4d>1 \u6b21\u65f6, \u5219\u7531\u5bc4\u5b58\u5668 CL \u7ed9\u51fa\u79fb\u4f4d\u6b21\u6570. \u5982\\n\\n```assembly\\nMOV CL,04\\nSHL AX,CL\\n```\\n\\n**\u4e32\u6307\u4ee4**\\n\\nDS:SI \u6e90\u4e32\u6bb5\u5bc4\u5b58\u5668 :\u6e90\u4e32\u53d8\u5740. ES:DI \u76ee\u6807\u4e32\u6bb5\u5bc4\u5b58\u5668:\u76ee\u6807\u4e32\u53d8\u5740. CX \u91cd\u590d\u6b21\u6570\u8ba1\u6570\u5668. AL/AX \u626b\u63cf\u503c. D \u6807\u5fd7 0 \u8868\u793a\u91cd\u590d\u64cd\u4f5c\u4e2d SI \u548c DI \u5e94\u81ea\u52a8\u589e\u91cf; 1 \u8868\u793a\u5e94\u81ea\u52a8\u51cf\u91cf. Z \u6807\u5fd7 \u7528\u6765\u63a7\u5236\u626b\u63cf\u6216\u6bd4\u8f83\u64cd\u4f5c\u7684\u7ed3\u675f.\\n\\n| CMD         | note                                                                                                  |\\n| ----------- | ----------------------------------------------------------------------------------------------------- |\\n| MOVS        | \u4e32\u4f20\u9001.( MOVSB \u4f20\u9001\u5b57\u7b26. MOVSW \u4f20\u9001\u5b57. MOVSD \u4f20\u9001\u53cc\u5b57. )                                              |\\n| CMPS        | \u4e32\u6bd4\u8f83.( CMPSB \u6bd4\u8f83\u5b57\u7b26. CMPSW \u6bd4\u8f83\u5b57. )                                                              |\\n| SCAS        | \u4e32\u626b\u63cf.\u628a AL \u6216 AX \u7684\u5185\u5bb9\u4e0e\u76ee\u6807\u4e32\u4f5c\u6bd4\u8f83,\u6bd4\u8f83\u7ed3\u679c\u53cd\u6620\u5728\u6807\u5fd7\u4f4d.                                         |\\n| LODS        | \u88c5\u5165\u4e32.\u628a\u6e90\u4e32\u4e2d\u7684\u5143\u7d20(\u5b57\u6216\u5b57\u8282)\u9010\u4e00\u88c5\u5165 AL \u6216 AX \u4e2d.( LODSB \u4f20\u9001\u5b57\u7b26. LODSW \u4f20\u9001\u5b57. LODSD \u4f20\u9001\u53cc\u5b57. ) |\\n| STOS        | \u4fdd\u5b58\u4e32.\u662f LODS \u7684\u9006\u8fc7\u7a0b.                                                                              |\\n| REP         | \u5f53 CX/ECX&lt;&gt;0 \u65f6\u91cd\u590d.                                                                            |\\n| REPE/REPZ   | \u5f53 ZF=1 \u6216\u6bd4\u8f83\u7ed3\u679c\u76f8\u7b49,\u4e14 CX/ECX&lt;&gt;0 \u65f6\u91cd\u590d.                                                     |\\n| REPNE/REPNZ | \u5f53 ZF=0 \u6216\u6bd4\u8f83\u7ed3\u679c\u4e0d\u76f8\u7b49,\u4e14 CX/ECX&lt;&gt;0 \u65f6\u91cd\u590d.                                                   |\\n| REPC        | \u5f53 CF=1 \u4e14 CX/ECX&lt;&gt;0 \u65f6\u91cd\u590d.                                                                    |\\n| REPNC       | \u5f53 CF=0 \u4e14 CX/ECX&lt;&gt;0 \u65f6\u91cd\u590d.                                                                    |\\n\\n**\u7a0b\u5e8f\u8f6c\u79fb\u6307\u4ee4**\\n\\n- \u65e0\u6761\u4ef6\u8f6c\u79fb\u6307\u4ee4 (\u957f\u8f6c\u79fb)\\n\\n| CMD      | note           |\\n| -------- | -------------- |\\n| JMP      | \u65e0\u6761\u4ef6\u8f6c\u79fb\u6307\u4ee4 |\\n| CALL     | \u8fc7\u7a0b\u8c03\u7528       |\\n| RET/RETF | \u8fc7\u7a0b\u8fd4\u56de.      |\\n\\n- \u6761\u4ef6\u8f6c\u79fb\u6307\u4ee4 (\u77ed\u8f6c\u79fb,-128 \u5230+127 \u7684\u8ddd\u79bb\u5185)( \u5f53\u4e14\u4ec5\u5f53(SF XOR OF)=1 \u65f6,OP1<OP2 )\\n\\n| CMD     | note                                              |\\n| ------- | ------------------------------------------------- |\\n| JA/JNBE | \u4e0d\u5c0f\u4e8e\u6216\u4e0d\u7b49\u4e8e\u65f6\u8f6c\u79fb.                             |\\n| JAE/JNB | \u5927\u4e8e\u6216\u7b49\u4e8e\u8f6c\u79fb.                                   |\\n| JB/JNAE | \u5c0f\u4e8e\u8f6c\u79fb.                                         |\\n| JBE/JNA | \u5c0f\u4e8e\u6216\u7b49\u4e8e\u8f6c\u79fb.                                   |\\n| &nbsp;  | \u4ee5\u4e0a\u56db\u6761,\u6d4b\u8bd5\u65e0\u7b26\u53f7\u6574\u6570\u8fd0\u7b97\u7684\u7ed3\u679c(\u6807\u5fd7 C \u548c Z).   |\\n| JG/JNLE | \u5927\u4e8e\u8f6c\u79fb.                                         |\\n| JGE/JNL | \u5927\u4e8e\u6216\u7b49\u4e8e\u8f6c\u79fb.                                   |\\n| JL/JNGE | \u5c0f\u4e8e\u8f6c\u79fb.                                         |\\n| JLE/JNG | \u5c0f\u4e8e\u6216\u7b49\u4e8e\u8f6c\u79fb.                                   |\\n| &nbsp;  | \u4ee5\u4e0a\u56db\u6761,\u6d4b\u8bd5\u5e26\u7b26\u53f7\u6574\u6570\u8fd0\u7b97\u7684\u7ed3\u679c(\u6807\u5fd7 S,O \u548c Z). |\\n| JE/JZ   | \u7b49\u4e8e\u8f6c\u79fb.                                         |\\n| JNE/JNZ | \u4e0d\u7b49\u4e8e\u65f6\u8f6c\u79fb.                                     |\\n| JC      | \u6709\u8fdb\u4f4d\u65f6\u8f6c\u79fb.                                     |\\n| JNC     | \u65e0\u8fdb\u4f4d\u65f6\u8f6c\u79fb.                                     |\\n| JNO     | \u4e0d\u6ea2\u51fa\u65f6\u8f6c\u79fb.                                     |\\n| JNP/JPO | \u5947\u5076\u6027\u4e3a\u5947\u6570\u65f6\u8f6c\u79fb.                               |\\n| JNS     | \u7b26\u53f7\u4f4d\u4e3a \\"0\\" \u65f6\u8f6c\u79fb.                              |\\n| JO      | \u6ea2\u51fa\u8f6c\u79fb.                                         |\\n| JP/JPE  | \u5947\u5076\u6027\u4e3a\u5076\u6570\u65f6\u8f6c\u79fb.                               |\\n| JS      | \u7b26\u53f7\u4f4d\u4e3a \\"1\\" \u65f6\u8f6c\u79fb.                              |\\n\\n- \u5faa\u73af\u63a7\u5236\u6307\u4ee4(\u77ed\u8f6c\u79fb)\\n\\n| CMD           | note                        |\\n| ------------- | --------------------------- |\\n| LOOP          | CX \u4e0d\u4e3a\u96f6\u65f6\u5faa\u73af.            |\\n| LOOPE/LOOPZ   | CX \u4e0d\u4e3a\u96f6\u4e14\u6807\u5fd7 Z=1 \u65f6\u5faa\u73af. |\\n| LOOPNE/LOOPNZ | CX \u4e0d\u4e3a\u96f6\u4e14\u6807\u5fd7 Z=0 \u65f6\u5faa\u73af. |\\n| JCXZ          | CX \u4e3a\u96f6\u65f6\u8f6c\u79fb.              |\\n| JECXZ         | ECX \u4e3a\u96f6\u65f6\u8f6c\u79fb.             |\\n\\n- \u4e2d\u65ad\u6307\u4ee4\\n\\n| CMD  | note     |\\n| ---- | -------- |\\n| INT  | \u4e2d\u65ad\u6307\u4ee4 |\\n| INTO | \u6ea2\u51fa\u4e2d\u65ad |\\n| IRET | \u4e2d\u65ad\u8fd4\u56de |\\n\\n- \u5904\u7406\u5668\u63a7\u5236\u6307\u4ee4\\n\\n| CMD  | note                                           |\\n| ---- | ---------------------------------------------- |\\n| HLT  | \u5904\u7406\u5668\u6682\u505c, \u76f4\u5230\u51fa\u73b0\u4e2d\u65ad\u6216\u590d\u4f4d\u4fe1\u53f7\u624d\u7ee7\u7eed.      |\\n| WAIT | \u5f53\u82af\u7247\u5f15\u7ebf TEST \u4e3a\u9ad8\u7535\u5e73\u65f6\u4f7f CPU \u8fdb\u5165\u7b49\u5f85\u72b6\u6001. |\\n| ESC  | \u8f6c\u6362\u5230\u5916\u5904\u7406\u5668.                                |\\n| LOCK | \u5c01\u9501\u603b\u7ebf.                                      |\\n| NOP  | \u7a7a\u64cd\u4f5c.                                        |\\n| STC  | \u7f6e\u8fdb\u4f4d\u6807\u5fd7\u4f4d.                                  |\\n| CLC  | \u6e05\u8fdb\u4f4d\u6807\u5fd7\u4f4d.                                  |\\n| CMC  | \u8fdb\u4f4d\u6807\u5fd7\u53d6\u53cd.                                  |\\n| STD  | \u7f6e\u65b9\u5411\u6807\u5fd7\u4f4d.                                  |\\n| CLD  | \u6e05\u65b9\u5411\u6807\u5fd7\u4f4d.                                  |\\n| STI  | \u7f6e\u4e2d\u65ad\u5141\u8bb8\u4f4d.                                  |\\n| CLI  | \u6e05\u4e2d\u65ad\u5141\u8bb8\u4f4d.                                  |\\n\\n**\u4f2a\u6307\u4ee4**\\n\\n| CMD     | note              |\\n| ------- | ----------------- |\\n| DW      | \u5b9a\u4e49\u5b57(2 \u5b57\u8282).   |\\n| PROC    | \u5b9a\u4e49\u8fc7\u7a0b.         |\\n| ENDP    | \u8fc7\u7a0b\u7ed3\u675f.         |\\n| SEGMENT | \u5b9a\u4e49\u6bb5.           |\\n| ASSUME  | \u5efa\u7acb\u6bb5\u5bc4\u5b58\u5668\u5bfb\u5740. |\\n| ENDS    | \u6bb5\u7ed3\u675f.           |\\n| END     | \u7a0b\u5e8f\u7ed3\u675f.         |\\n\\n**\u5904\u7406\u673a\u63a7\u5236\u6307\u4ee4\uff1a\u6807\u5fd7\u5904\u7406\u6307\u4ee4**\\n\\n| CMD  | note                |\\n| ---- | ------------------- |\\n| CLC  | \u8fdb\u4f4d\u4f4d\u7f6e 0 \u6307\u4ee4     |\\n| CMC  | \u8fdb\u4f4d\u4f4d\u6c42\u53cd\u6307\u4ee4      |\\n| STC  | \u8fdb\u4f4d\u4f4d\u7f6e\u4e3a 1 \u6307\u4ee4   |\\n| CLD  | \u65b9\u5411\u6807\u5fd7\u7f6e 1 \u6307\u4ee4   |\\n| STD  | \u65b9\u5411\u6807\u5fd7\u4f4d\u7f6e 1 \u6307\u4ee4 |\\n| CLI  | \u4e2d\u65ad\u6807\u5fd7\u7f6e 0 \u6307\u4ee4   |\\n| STI  | \u4e2d\u65ad\u6807\u5fd7\u7f6e 1 \u6307\u4ee4   |\\n| NOP  | \u65e0\u64cd\u4f5c              |\\n| HLT  | \u505c\u673a                |\\n| WAIT | \u7b49\u5f85                |\\n| ESC  | \u6362\u7801                |\\n| LOCK | \u5c01\u9501                |\\n\\n**\u6d6e\u70b9\u8fd0\u7b97\u6307\u4ee4\u96c6**\\n\\n- \u63a7\u5236\u6307\u4ee4(\u5e26 9B \u7684\u63a7\u5236\u6307\u4ee4\u524d\u7f00 F \u53d8\u4e3a FN \u65f6\u6d6e\u70b9\u4e0d\u68c0\u67e5\uff0c\u673a\u5668\u7801\u53bb\u6389 9B)\\n\\n| CMD                 | note                      | Machine Code   |\\n| ------------------- | ------------------------- | -------------- |\\n| FINIT               | \u521d\u59cb\u5316\u6d6e\u70b9\u90e8\u4ef6            | 9B DB E3       |\\n| FCLEX               | \u6e05\u9664\u5f02\u5e38                  | 9B DB E2       |\\n| FDISI               | \u6d6e\u70b9\u68c0\u67e5\u7981\u6b62\u4e2d\u65ad 9B DB E1 |\\n| FENI                | \u6d6e\u70b9\u68c0\u67e5\u7981\u6b62\u4e2d\u65ad\u4e8c        | 9B DB E0       |\\n| WAIT                | \u540c\u6b65 CPU \u548c FPU           | 9B             |\\n| FWAIT               | \u540c\u6b65 CPU \u548c FPU           | D9 D0          |\\n| FNOP                | \u65e0\u64cd\u4f5c                    | DA E9          |\\n| FXCH                | \u4ea4\u6362 ST(0)\u548c ST(1)        | D9 C9          |\\n| FXCH ST(i)          | \u4ea4\u6362 ST(0)\u548c ST(i)        | D9 C1iii       |\\n| FSTSW ax            | \u72b6\u6001\u5b57\u5230 ax               | 9B DF E0       |\\n| FSTSW word ptr mem  | \u72b6\u6001\u5b57\u5230 mem              | 9B DD mm111mmm |\\n| FLDCW word ptr mem  | mem \u5230\u72b6\u6001\u5b57              | D9 mm101mmm    |\\n| FSTCW word ptr mem  | \u63a7\u5236\u5b57\u5230 mem              | 9B D9 mm111mmm |\\n| FLDENV word ptr mem | mem \u5230\u5168\u73af\u5883              | D9 mm100mmm    |\\n| FSTENV word ptr mem | \u5168\u73af\u5883\u5230 mem              | 9B D9 mm110mmm |\\n| FRSTOR word ptr mem | mem \u5230 FPU \u72b6\u6001           | DD mm100mmm    |\\n| FSAVE word ptr mem  | FPU \u72b6\u6001\u5230 mem            | 9B DD mm110mmm |\\n| FFREE ST(i)         | \u6807\u5fd7 ST(i)\u672a\u4f7f\u7528          | DD C0iii       |\\n| FDECSTP             | \u51cf\u5c11\u6808\u6307\u9488 1->0 2->1      | D9 F6          |\\n| FINCSTP             | \u589e\u52a0\u6808\u6307\u9488 0->1 1->2      | D9 F7          |\\n| FSETPM              | \u6d6e\u70b9\u8bbe\u7f6e\u4fdd\u62a4              | DB E4          |\\n\\n- \u6570\u636e\u4f20\u9001\u6307\u4ee4\\n\\n| CMD                 | note                           | Machine Code |\\n| ------------------- | ------------------------------ | ------------ |\\n| FLDZ                | \u5c06 0.0 \u88c5\u5165 ST(0)              | D9 EE        |\\n| FLD1                | \u5c06 1.0 \u88c5\u5165 ST(0)              | D9 E8        |\\n| FLDPI               | \u5c06 \u03c0 \u88c5\u5165 ST(0)                | D9 EB        |\\n| FLDL2T              | \u5c06 ln10/ln2 \u88c5\u5165 ST(0)         | D9 E9        |\\n| FLDL2E              | \u5c06 1/ln2 \u88c5\u5165 ST(0)            | D9 EA        |\\n| FLDLG2              | \u5c06 ln2/ln10 \u88c5\u5165 ST(0)         | D9 EC        |\\n| FLDLN2              | \u5c06 ln2 \u88c5\u5165 ST(0)              | D9 ED        |\\n| FLD real4 ptr mem   | \u88c5\u5165 mem \u7684\u5355\u7cbe\u5ea6\u6d6e\u70b9\u6570        | D9 mm000mmm  |\\n| FLD real8 ptr mem   | \u88c5\u5165 mem \u7684\u53cc\u7cbe\u5ea6\u6d6e\u70b9\u6570        | DD mm000mmm  |\\n| FLD real10 ptr mem  | \u88c5\u5165 mem \u7684\u5341\u5b57\u8282\u6d6e\u70b9\u6570        | DB mm101mmm  |\\n| FILD word ptr mem   | \u88c5\u5165 mem \u7684\u4e8c\u5b57\u8282\u6574\u6570          | DF mm000mmm  |\\n| FILD dword ptr mem  | \u88c5\u5165 mem \u7684\u56db\u5b57\u8282\u6574\u6570          | DB mm000mmm  |\\n| FILD qword ptr mem  | \u88c5\u5165 mem \u7684\u516b\u5b57\u8282\u6574\u6570          | DF mm101mmm  |\\n| FBLD tbyte ptr mem  | \u88c5\u5165 mem \u7684\u5341\u5b57\u8282 BCD \u6570       | DF mm100mmm  |\\n| FST real4 ptr mem   | \u4fdd\u5b58\u5355\u7cbe\u5ea6\u6d6e\u70b9\u6570\u5230 mem         | D9 mm010mmm  |\\n| FST real8 ptr mem   | \u4fdd\u5b58\u53cc\u7cbe\u5ea6\u6d6e\u70b9\u6570\u5230 mem         | DD mm010mmm  |\\n| FIST word ptr mem   | \u4fdd\u5b58\u4e8c\u5b57\u8282\u6574\u6570\u5230 mem           | DF mm010mmm  |\\n| FIST dword ptr mem  | \u4fdd\u5b58\u56db\u5b57\u8282\u6574\u6570\u5230 mem           | DB mm010mmm  |\\n| FSTP real4 ptr mem  | \u4fdd\u5b58\u5355\u7cbe\u5ea6\u6d6e\u70b9\u6570\u5230 mem \u5e76\u51fa\u6808  | D9 mm011mmm  |\\n| FSTP real8 ptr mem  | \u4fdd\u5b58\u53cc\u7cbe\u5ea6\u6d6e\u70b9\u6570\u5230 mem \u5e76\u51fa\u6808  | DD mm011mmm  |\\n| FSTP real10 ptr mem | \u4fdd\u5b58\u5341\u5b57\u8282\u6d6e\u70b9\u6570\u5230 mem \u5e76\u51fa\u6808  | DB mm111mmm  |\\n| FISTP word ptr mem  | \u4fdd\u5b58\u4e8c\u5b57\u8282\u6574\u6570\u5230 mem \u5e76\u51fa\u6808    | DF mm011mmm  |\\n| FISTP dword ptr mem | \u4fdd\u5b58\u56db\u5b57\u8282\u6574\u6570\u5230 mem \u5e76\u51fa\u6808    | DB mm011mmm  |\\n| FISTP qword ptr mem | \u4fdd\u5b58\u516b\u5b57\u8282\u6574\u6570\u5230 mem \u5e76\u51fa\u6808    | DF mm111mmm  |\\n| FBSTP tbyte ptr mem | \u4fdd\u5b58\u5341\u5b57\u8282 BCD \u6570\u5230 mem \u5e76\u51fa\u6808 | DF mm110mmm  |\\n| FCMOVB              | ST(0),ST(i) <\u65f6\u4f20\u9001            | DA C0iii     |\\n| FCMOVBE             | ST(0),ST(i) <=\u65f6\u4f20\u9001           | DA D0iii     |\\n| FCMOVE              | ST(0),ST(i) =\u65f6\u4f20\u9001            | DA C1iii     |\\n| FCMOVNB             | ST(0),ST(i) >=\u65f6\u4f20\u9001           | DB C0iii     |\\n| FCMOVNBE            | ST(0),ST(i) >\u65f6\u4f20\u9001            | DB D0iii     |\\n| FCMOVNE             | ST(0),ST(i) !=\u65f6\u4f20\u9001           | DB C1iii     |\\n| FCMOVNU             | ST(0),ST(i) \u6709\u5e8f\u65f6\u4f20\u9001         | DB D1iii     |\\n| FCMOVU              | ST(0),ST(i) \u65e0\u5e8f\u65f6\u4f20\u9001         | DA D1iii     |\\n\\n**\u6bd4\u8f83\u6307\u4ee4**\\n\\n| CMD                  | note                          | Machine Code |\\n| -------------------- | ----------------------------- | ------------ |\\n| FCOM                 | ST(0)-ST(1)                   | D8 D1        |\\n| FCOMI                | ST(0),ST(i) ST(0)-ST(1)       | DB F0iii     |\\n| FCOMIP               | ST(0),ST(i) ST(0)-ST(1)\u5e76\u51fa\u6808 | DF F0iii     |\\n| FCOM real4 ptr mem   | ST(0)-\u5b9e\u6570 mem                | D8 mm010mmm  |\\n| FCOM real8 ptr mem   | ST(0)-\u5b9e\u6570 mem                | DC mm010mmm  |\\n| FICOM word ptr mem   | ST(0)-\u6574\u6570 mem                | DE mm010mmm  |\\n| FICOM dword ptr mem  | ST(0)-\u6574\u6570 mem                | DA mm010mmm  |\\n| FICOMP word ptr mem  | ST(0)-\u6574\u6570 mem \u5e76\u51fa\u6808         | DE mm011mmm  |\\n| FICOMP dword ptr mem | ST(0)-\u6574\u6570 mem \u5e76\u51fa\u6808         | DA mm011mmm  |\\n| FTST                 | ST(0)-0                       | D9 E4        |\\n| FUCOM ST(i)          | ST(0)-ST(i)                   | DD E0iii     |\\n| FUCOMP ST(i)         | ST(0)-ST(i)\u5e76\u51fa\u6808             | DD E1iii     |\\n| FUCOMPP              | ST(0)-ST(1)\u5e76\u4e8c\u6b21\u51fa\u6808         | DA E9        |\\n| FXAM                 | ST(0)\u89c4\u683c\u7c7b\u578b                 | D9 E5        |\\n\\n**\u8fd0\u7b97\u6307\u4ee4**\\n\\n| CMD            | note                                                                                                                                                                                                                                                           |\\n| -------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\\n| FADD           | \u628a\u76ee\u7684\u64cd\u4f5c\u6570 (\u76f4\u63a5\u63a5\u5728\u6307\u4ee4\u540e\u7684\u53d8\u91cf\u6216\u5806\u6808\u7f13\u5b58\u5668) \u4e0e\u6765\u6e90\u64cd\u4f5c\u6570 (\u63a5\u5728\u76ee\u7684\u64cd\u4f5c\u6570\u540e\u7684\u53d8\u91cf\u6216\u5806\u6808\u7f13\u5b58\u5668) \u76f8\u52a0\uff0c\u5e76\u5c06\u7ed3\u679c\u5b58\u5165\u76ee\u7684\u64cd\u4f5c\u6570                                                                                                                                 |\\n| FADDP ST(i),ST | \u8fd9\u4e2a\u6307\u4ee4\u662f\u4f7f\u76ee\u7684\u64cd\u4f5c\u6570\u52a0\u4e0a ST \u7f13\u5b58\u5668\uff0c\u5e76\u5f39\u51fa ST \u7f13\u5b58\u5668\uff0c\u800c\u76ee\u7684\u64cd\u4f5c\u6570\u5fc5\u987b\u662f\u5806\u6808\u7f13\u5b58\u5668\u7684\u5176\u4e2d\u4e4b\u4e00\uff0c\u6700\u540e\u4e0d\u7ba1\u76ee\u7684\u64cd\u4f5c\u6570\u4e3a\u4f55\uff0c\u7ecf\u5f39\u51fa\u4e00\u6b21\u540e\uff0c\u76ee\u7684\u64cd\u4f5c\u6570\u4f1a\u53d8\u6210\u4e0a\u4e00\u4e2a\u5806\u6808\u7f13\u5b58\u5668\u4e86                                                                                       |\\n| FIADD          | FIADD \u662f\u628a ST \u52a0\u4e0a\u6765\u6e90\u64cd\u4f5c\u6570\uff0c\u7136\u540e\u518d\u5b58\u5165 ST \u7f13\u5b58\u5668\uff0c\u6765\u6e90\u64cd\u4f5c\u6570\u5fc5\u987b\u662f\u5b57\u7ec4\u6574\u6570\u6216\u77ed\u6574\u6570\u5f62\u6001\u7684\u53d8\u6570                                                                                                                                                                 |\\n| FSUB           | \u51cf                                                                                                                                                                                                                                                             |\\n| FSUBP          |\\n| FSUBR          | \u51cf\u6570\u4e0e\u88ab\u51cf\u6570\u4e92\u6362                                                                                                                                                                                                                                               |\\n| FSUBRP         |\\n| FISUB          |\\n| FISUBR         |\\n| FMUL           | \u4e58                                                                                                                                                                                                                                                             |\\n| FMULP          |\\n| FIMUL          |\\n| FDIV           | \u9664                                                                                                                                                                                                                                                             |\\n| FDIVP          |\\n| FDIVR          |\\n| FDIVRP         |\\n| FIDIV          |\\n| FIDIVR         |\\n| FCHS           | \u6539\u53d8 ST \u7684\u6b63\u8d1f\u503c                                                                                                                                                                                                                                               |\\n| FABS           | \u628a ST \u4e4b\u503c\u53d6\u51fa\uff0c\u53d6\u5176\u7edd\u5bf9\u503c\u540e\u518d\u5b58\u56de\u53bb\u3002                                                                                                                                                                                                                         |\\n| FSQRT          | \u5c06 ST \u4e4b\u503c\u53d6\u51fa\uff0c\u5f00\u6839\u53f7\u540e\u518d\u5b58\u56de\u53bb\u3002                                                                                                                                                                                                                             |\\n| FSCALE         | \u8fd9\u4e2a\u6307\u4ee4\u662f\u8ba1\u7b97 ST\\\\*2^ST(1)\u4e4b\u503c\uff0c\u518d\u628a\u7ed3\u679c\u5b58\u5165 ST \u91cc\u800c ST(1) \u4e4b\u503c\u4e0d\u53d8\u3002ST(1) \u5fc5\u987b\u662f\u5728 -32768 \u5230 32768 (-215 \u5230 215 )\u4e4b\u95f4\u7684\u6574\u6570\uff0c\u5982\u679c\u8d85\u8fc7\u8fd9\u4e2a\u8303\u56f4\u8ba1\u7b97\u7ed3\u679c\u65e0\u6cd5\u786e\u5b9a\uff0c\u5982\u679c\u4e0d\u662f\u6574\u6570 ST(1) \u4f1a\u5148\u5411\u96f6\u820d\u5165\u6210\u6574\u6570\u518d\u8ba1\u7b97\u3002\u6240\u4ee5\u4e3a\u5b89\u5168\u8d77\u89c1\uff0c\u6700\u597d\u662f\u7531\u5b57\u7ec4\u6574\u6570\u8f7d\u5165\u5230 ST(1) \u91cc\u3002 |\\n| FRNDINT        | \u8fd9\u4e2a\u6307\u4ee4\u662f\u628a ST \u7684\u6570\u503c\u820d\u5165\u6210\u6574\u6570\uff0cFPU \u63d0\u4f9b\u56db\u79cd\u820d\u5165\u65b9\u5f0f\uff0c\u7531 FPU \u7684\u63a7\u5236\u5b57\u7ec4(control word)\u4e2d\u7684 RC \u4e24\u4e2a\u4f4d\u51b3\u5b9a                                                                                                                                                      |\\n| &nbsp;         | RC \u820d\u5165\u63a7\u5236                                                                                                                                                                                                                                                    |\\n| &nbsp;         | 00 \u56db\u820d\u4e94\u5165                                                                                                                                                                                                                                                    |\\n| &nbsp;         | 01 \u5411\u8d1f\u65e0\u9650\u5927\u820d\u5165                                                                                                                                                                                                                                              |\\n| &nbsp;         | 10 \u5411\u6b63\u65e0\u9650\u5927\u820d\u5165                                                                                                                                                                                                                                              |\\n| &nbsp;         | 11 \u5411\u96f6\u820d\u53bb                                                                                                                                                                                                                                                    |\\n\\n---\\n\\n### To be Continued\\n\\n- [ ] CPU Interrupt\\n\\n- [ ] Example Interrupt Handler\\n\\n- [ ] IO, and Screen Output\\n\\n- [ ] Port listening, data exchange\\n\\n## Example codes\\n\\n> Fun Fact: the filename is no more than 8 bytes (8 characters) in DOS.\\n\\n- [Reverse the data using stack](https://github.com/AkatQuas/kiddo-plays/blob/master/assembly/example/reverse-data-using-stack.asm)\\n\\n- [Push a word into stack](https://github.com/AkatQuas/kiddo-plays/blob/master/assembly/example/push-a-word-into-stack.asm)\\n\\n- [Add two byte according to their index](https://github.com/AkatQuas/kiddo-plays/blob/master/assembly/example/add-two-byte.asm)\\n\\n- [uppercase or lowercase](https://github.com/AkatQuas/kiddo-plays/blob/master/assembly/example/uppercase-lowercase.asm) using `or`, `and`, bitwise.\\n\\n- [copy data with offset](https://github.com/AkatQuas/kiddo-plays/blob/master/assembly/example/copy-with-offset.asm)\\n\\n- loop in loop\\n\\n  1. [save `cx` temporarily in `dx`](https://github.com/AkatQuas/kiddo-plays/blob/master/assembly/example/loop-in-dx.asm),\\n  1. [save `cx` temporarily in `stack`](https://github.com/AkatQuas/kiddo-plays/blob/master/assembly/example/loop-in-stack.asm)\\n\\n- [change the `cs:ip` code in runtime](https://github.com/AkatQuas/kiddo-plays/blob/master/assembly/example/change-cs-code-runtime.asm), you can run the code, and the program would exit normally because we change the `cs:ip` dynamically.\\n\\n- call another function\\n\\n  1. one parameter, stored in `bx`, [call a sub function](https://github.com/AkatQuas/kiddo-plays/blob/master/assembly/example/call-sub-function.asm)\\n  1. more parameters, [using memory address and register](https://github.com/AkatQuas/kiddo-plays/blob/master/assembly/example/capital-character-in-string.asm)"},{"id":"/2018/10/08/react-create-cli","metadata":{"permalink":"/blog/2018/10/08/react-create-cli","source":"@site/blog/2018-10-08-react-create-cli.md","title":"New a project using CLI","description":"This is a command for creating project using self template/boilerplate, you need to specify the git url of the template repository .","date":"2018-10-08T00:00:00.000Z","formattedDate":"October 8, 2018","tags":[{"label":"nodejs","permalink":"/blog/tags/nodejs"}],"readingTime":0.32,"hasTruncateMarker":true,"authors":[],"frontMatter":{"title":"New a project using CLI","categories":["command line"],"tags":["nodejs"]},"prevItem":{"title":"Assembly","permalink":"/blog/2018/10/23/assembly"},"nextItem":{"title":"Web server running over TCP","permalink":"/blog/2018/09/13/web-server-with-tcp"}},"content":"This is a command for creating project using self template/boilerplate, you need to specify the git url of the template repository .\\n\\n\x3c!--truncate--\x3e\\n\\n<details>\\n<summary>If you need a command on your version, check out the following code listing to start.</summary>\\n\\n{% include_code lang:javascript react-cli-create.js %}\\n\\n</details>\\n\\nThe complete [repository](https://github.com/AkatQuas/create-cli).\\n\\n# Major Dependencies\\n\\n- [commander](https://github.com/tj/commander.js)\\n\\n- [fs-extra](https://github.com/jprichardson/node-fs-extra)\\n\\n- [download-git-repo](https://github.com/flipxfx/download-git-repo)\\n\\n- [inquirer](https://github.com/SBoudrias/Inquirer.js)\\n\\n- [metalsmith](https://github.com/segmentio/metalsmith)\\n\\n  - [handlebars](https://github.com/wycats/handlebars.js)"},{"id":"/2018/09/13/web-server-with-tcp","metadata":{"permalink":"/blog/2018/09/13/web-server-with-tcp","source":"@site/blog/2018-09-13-web-server-with-tcp.md","title":"Web server running over TCP","description":"We are going to build a simple web server upon TCP.","date":"2018-09-13T00:00:00.000Z","formattedDate":"September 13, 2018","tags":[{"label":"nodejs","permalink":"/blog/tags/nodejs"},{"label":"tcp","permalink":"/blog/tags/tcp"}],"readingTime":4.4,"hasTruncateMarker":true,"authors":[],"frontMatter":{"title":"Web server running over TCP","categories":["web server"],"tags":["nodejs","tcp"]},"prevItem":{"title":"New a project using CLI","permalink":"/blog/2018/10/08/react-create-cli"},"nextItem":{"title":"Super tiny interpreter in JavaScript","permalink":"/blog/2018/08/23/super-tiny-interpreter"}},"content":"We are going to build a simple web server upon TCP.\\n\\n\x3c!--truncate--\x3e\\n\\nAn `curl` example:\\n\\n```bash\\ncurl -v -X POST -d \'a=12\' http://localhost:3000/\\n\\n# output\\nNote: Unnecessary use of -X or --request, POST is already inferred.\\n*   Trying ::1...\\n* TCP_NODELAY set\\n* Connected to localhost (::1) port 3000 (#0)\\n> POST / HTTP/1.1\\\\r\\\\n\\n> Host: localhost:3000\\\\r\\\\n\\n> User-Agent: curl/7.54.0\\\\r\\\\n\\n> Accept: */*\\\\r\\\\n\\n> Content-Length: 4\\\\r\\\\n\\n> Content-Type: application/x-www-form-urlencoded\\\\r\\\\n\\n> \\\\r\\\\n\\\\r\\\\n\\n> \'a=12\'\\n>\\n* upload completely sent off: 4 out of 4 bytes\\n< HTTP/1.1 200 OK\\\\r\\\\n\\n< server: my-custom-server\\\\r\\\\n\\n< content-type: 12\\\\r\\\\n\\n< date: Wed, 12 Sep 2018 16:08:16 GMT\\\\r\\\\n\\n< \\\\r\\\\n\\\\r\\\\n\\n<\\n* no chunk, no close, no size. Assume close to signal end\\n<\\n* Closing connection 0\\nHello world!%\\n```\\n\\n`HTTP message` consists of the `request line`, `header line` and `body entity`, where the delimiter is `\\\\r\\\\n` (whilst the `header line` ends with `\\\\r\\\\n\\\\r\\\\n`, so we can tell the rest is the `body entity`).\\n\\nWe parse the `http message` with the help of `socket`, which read the incoming request as a `Duplex Stream` (both readable and writable), and encapsulate the writing and reading manipulation as two objects `request` and `response`, then pass them to the handler `(req, res) => { /*handler function*/ }`.\\n\\nThat is it.\\n\\n## Hello world\\n\\n`http` create a server to deal with http request.\\n\\n```javascript\\nconst http = require(\'http\');\\n\\nconst server = http.createServer();\\n\\nserver.on(\'request\', (req, res) => {\\n  console.log(`${new Date().toISOString()} - ${req.method} ${req.url}`);\\n\\n  res.setHeader(\'Content-Type\', \'text/plain\');\\n  res.end(\'Hello world!\');\\n});\\n\\nserver.listen(3000);\\n```\\n\\n## Read data from TCP\\n\\nUse `net` module to create a server, which could handle TCP socket stream data.\\n\\n```javascript\\nconst net = require(\'net\');\\nconst server = net.createServer();\\nserver.on(\'connection\', handleConnection);\\n\\nserver.listen(3000);\\n\\nfunction handleConnection(socket) {\\n  socket.on(\'data\', (chunk) => {\\n    console.log(\'Received chunk:\\\\n\', chunk.toString());\\n  });\\n  /* response with plain string in HTTP protocol formation */\\n  socket.write(\\n    \'HTTP/1.1 200 OK\\\\r\\\\n Sever: my-web-server\\\\r\\\\nContent-Length: 0\\\\r\\\\n\\\\r\\\\n\'\\n  );\\n}\\n```\\n\\n## stream parsing from TCP\\n\\n<details>\\n<summary>Read the stream from TCP, parsing it according to HTTP protocol.</summary>\\n\\n```javascript\\nconst net = require(\'net\');\\nconst server = net.createServer();\\n\\nserver.on(\'connection\', handleConnection);\\nserver.listen(3000);\\n\\nfunction handleConnection(socket) {\\n  // subscribe to the readable event once so we can start calling .read()\\n\\n  socket.once(\'readable\', function () {\\n    // set up a buffer to hold the incoming data\\n    let reqBuffer = new Buffer(\'\');\\n\\n    // set up a temporary buffer to read in chunks\\n    let buf;\\n    let reqHeader;\\n\\n    while (true) {\\n      buf = socket.read();\\n\\n      if (buf === null) break;\\n\\n      // concatenate existing request buffer with new data\\n      reqBuffer = Buffer.concat([reqBuffer, buf]);\\n\\n      // check if we\'ve reached \\\\r\\\\n\\\\r\\\\n, indicating end of header\\n      let marker = reqBuffer.indexOf(\'\\\\r\\\\n\\\\r\\\\n\');\\n\\n      if (marker !== -1) {\\n        // we reached \\\\r\\\\n\\\\r\\\\n, there could be data after it.\\n        let remaining = reqBuffer.slice(marker + 4);\\n        // the header is everything we read, up to and not including \\\\r\\\\n\\\\r\\\\n\\n        reqHeader = reqBuffer.slice(0, marker).toString();\\n        // this pushes the extra data we read back to the scoket\'s readable stream\\n        socket.unshift(remaining);\\n        break;\\n      }\\n    }\\n    console.log(`Request header:\\\\n${reqHeader}`);\\n\\n    // at this point, we\'ve stopped reading from the socket and have the headerr as a string\\n    // If we wanted to read the whole request body, we would do this:\\n    reqBuffer = new Buffer(\'\');\\n    while ((buf = socket.read()) !== null) {\\n      reqBuffer = Buffer.concat([reqBuffer, buf]);\\n    }\\n    let reqBody = reqBuffer.toString();\\n    console.log(`Request body:\\\\n${reqBody}`);\\n\\n    // send a generic response\\n    socket.end(\\n      \'HTTP/1.1 200 OK\\\\r\\\\nServer: my-custom-server\\\\r\\\\nContent-Length: 0\\\\r\\\\n\\\\r\\\\n\'\\n    );\\n  });\\n}\\n```\\n\\n</details>\\n\\n<details>\\n<summary>Customized http server based on net TCP server.</summary>\\n\\n```javascript\\nconst net = require(\'net\');\\n\\nfunction createWebServer(requestHandler) {\\n  const server = net.createServer();\\n\\n  server.on(\'connection\', handleConnection);\\n\\n  function handleConnection(socket) {\\n    socket.once(\'readable\', function () {\\n      let reqBuffer = new Buffer(\'\');\\n      let buf, reqHeader;\\n      while (true) {\\n        buf = socket.read();\\n\\n        if (buf === null) break;\\n\\n        reqBuffer = Buffer.concat([reqBuffer, buf]);\\n\\n        let marker = reqBuffer.indexOf(\'\\\\r\\\\n\\\\r\\\\n\');\\n        if (marker !== -1) {\\n          let remaining = reqBuffer.slice(marker + 4);\\n          reqHeader = reqBuffer.slice(0, marker).toString();\\n          socket.unshift(remaining);\\n          break;\\n        }\\n      }\\n\\n      /* Request business */\\n      const reqHeaders = reqHeader.split(\'\\\\r\\\\n\');\\n      const reqLine = reqHeaders.shift().split(\' \');\\n      const headers = reqHeaders.reduce((acc, currentHeader) => {\\n        const [key, value] = currentHeader.split(\':\');\\n        return {\\n          ...acc,\\n          [key.trim().toLowerCase()]: value.trim(),\\n        };\\n      }, {});\\n      const request = {\\n        method: reqLine[0],\\n        url: reqLine[1],\\n        httpVersion: reqLine[2].split(\'/\')[1],\\n        headers,\\n        socket,\\n      };\\n\\n      /* Response business */\\n      let status = 200,\\n        statusText = \'OK\',\\n        headersSent = false,\\n        isChunked = false;\\n      const responseHeaders = {\\n        server: \'my-custom-server\',\\n      };\\n      function setHeader(key, value) {\\n        responseHeaders[key.toLowerCase()] = value;\\n      }\\n      function sendHeaders() {\\n        if (!headersSent) {\\n          headersSent = true;\\n\\n          setHeader(\'date\', new Date().toGMTString());\\n\\n          socket.write(`HTTP/1.1 ${status} ${statusText}\\\\r\\\\n`);\\n\\n          Object.keys(responseHeaders).forEach((headerKey) => {\\n            socket.write(`${headerKey}: ${responseHeaders[headerKey]}\\\\r\\\\n`);\\n          });\\n\\n          socket.write(\'\\\\r\\\\n\');\\n        }\\n      }\\n      const response = {\\n        write(chunk) {\\n          if (!headersSent) {\\n            if (!responseHeaders[\'content-length\']) {\\n              isChunked = true;\\n              setHeaders(\'transfer-encoding\', \'chunked\');\\n            }\\n            sendHeaders();\\n          }\\n\\n          if (isChunked) {\\n            const size = chunk.length.toString(16);\\n            socket.write(`${size}\\\\r\\\\n`);\\n            socket.write(chunk);\\n            socket.write(\'\\\\r\\\\n\');\\n          } else {\\n            socket.write(chunk);\\n          }\\n        },\\n        end(chunk) {\\n          if (!headersSent) {\\n            if (!responseHeaders[\'content-length\']) {\\n              setHeader(\'content-type\', chunk ? chunk.length : 0);\\n            }\\n            sendHeaders();\\n          }\\n          if (isChunked) {\\n            if (chunk) {\\n              const size = chunk.length.toString(16);\\n              socket.write(`${size}\\\\r\\\\n`);\\n              socket.write(chunk);\\n              socket.write(\'\\\\r\\\\n\\\\r\\\\n\');\\n            }\\n            socket.end(\'\\\\r\\\\n\\\\r\\\\n\');\\n          } else {\\n            socket.end(chunk);\\n          }\\n        },\\n        setHeader,\\n        setStatus(newStatus, newStatusText) {\\n          (status = newStatus), (statusText = newStatusText);\\n        },\\n        json(data) {\\n          if (headersSent) {\\n            throw new Error(\'Header sent, cannot proceed to send JSON\');\\n          }\\n          const json = new Buffer(JSON.stringify(data));\\n          setHeader(\'content-type\', \'application/json;charest=utf-8\');\\n          setHeader(\'content-length\', json.length);\\n          sendHeaders();\\n          socket.end(json);\\n        },\\n      };\\n      requestHandler(request, response);\\n    });\\n  }\\n\\n  return {\\n    listen: (port) => server.listen(port),\\n  };\\n}\\n\\nconst webServer = createWebServer((req, res) => {\\n  console.log(`${new Date().toISOString()} - ${req.method} ${req.url}`);\\n  res.setHeader(\'Content-Type\', \'text/plain\');\\n  res.end(\'Hello world!\');\\n});\\n\\nwebServer.listen(3000);\\n```\\n\\n</details>\\n\\n## References\\n\\n[original tutorial](https://www.codementor.io/ziad-saab/let-s-code-a-web-server-from-scratch-with-nodejs-streams-h4uc9utji)"},{"id":"/2018/08/23/super-tiny-interpreter","metadata":{"permalink":"/blog/2018/08/23/super-tiny-interpreter","source":"@site/blog/2018-08-23-super-tiny-interpreter.md","title":"Super tiny interpreter in JavaScript","description":"Today we\'re going to write a compiler together. But not just any compiler... A super duper teeny tiny compiler!","date":"2018-08-23T00:00:00.000Z","formattedDate":"August 23, 2018","tags":[{"label":"javascript","permalink":"/blog/tags/javascript"},{"label":"interpreter","permalink":"/blog/tags/interpreter"}],"readingTime":6.2,"hasTruncateMarker":true,"authors":[],"frontMatter":{"title":"Super tiny interpreter in JavaScript","categories":["programming language","interpreter"],"tags":["javascript","interpreter"]},"prevItem":{"title":"Web server running over TCP","permalink":"/blog/2018/09/13/web-server-with-tcp"},"nextItem":{"title":"React \u72b6\u6001\u5e93\u7684\u4f7f\u7528","permalink":"/blog/2018/08/15/react-stores"}},"content":"Today we\'re going to write a compiler together. But not just any compiler... A super duper teeny tiny compiler!\\n\\nWe\'re going to compile some lisp-like function calls into some C-like function calls.\\n\\n\x3c!--truncate--\x3e\\n\\nIf you are not familiar with one or the other. I\'ll just give you a quick intro.\\n\\nIf we had two functions `add` and `subtract` they would be written like this:\\n\\n|             | LISP                   | C                      |\\n| :---------- | :--------------------- | :--------------------- |\\n| 2 + 2       | (add 2 2)              | add(2, 2)              |\\n| 4 - 2       | (subtract 4 2)         | subtract(4, 2)         |\\n| 2 + (4 - 2) | (add 2 (subtract 4 2)) | add(2, subtract(4, 2)) |\\n\\nEasy peezy right?\\n\\nWell good, because this is exactly what we are going to compile. While this is neither a complete LISP or C syntax, it will be enough of the syntax to demonstrate many of the major pieces of a modern compiler.\\n\\nMost compilers break down into three primary stages: Parsing, Transformation, and Code Generation\\n\\n1.  Parsing: is taking raw code and turning it into a more abstract representation of the code.\\n\\n1.  Transformation: takes this abstract representation and manipulates to do whatever the compiler wants it to.\\n\\n1.  Code Generation: takes the transformed representation of the code and turns it into new code.\\n\\n## Parsing\\n\\n[tokenizer.js](/downloads/code/super-tiny-interpreter/tokenizer.js)\\n\\n[parser.js](/downloads/code/super-tiny-interpreter/parser.js)\\n\\nParsing typically gets broken down into two phases: Lexical Analysis and Syntactic Analysis.\\n\\n1.  Lexical Analysis takes the raw code and splits it apart into these things called tokens by a thing called a tokenizer (or lexer).\\n\\n    Tokens are an array of tiny little objects that describe an isolated piece of the syntax. They could be numbers, labels, punctuation, operators, whatever.\\n\\n2.  Syntactic Analysis takes the tokens and reformats them into a representation that describes each part of the syntax and their relation to one another. This is known as an intermediate representation or Abstract Syntax Tree.\\n\\n    An Abstract Syntax Tree, or AST for short, is a deeply nested object that represents code in a way that is both easy to work with and tells us a lot of information.\\n\\nFor the following syntax:\\n\\n    (add 2 (subtract 4 2))\\n\\nTokens might look something like this:\\n\\n    [\\n        { type: \'paren\',  value: \'(\'        },\\n        { type: \'name\',   value: \'add\'      },\\n        { type: \'number\', value: \'2\'        },\\n        { type: \'paren\',  value: \'(\'        },\\n        { type: \'name\',   value: \'subtract\' },\\n        { type: \'number\', value: \'4\'        },\\n        { type: \'number\', value: \'2\'        },\\n        { type: \'paren\',  value: \')\'        },\\n        { type: \'paren\',  value: \')\'        },\\n    ]\\n\\nAn Abstract Syntax Tree (AST) might look like this:\\n\\n    {\\n        type: \'Program\',\\n        body: [{\\n            type: \'CallExpression\',\\n            name: \'add\',\\n            params: [{\\n                type: \'NumberLiteral\',\\n                value: \'2\',\\n            }, {\\n                type: \'CallExpression\',\\n                name: \'subtract\',\\n                params: [{\\n                    type: \'NumberLiteral\',\\n                    value: \'4\',\\n                }, {\\n                    type: \'NumberLiteral\',\\n                    value: \'2\',\\n                }]\\n            }]\\n        }]\\n    }\\n\\n## Transformation\\n\\n[transformer.js](/downloads/code/super-tiny-interpreter/transformer.js)\\n\\nThe next type of stage for a compiler is transformation. Again, this just takes the AST from the last step and makes changes to it. It can manipulate the AST in the same language, or it can translate it into an entirely new language.\\n\\nLet\u2019s look at how we would transform an AST.\\n\\nYou might notice that our AST has elements within it that look very similar.\\n\\nThere are these objects with a type property. Each of these are known as an AST Node. These nodes have defined properties on them that describe one isolated part of the tree.\\n\\nWe can have a node for a \\"NumberLiteral\\":\\n\\n    {\\n        type: \'NumberLiteral\',\\n        value: \'2\',\\n    }\\n\\nOr maybe a node for a \\"CallExpression\\":\\n\\n    {\\n        type: \'CallExpression\',\\n        name: \'subtract\',\\n        params: [...nested nodes go here...],\\n    }\\n\\nWhen transforming the AST we can manipulate nodes by adding/removing/replacing properties, we can add new nodes, remove nodes, or we could leave the existing AST alone and create an entirely new one based on it.\\n\\nSince we\u2019re targeting a new language, we\u2019re going to focus on creating an entirely new AST that is specific to the target language.\\n\\n## Traversal\\n\\nIn order to navigate through all of these nodes, we need to be able to traverse through them. This traversal process goes to each node in the AST depth-first.\\n\\n    {\\n        type: \'Program\',\\n        body: [{\\n            type: \'CallExpression\',\\n            name: \'add\',\\n            params: [{\\n                type: \'NumberLiteral\',\\n                value: \'2\'\\n            }, {\\n                type: \'CallExpression\',\\n                name: \'subtract\',\\n                params: [{\\n                    type: \'NumberLiteral\',\\n                    value: \'4\'\\n                }, {\\n                    type: \'NumberLiteral\',\\n                    value: \'2\'\\n                }]\\n            }]\\n        }]\\n    }\\n\\nSo for the above AST we would go:\\n\\n1. Program - Starting at the top-level of the AST\\n\\n1. CallExpression (add) - Moving to the first element of the Program\'s body\\n\\n1. NumberLiteral (2) - Moving to the first element of CallExpression\'s params\\n\\n1. CallExpression (subtract) - Moving to the second element of CallExpression\'s params\\n\\n1. NumberLiteral (4) - Moving to the first element of CallExpression\'s params\\n\\n1. NumberLiteral (2) - Moving to the second element of CallExpression\'s params\\n\\nIf we were manipulating this AST directly, instead of creating a separate AST, we would likely introduce all sorts of abstractions here. But just visiting each node in the tree is enough for what we\'re trying to do.\\n\\nThe reason I use the word \\"visiting\\" is because there is this pattern of how to represent operations on elements of an object structure.\\n\\n## Visitors\\n\\nThe basic idea here is that we are going to create a \u201cvisitor\u201d object that has methods that will accept different node types.\\n\\n    var visitor = {\\n        NumberLiteral() {},\\n        CallExpression() {},\\n    };\\n\\nWhen we traverse our AST, we will call the methods on this visitor whenever we \\"enter\\" a node of a matching type.\\n\\nIn order to make this useful we will also pass the node and a reference to the parent node.\\n\\n    var visitor = {\\n        NumberLiteral(node, parent) {},\\n        CallExpression(node, parent) {},\\n    };\\n\\nHowever, there also exists the possibility of calling things on \\"exit\\". Imagine our tree structure from before in list form:\\n\\n    - Program\\n        - CallExpression\\n            - NumberLiteral\\n            - CallExpression\\n            - NumberLiteral\\n            - NumberLiteral\\n\\nAs we traverse down, we\'re going to reach branches with dead ends. As we finish each branch of the tree we \\"exit\\" it. So going down the tree we \\"enter\\" each node, and going back up we \\"exit\\".\\n\\n    -> Program (enter)\\n        -> CallExpression (enter)\\n            -> Number Literal (enter)\\n            <- Number Literal (exit)\\n            -> Call Expression (enter)\\n            -> Number Literal (enter)\\n            <- Number Literal (exit)\\n            -> Number Literal (enter)\\n            <- Number Literal (exit)\\n            <- CallExpression (exit)\\n        <- CallExpression (exit)\\n    <- Program (exit)\\n\\nIn order to support that, the final form of our visitor will look like this:\\n\\n    var visitor = {\\n        NumberLiteral: {\\n            enter(node, parent) {},\\n            exit(node, parent) {},\\n        }\\n    };\\n\\n## Code Generation\\n\\n[generator.js](/downloads/code/super-tiny-interpreter/generator.js)\\n\\nThe final phase of a compiler is code generation. Sometimes compilers will do things that overlap with transformation, but for the most part code generation just means take our AST and stringify code back out.\\n\\nCode generators work in different ways, some compilers will reuse the tokens from earlier, others will have created a separate representation of the code so that they can print node linearly, but from what I can tell most will use the same AST we just created, which is what we\u2019re going to focus on.\\n\\nEffectively our code generator will know how to \u201cprint\u201d all the different node types of the AST, and it will recursively call itself to print nested nodes until everything print into one long string of code.\\n\\nThe complete [interpreter.js](/downloads/code/super-tiny-interpreter/interpreter.js).\\n\\n[test.js](/downloads/code/super-tiny-interpreter/test.js) to test these functions."},{"id":"/2018/08/15/react-stores","metadata":{"permalink":"/blog/2018/08/15/react-stores","source":"@site/blog/2018-08-15-react-stores.md","title":"React \u72b6\u6001\u5e93\u7684\u4f7f\u7528","description":"React \u6709\u4e00\u4e9b\u72b6\u6001\u7ba1\u7406\u7684\u5e93\u6765\u5e2e\u52a9\u5355\u9875\u9762\u5e94\u7528\u7ba1\u7406\u5168\u5c40\u6570\u636e\uff0c\u5982 redux\uff0cmobx\uff0cflux\u3002\u6240\u4ee5\u6211\u5c31\u5199\u4e86\u4e00\u4e2a\u5c0f\u9879\u76ee\uff0c\u7b80\u5355\u5730\u5b66\u4e86\u5b83\u4eec\u7684\u4f7f\u7528\u65b9\u5f0f\u3002\u9879\u76ee\u5730\u5740\u3002","date":"2018-08-15T00:00:00.000Z","formattedDate":"August 15, 2018","tags":[{"label":"reactjs","permalink":"/blog/tags/reactjs"}],"readingTime":1.9,"hasTruncateMarker":true,"authors":[],"frontMatter":{"title":"React \u72b6\u6001\u5e93\u7684\u4f7f\u7528","categories":["frontend","javascript","reactjs"],"tags":["reactjs"]},"prevItem":{"title":"Super tiny interpreter in JavaScript","permalink":"/blog/2018/08/23/super-tiny-interpreter"},"nextItem":{"title":"\u5fae\u4fe1\u5c0f\u7a0b\u5e8f\u7684\u51e0\u4e2a\u5f00\u53d1\u6846\u67b6","permalink":"/blog/2018/07/18/wxma"}},"content":"React \u6709\u4e00\u4e9b\u72b6\u6001\u7ba1\u7406\u7684\u5e93\u6765\u5e2e\u52a9\u5355\u9875\u9762\u5e94\u7528\u7ba1\u7406\u5168\u5c40\u6570\u636e\uff0c\u5982 [redux](https://github.com/reduxjs/redux)\uff0c[mobx](https://github.com/mobxjs/mobx)\uff0c[flux](https://github.com/facebook/flux)\u3002\u6240\u4ee5\u6211\u5c31\u5199\u4e86\u4e00\u4e2a\u5c0f\u9879\u76ee\uff0c\u7b80\u5355\u5730\u5b66\u4e86\u5b83\u4eec\u7684\u4f7f\u7528\u65b9\u5f0f\u3002[\u9879\u76ee\u5730\u5740](https://github.com/AkatQuas/kiddo-plays/tree/master/react-stores)\u3002\\n\\n\x3c!--truncate--\x3e\\n\\n**\u4e2a\u4eba\u4f53\u4f1a**\\n\\n- Redux \u662f\u4e2a\u597d\u7684\u72b6\u6001\u7ba1\u7406\u65b9\u6848\uff0c\u4f7f\u7528\u65f6\u7684\u601d\u8def\u8ddf React \u672c\u8eab\u5f88\u7c7b\u4f3c\uff0c\u901a\u8fc7 `props` \u6ce8\u5165 `state` \u548c `dispatch` \uff0c\u5728\u7ec4\u4ef6\u4e2d\u76f4\u63a5\u4f7f\u7528\u3002\u75db\u82e6\u7684\u5730\u65b9\u5728\u4e8e Redux \u7684 `reducers` \uff0c `action` \uff0c `middleware` \u7684\u4ee3\u7801\u6bd4\u8f83\u5206\u6563\uff0c\u4e0d\u6613\u7ba1\u7406\u3002\u521d\u6b21\u4f7f\u7528\u65f6\u8981\u8ba4\u6e05\u5404\u4e2a `reducer` \u7684\u53c2\u6570\u548c\u65b9\u6cd5\u3002\\n\\n- Mobx \u76f8\u5bf9\u4e0e Redux \u6765\u8bf4\uff0c\u7075\u6d3b\u6027\u66f4\u597d\uff0c\u4ee5 \u7c7b\u5b9e\u4f8b \u7684\u65b9\u5f0f\uff0c\u76f4\u63a5\u8bfb\u53d6\u548c\u64cd\u4f5c\u6570\u636e\uff0c\u4e14\u8be5\u5b9e\u4f8b\u53ef\u4ee5\u88ab\u5171\u4eab\u3002\u540c\u4e00\u4e2a\u5e94\u7528\u4e2d\u53ef\u4ee5\u6709\u82e5\u5e72\u72ec\u7acb\u7684 `store`\u3002\u8fd9\u4e2a\u597d\u5904\u5c31\u662f\u5229\u4e8e\u5173\u6ce8\u5ea6\u63d0\u9ad8\uff0c\u4e14\u6709\u5229\u4e8e\u534f\u540c\u5f00\u53d1\u3002\\n\\n> \u7406\u8bba\u4e0a\uff0c Redux \u4e5f\u53ef\u4ee5\u5b9e\u73b0\u591a\u4e2a `store`\uff0c\u4f46\u662f `combineReducers` \u628a\u8fd9\u4e9b `store` \u7edf\u4e00\u5230\u4e00\u4e2a `root store` \u4e2d\uff0c\u5728\u5e94\u7528\u770b\u6765\uff0c\u53ea\u6709\u4e00\u4e2a\u5b9e\u4f8b\u3002\\n\\n- Flux \u662f\u8001\u6d3e\u7684\u72b6\u6001\u7ba1\u7406\u65b9\u6848\u4e86\uff0c\u5728\u901a\u8bfb\u4e86\u5b83\u7684 `getting-started` \u90e8\u5206\u4e4b\u540e\uff0c\u6211\u9009\u62e9\u4e86\u4fdd\u7559\u6001\u5ea6\u3002\u6bd5\u7adf\u72b6\u6001\u7ba1\u7406\u662f\u4e00\u4e2a\u65b9\u6848\uff0c\u8981\u8ddf\u5b9e\u9645\u4f7f\u7528\u573a\u666f\u7ed3\u5408\u8d77\u6765\uff0c\u6362\u53e5\u8bdd\u8bf4\uff0c flux \u7b49\u7528\u5230\u4e86\u7684\u65f6\u5019\u6211\u518d\u5b66\u5427\u3002\\n\\n**\u5171\u6027\u8003\u8651**\\n\\n\u72b6\u6001\u7ba1\u7406\u4e2d\u503c\u5f97\u6ce8\u610f\u7684\u5730\u65b9\u6709\u4e09\u70b9\uff1a\\n\\n- `store` \u7684\u6570\u636e\u5982\u4f55\u6ce8\u5165\u7ec4\u4ef6\\n- \u7ec4\u4ef6\u5982\u4f55\u8c03\u7528\u65b9\u6cd5\u6765\u6539\u53d8`store`\\n- \u600e\u4e48\u5904\u7406\u5f02\u6b65\u903b\u8f91\u4e0b\u7684\u6570\u636e\u66f4\u6539"},{"id":"/2018/07/18/wxma","metadata":{"permalink":"/blog/2018/07/18/wxma","source":"@site/blog/2018-07-18-wxma.md","title":"\u5fae\u4fe1\u5c0f\u7a0b\u5e8f\u7684\u51e0\u4e2a\u5f00\u53d1\u6846\u67b6","description":"\u9488\u5bf9\u5c0f\u7a0b\u5e8f\u7684\u4e00\u4e9b\u5f00\u53d1\u65b9\u5f0f\uff0c\u8fdb\u884c\u5b66\u4e60\u548c\u7ec3\u4e60\u3002","date":"2018-07-18T00:00:00.000Z","formattedDate":"July 18, 2018","tags":[{"label":"taro","permalink":"/blog/tags/taro"},{"label":"mpvue","permalink":"/blog/tags/mpvue"}],"readingTime":2.83,"hasTruncateMarker":true,"authors":[],"frontMatter":{"title":"\u5fae\u4fe1\u5c0f\u7a0b\u5e8f\u7684\u51e0\u4e2a\u5f00\u53d1\u6846\u67b6","categories":["frontend"],"tags":["taro","mpvue"]},"prevItem":{"title":"React \u72b6\u6001\u5e93\u7684\u4f7f\u7528","permalink":"/blog/2018/08/15/react-stores"},"nextItem":{"title":"Differences between Grunt and Gulp","permalink":"/blog/2018/07/08/gulp-vs-grunt"}},"content":"\u9488\u5bf9\u5c0f\u7a0b\u5e8f\u7684\u4e00\u4e9b\u5f00\u53d1\u65b9\u5f0f\uff0c\u8fdb\u884c\u5b66\u4e60\u548c\u7ec3\u4e60\u3002\\n\\n## \u6846\u67b6\u9009\u578b\\n\\n- vanilla: \u7528\u5c0f\u7a0b\u5e8f\u672c\u8eab\u7684\u8bed\u6cd5\u548c\u65b9\u5f0f\\n\\n- taro: \u4eac\u4e1c\u7684[Taro.js](https://github.com/NervJS/taro)\uff0c\u7565\u5fae\u6709\u70b9\u5751\u3002\\n\\n- mpvue: \u7f8e\u56e2\u7684[mpvue](https://github.com/Meituan-Dianping/mpvue)\uff0c\u8f83\u597d\u7684\u5f00\u53d1\u811a\u624b\u67b6\uff0c\u7f16\u8bd1\u901f\u5ea6\u5f88\u5f3a\u3002\\n\\n\x3c!--truncate--\x3e\\n\\n## \u7b80\u8981\u603b\u7ed3\\n\\n**Vanilla**\\n\\n\u5c0f\u7a0b\u5e8f\u672c\u8eab\u7684\u8bed\u6cd5\u548c\u65b9\u5f0f\u90fd\u6bd4\u8f83\u4e00\u822c\uff0c\u7f3a\u70b9\u4e5f\u5f88\u660e\u663e\uff1a\\n\\n- `wxss`\uff0c\u4e0d\u80fd\u5d4c\u5957\uff0c\u8bed\u6cd5\u9ad8\u4eae\u53ea\u80fd\u5728\u5176 IDE \u4e2d\u4f53\u73b0\uff0cVSCode \u5219\u6ca1\u6709\uff0c\u4e0e web \u76f8\u6bd4\uff0c\u652f\u6301\u5ea6\u4e0d\u5e7f\u3002\\n- `wxml`, \u8bed\u6cd5\u9ad8\u4eae\u95ee\u9898\u540c `wxss`\uff0c\u5199\u6cd5\u6ca1\u4ec0\u4e48\u4eae\u70b9\uff0c\u5728\u4f20\u503c\u65f6\uff0c `{{}}` \u5185\u5bf9\u53d8\u91cf\u548c\u5bf9\u8c61\u7684\u89e3\u91ca\u610f\u4e49\u4e0d\u7edf\u4e00\u3002\u6a21\u677f\u6e32\u67d3\u65f6\uff0c\u4f20\u503c\u65b9\u5f0f\u5efa\u8bae\u6309\u7167\u6587\u6863\u6765\u6284\u3002\\n- `wxs`\uff0c\u4e8b\u4ef6\u4f20\u503c\u662f\u4e2a\u5751\uff0c\\n- \u603b\u7684\u6765\u8bf4\uff0c\u975e\u5e38\u50f5\u786c\u3002\\n\\n**Taro**\\n\\n- \u5c01\u88c5\u8fc7\u4e00\u5c42\u7f16\u8bd1\u8fc7\u7a0b\u7684\u5c0f\u7a0b\u5e8f\u5f00\u53d1\uff0c`react` \u5f0f\u7684\u5f00\u53d1\u4f53\u9a8c\uff0c\u6bd4\u8f83\u597d\u3002\u4f46\u662f\u5bf9\u4e8e\u7ec4\u4ef6\u7684\u7f16\u8bd1\u6bd4\u8f83\u50f5\u786c\uff0c\u65e0\u6cd5\u6309 `props` \u4f20\u51fd\u6570\u3002 `props` \u7684\u4f7f\u7528\u6709\u65f6\u5019\u4f1a\u6709\u9650\u5236\uff0c\u9700\u8981\u8fdb\u884c\u8c03\u6574\u3002\\n\\n- Taro \u672c\u8eab\u5c01\u88c5\u6765\u4e00\u5c42\u5404\u79cd\u5c0f\u7a0b\u5e8f\u7684 API \u8c03\u7528\uff0c\u6240\u4ee5\u9876\u5c42\u7684\u5199\u6cd5\u6bd4\u8f83\u7edf\u4e00\u3002\\n\\n- \u5ba3\u79f0\u80fd\u7f16\u8bd1\u591a\u7aef\uff0c\u4f46\u662f\u4ece API \u7684\u4f7f\u7528\u89d2\u5ea6\u6765\u770b\uff0c\u53ea\u80fd\u8bf4\u662f\u5bf9\u4ee3\u7801\u8fdb\u884c\u5fae\u8c03\uff0c\u7136\u540e\u624d\u597d\u7f16\u8bd1\u3002\\n\\n\u603b\u7684\u6765\u8bf4\uff0c\u7684\u786e\u80fd\u52a0\u5feb\u5f00\u53d1\u901f\u5ea6\u548c\u63d0\u9ad8\u5f00\u53d1\u4f53\u9a8c\uff0c\u5728\u6ca1\u6709\u5176\u4ed6\u6846\u67b6\u65f6\uff0c\u53ef\u4ee5\u9009\u7528\u3002\\n\\n**mpvue**\\n\\n- \u540c\u6837\u662f\u5c01\u88c5\u8fc7\u4e00\u5c42\u7f16\u8bd1\u7684\u5c0f\u7a0b\u5e8f\u5f00\u53d1\uff0c`vue` \u5f0f\u3002\\n\\n- \u6587\u6863\u5199\u7684\u6bd4 Taro \u8981\u597d\u5f88\u591a\uff0c`vue` \u7684\u5f71\u5b50\u6bd4\u8f83\u660e\u663e\u3002\u6765\u81ea `vue` \u7684\u5f00\u53d1\u8005\uff0c\u5f3a\u70c8\u63a8\u8350\u3002\\n\\n- \u7f16\u8bd1\u901f\u5ea6\u6bd4 Taro \u8981\u5feb\uff0c\u4e3b\u8981\u5361\u5728\u5fae\u4fe1\u5f00\u53d1\u8005\u5de5\u5177\u7684\u54cd\u5e94\u3002\\n\\n- mpvue \u6ca1\u6709\u5c01\u88c5\u8fc7\u5c0f\u7a0b\u5e8f\u7684 API\uff0c\u56e0\u6b64\u5728\u5199\u7684\u8fc7\u7a0b\u4e2d\uff0c\u5b9e\u8d28\u4e0a\u8fd8\u662f\u5728\u7528 wx \u672c\u8eab\u7684 SDK \u548c\u8bed\u6cd5\u3002\\n\\n- \u751f\u547d\u5468\u671f\u7684\u95ee\u9898\u5efa\u8bae\u6309\u7167 mpvue \u7684\u6587\u6863\u6307\u5357\u6765\u4f7f\u7528\u3002\\n\\n> \u201c mpvue \u662f\u4e2a\u597d\u7684\u811a\u624b\u67b6\u3002\u201d\\n\\n## Miscellaneous\\n\\n\u5fae\u4fe1\u5b98\u65b9\u7684[wepy](https://github.com/Tencent/wepy) \u76f8\u5bf9\u4e8e `Taro` \u548c `mpvue` \u6765\u8bf4\u8868\u73b0\u90fd\u4e0d\u662f\u5f88\u7406\u60f3\uff0c\u6bd4\u76f4\u63a5\u88f8\u5199\u5c0f\u7a0b\u5e8f\u4ee3\u7801\u5dee\u4e0d\u4e86\u591a\u5c11\uff0c\u4e0d\u662f\u5f88\u63a8\u8350\u3002\\n\\n# Reference\\n\\n- [\u5fae\u4fe1\u5c0f\u7a0b\u5e8f\u5f00\u53d1\u8d44\u6e90\u6c47\u603b](https://github.com/justjavac/awesome-wechat-weapp)\\n- [\u5b98\u65b9 API \u6587\u6863](https://developers.weixin.qq.com/miniprogram/dev/api/)\\n- [Taro \u6587\u6863](https://nervjs.github.io/taro/native-api.html)\\n- [mpvue \u6587\u6863](http://mpvue.com/mpvue/)\\n\\n[Project on GitHub](https://github.com/AkatQuas/kiddo-plays/tree/master/wxma)"},{"id":"/2018/07/08/gulp-vs-grunt","metadata":{"permalink":"/blog/2018/07/08/gulp-vs-grunt","source":"@site/blog/2018-07-08-gulp-vs-grunt.md","title":"Differences between Grunt and Gulp","description":"- The way you configure your tasks. Grunt is configuration-based. Gulp is stream-based.","date":"2018-07-08T00:00:00.000Z","formattedDate":"July 8, 2018","tags":[{"label":"gulp","permalink":"/blog/tags/gulp"},{"label":"grunt","permalink":"/blog/tags/grunt"}],"readingTime":1.225,"hasTruncateMarker":true,"authors":[],"frontMatter":{"title":"Differences between Grunt and Gulp","categories":["frontend","javascript"],"tags":["gulp","grunt"]},"prevItem":{"title":"\u5fae\u4fe1\u5c0f\u7a0b\u5e8f\u7684\u51e0\u4e2a\u5f00\u53d1\u6846\u67b6","permalink":"/blog/2018/07/18/wxma"},"nextItem":{"title":"A Cocos-js boilerplate","permalink":"/blog/2018/02/25/cocos-js-boilerplate"}},"content":"- **The way you configure your tasks.** Grunt is configuration-based. Gulp is stream-based.\\n- **The way they run your tasks.** Grunt runs the processes you want to execute in sequential manner. Gulp tries to run them with a maximum concurrency, meaning it will try to execute processes in parallel if possible.\\n\\n\x3c!--truncate--\x3e\\n\\nUsing stream, Gulp saves a lot of time on disk I/O.\\n\\n> Looking at the workflows:\\n>\\n> Gulp\\n>\\n> ![](/images/gulp-vs-grunt/gulp-workflow.png)\\n>\\n> Grunt\\n>\\n> ![](/images/gulp-vs-grunt/grunt-workflow.png)\\n\\n## In the End\\n\\n**So, Grunt or Gulp?**\\n\\nHonestly, it depends on the situation, and it\u2019s up to you.\\n\\nOne isn\'t better than the other. They\u2019re the same type of tool that can do the same job. So it will come down to personal preferences.\\n\\nHowever, Grunt config format is a mess. As for me, I choose Gulp!\\n\\n## References\\n\\n- [official - Grunt](https://gruntjs.com/getting-started)\\n\\n- [official - Gulp@3.9.1](https://github.com/gulpjs/gulp/blob/v3.9.1/docs/README.md)\\n- [official - Gulp Plugins](https://gulpjs.com/plugins/)\\n\\n- [Gulp - a good getting-started guide](https://markgoodyear.com/2014/01/getting-started-with-gulp/)\\n\\n- [Gulp Cheatsheet](https://github.com/osscafe/gulp-cheatsheet)\\n\\n![](/images/gulp-vs-grunt/gulp-cheatsheet.png)\\n\\n- [Gulp vs Grunt. Why one? Why the Other?](https://medium.com/@preslavrachev/gulp-vs-grunt-why-one-why-the-other-f5d3b398edc4) @Medium.com on Jan 7, 2015.\\n\\n- [Grunt vs Gulp - Beyond the Numbers](https://jaysoo.ca/2014/01/27/gruntjs-vs-gulpjs/) on Jan 27, 2014.\\n\\n- [Grunt vs Gulp: Which Web Developer Automation Tool Should You Use?](https://www.webpagefx.com/blog/web-design/grunt-vs-gulp/)\\n\\n- [Introduction to Node.js Stream](https://github.com/substack/stream-handbook)\\n\\n- [Automate Your Tasks Easily with Gulp.js](https://scotch.io/tutorials/automate-your-tasks-easily-with-gulp-js)\\n\\n- [Gulp - recipes](https://github.com/gulpjs/gulp/tree/v3.9.1/docs/recipes)\\n\\n## TODOS\\n\\nWhat I learned is just build the code based on src directory, however, Gulp can do more, linting, uploading, continuous integration, etc.\\n\\n[Project on GitHub](https://github.com/AkatQuas/kiddo-plays/tree/master/task-runners)"},{"id":"/2018/02/25/cocos-js-boilerplate","metadata":{"permalink":"/blog/2018/02/25/cocos-js-boilerplate","source":"@site/blog/2018-02-25-cocos-js-boilerplate.md","title":"A Cocos-js boilerplate","description":"A boilerplate on Cocos-JS, a short one with only the folder architecture, config files.","date":"2018-02-25T00:00:00.000Z","formattedDate":"February 25, 2018","tags":[{"label":"cocosjs","permalink":"/blog/tags/cocosjs"},{"label":"javascript","permalink":"/blog/tags/javascript"}],"readingTime":1.795,"hasTruncateMarker":true,"authors":[],"frontMatter":{"title":"A Cocos-js boilerplate","categories":["frontend","javascript"],"tags":["cocosjs","javascript"]},"prevItem":{"title":"Differences between Grunt and Gulp","permalink":"/blog/2018/07/08/gulp-vs-grunt"},"nextItem":{"title":"Quick plays with NativeScript","permalink":"/blog/2017/12/08/nativescript"}},"content":"A boilerplate on Cocos-JS, a short one with only the folder architecture, config files.\\n\\n## Quick start\\n\\nClone the [whole repository](https://github.com/AkatQuas/cocos-js-boilerplate).\\n\\n```bash\\ngit clone https://github.com/AkatQuas/cocos-js-boilerplate cocos-js-game\\n\\ncd cocos-js-game\\n```\\n\\n\x3c!--truncate--\x3e\\n\\n## Important\\n\\n**Blur Image on Android Browser.** [doc is here](http://blog.csdn.net/caonidayeheixiu8/article/details/71619062), [code is here](https://github.com/AkatQuas/cocos-js-boilerplate/blob/master/snippets/DPR-responsive.js).\\n\\nSome small tweaks are needed if the project can\'t run after `rsync`.\\n\\n`src/app.js` have overwritten the class `cc.LoaderScene`, and after resource pre-loading, run the `HelloScene` which is located in `src/views/hello.scene.js`.\\n\\nIt is a good idea to create a small scene to loading the resources and then show the `click to play` button.\\n\\nDon\'t forget to refer the js files in the `jsList` field in `project.json` in the root directory.\\n\\nSome useful snippets on using vanilla Cocos-2s-X-JS are located in `snippets` directory.\\n\\n- **File naming Convention**: lower case with hyphen delimiter, with type indication before extensions.\\n\\n- Writing the simple & easy layer implementation in `*.scene.js` in simple scene\\n\\n- change the global config properly before run into the next scene\\n\\n- **MVC**, scene control the game logic, set the variables and invoke the view effects on the layer, so the layer becomes the VIEW in MVC\\n\\n- **Wechat Size**, support the window in wechat, the size should be 1080\\\\*1740\\n\\n- **Audio**, music -> `*.mp3`, effects -> `*.mp3`, 44100KHz, >= 92Kb, Monophony\\n\\n- **Random**, check [file](https://github.com/AkatQuas/cocos-js-boilerplate/blob/master/src/utils/random.js)\\n\\n- **Modules** , check the `moduleConfig.js` in directory `frameworks/cocos2d-html5` and modify the `project.json` in the root folder.\\n\\n## How to use this boilerplate\\n\\n**./syncf**: for `rsync`ing files with the project folder in the initial phase.\\n\\n```bash\\n# some basic folder architecture and useful files\\n# need to be initialized.\\n# using the command to copy all the initialize them\\n\\n# only one parameter, the project folder\\n\\n./syncf PROJECTFOLDER\\n\\n```\\n\\n# Tips\\n\\nSimple shell scripts list here. Be careful when publish with `--advanced` for the [not-so-smart Uglyfing process in Closure Compiler](http://www.cocos.com/docs/html5/v3/getter-setter-api/zh.html).\\n\\nTo be honest to throw a TLDR [article](https://developers.google.com/closure/compiler/docs/api-tutorial3).\\n\\n```shell\\n# create a new project with cocos js\\ncocos new -l js -p com.akat.game [PROJECT DIR]\\n\\n# running the game in development\\ncocos run -p web -q --port 8321\\n\\n# publish in web\\ncocos run -p web -q -m release [--advanced]\\n```"},{"id":"/2017/12/08/nativescript","metadata":{"permalink":"/blog/2017/12/08/nativescript","source":"@site/blog/2017-12-08-nativescript.md","title":"Quick plays with NativeScript","description":"I meet NativeScript by chance when learning the Angular.","date":"2017-12-08T00:00:00.000Z","formattedDate":"December 8, 2017","tags":[{"label":"nativescript","permalink":"/blog/tags/nativescript"}],"readingTime":6.33,"hasTruncateMarker":true,"authors":[],"frontMatter":{"title":"Quick plays with NativeScript","categories":["frontend"],"tags":["nativescript"]},"prevItem":{"title":"A Cocos-js boilerplate","permalink":"/blog/2018/02/25/cocos-js-boilerplate"},"nextItem":{"title":"The ONLY Framework Angular","permalink":"/blog/2017/12/04/angular"}},"content":"I meet [NativeScript](https://nativescript.org/) by chance when learning the [Angular](https://angular.io/).\\n\\nI write several demo projects using NativeScript. The [book](https://www.nativescript.org/get-the-nativescript-book?utm_medium=website&utm_campaign=yellowstrip&utm_source=nativescriptdotorg) is wonderful when learning this cross-platform framework.\\n\\n## Demo projects:\\n\\n- [groceries-NS-tutorial-ts](https://github.com/AkatQuas/kiddo-plays/tree/master/nativescript/groceries-NS-tutorial-ts)\\n\\n- Tkemo-core throughout the book:\\n\\n  - [project](https://github.com/AkatQuas/kiddo-plays/tree/master/nativescript/Tekmo-ns-core)\\n  - [The NativeScript book](https://www.nativescript.org/get-the-nativescript-book?utm_medium=website&utm_campaign=yellowstrip&utm_source=nativescriptdotorg)\\n\\n- [Pet ScrapBook](https://github.com/AkatQuas/kiddo-plays/tree/master/nativescript/petscrapbook-ns-ng)\\n\\n\x3c!--truncate--\x3e\\n\\n## Quick notes from the book\\n\\nChapter 3 discusses something on how to support different devices, from iPhone to iPad. \\\\\\nChapter 11 Section 2 shows an example to make that happen.\\n\\nLet\'s build an iOS App target iOS 8 and above, forget about the iOS 7 and before.\\n\\nAdd the `moduleId: module.Id` attribute in `@Component` decorator make it fine to resolve the relative path in `templateUrl` and `styleUrls`\\n\\nTwo-way binding needs `NativeScriptFormsModule` from `nativescript-angular/forms`.\\n\\nMany amazing code samples are [here](https://docs.nativescript.org/angular/code-samples/overview)\\n\\nWhen open a dialog modal, you should declare the component both in `declaration` and `entryComponent` property in the `@NgModule` in `app.module.ts`.\\n\\n`ScrollView` cannot be nested!\\n\\n## Best practice:\\n\\n- [Amazing Plugins](#amazing-plugins)\\n- [global](#global)\\n- [template list](#template-list)\\n- [Label](#label)\\n- [Date Picker](#date-picker)\\n- [ES6 syntax](#es6-syntax)\\n- [Navigation](#navigation)\\n- [Icons & positions in ActionBar](#actionbar)\\n- [Image and its resolution](#image)\\n- [File System](#file-system)\\n- [Camera](#camera)\\n- [GPS](#gps)\\n- [Themes](#themes)\\n- [Build on iOS](#build-on-ios)\\n- [Routing in NS-Ng](#routing-in-ns-ng)\\n- [Forms in Ng](#forms-in-ng)\\n- [TabView](#tabview)\\n\\n## global\\n\\nSometimes we need the `global` to accomplish something. What NativeScript offers us is `Application Resources` which can be referred as the following ways:\\n\\n```js\\n// filePath: app/app.js\\n\\nvar application = require(\'application\');\\n// ...\\nvar resources = application.getResources();\\nresources.globalObject = globalObject;\\n// the globalObject should be registered in this way, and can be reached all over the application\\n```\\n\\n> page `load` before `shown modal`\\n\\n## template list\\n\\nCreated from `tns create [projcet name] --template`\\n\\n- vanilla, [tns-template-blank](https://github.com/NativeScript/template-blank)\\n- vanilla tutorial, nativescript-template-hello-world\\n- typescript no Angular, [tns-template-blank-ts](https://github.com/NativeScript/template-blank-ts)\\n- Angular Tutorial, nativescript-template-ng-tutorial\\n- Angular, [tns-template-blank-ng](https://github.com/NativeScript/template-blank-ng)\\n\\n## Label\\n\\nset the `textWrap=\\"true\\"` immediately after creating `Label`\\n\\n## Date Picker\\n\\nIt is recommended to use timestamp in the app rather the date string.\\n\\n## ActionBar\\n\\n- icons `seeting icons` in `ActionBar.ActionItem`, [ios](https://docs.nativescript.org/ui/action-bar#setting-icons), [android](http://androiddrawables.com/)\\n\\n- position\\n\\n![](/images/nativescript/actionbar-position.png)\\n\\n[top](#best-practice)\\n\\n## ES6 Syntax\\n\\n- `arrow function` is supported both in `NS-core` and `NS-Ng`\\n\\n- `short handed` property also supported\\n\\n[top](#best-practice)\\n\\n## Navigation\\n\\n`backstackVisible` makes the target page only can be navigated once, and cannot be navigated back to. [doc](https://docs.nativescript.org/api-reference/interfaces/_ui_frame_.navigationentry#backstackvisible)\\n\\n`transition` between page navigation:\\n\\n- `fade`: Android, iOS\\n- `flipRight`: Android, iOS\\n- `flipLeft`: Android, iOS\\n- `slideLeft`: Android, iOS\\n- `slideRight`: Android, iOS\\n- `slideTop`: Android, iOS\\n- `slideBottom`: Android, iOS\\n- `explode`: Android\\n- `curlUp`: iOS\\n- `curlDown`: iOS\\n\\n- better to pre-defined the propertyName you need in the bindingContext on `loaded` function\\n\\n[top](#best-practice)\\n\\n## File System\\n\\n[doc](https://docs.nativescript.org/api-reference/modules/_file_system_) 2 different folders in `knownFolders`, referred as `documents()` and `temp()`\\n\\nClass [Folder](https://docs.nativescript.org/api-reference/classes/_file_system_.folder) has many useful methods:\\n\\n- `exists`\\n- `getFile` & `clear`\\n- `rename` & `renameSync`\\n- `remove` & `removeSync`\\n\\nAfter `getFile()` from a `Folder`, useful methods, [doc](https://docs.nativescript.org/api-reference/classes/_file_system_.file):\\n\\n- `extension`\\n- `readSync` & `writeSync`\\n- `readText` & `readTextSync`\\n- `writeText` & `writeTextSync`\\n- `rename` & `renameSync`\\n- it is ok to deal with binary in files, to be found!\\n\\n[top](#best-practice)\\n\\n## Camera\\n\\nrun `npm install nativescript-camera --save` first. ( or use `tns plugin add nativescript-camera`). After import or require, `camera.requestPermissions()` in the function. The documentation is [here](https://github.com/NativeScript/nativescript-camera), camera is not in the core module.\\n\\n## Image\\n\\nthe data is always binary after taking the shot (though the image resource path is a string?), be careful when dealing with binary. `Base64` is a good one and NativeScript\u2019s image module already has implementations for converting images to and from base64 encoded strings.\\n\\n**Image resolution**\\n\\n![](/images/nativescript/image-resolution.png)\\n\\nAs for image resources, [NativeScript Image Builder](http://nsimage.brosteins.com/) helps a lot.\\n\\n[top](#best-practice)\\n\\n## GPS\\n\\nRun `npm install nativescript-geolocation --save`. [Doc is here](https://github.com/NativeScript/nativescript-geolocation).\\n\\nGeolocation is not in the core module. Kind of failure because of the so-called `Google Plaer service`.\\n\\n## Themes\\n\\nOnly a limited number of styles are [supported](https://docs.nativescript.org/ui/styling)\\n\\nin the core theme, [despite](https://ell.stackexchange.com/questions/506/usage-in-spite-of-and-despite-of/508) the color differentiation, the same class are:\\n\\n- Text size: `h1, h2, h3, h4, h5, h6`\\n- Label: `label`\\n- Text align: `text-center`, `{margin/padding}- {top/bottom/left/right}-{amount}`\\n- Button: `btn btn-primary btn-outline btn-rounded-sm/lg btn-active` (recommended to use margin/padding)\\n- ListView: `list-group, list-group-item, list-group-item-heading list-group-item-text`, `thumb` (under `list-group-item`)\\n- Image: `image-circle, image-rounded, image-thumbnail`\\n- Form: `form, input-field`,\\n\\n## i18n\\n\\nThere is an NPM plugin named `nativescript-i18n` that implements i18n. By using this plugin, you can build you app, so it can support multiple languages and cultures.\\n\\nIf your app requires support for i18n, or you want to build an app that is accessible to multiple languages and cultures, check out this plugin at [here](https://www.npmjs.com/package/nativescript-i18n.)\\n\\n[top](#best-practice)\\n\\n## Build on iOS\\n\\n**id:** in the `package.json` -> `nativescript` -> `id`\\n\\n**rename the app:** updating the `Info.plist` file, specifically the `CFBundleDisplayName` value.\\n\\n**Version:** CFBundleVersion, which corresponds to the version number, and CFBundleShortVersionString, which corresponds to the build number.\\n\\n**App Icon:** All icons are stored in the `App_Resources/iOS/Assets.xcassets/AppIcon.appiconset` folder, named `icons-{size}.png`, remember to rename to match the convention.\\n\\n**Splash, LaunchScreen:** replace the image in the `LaunchScreen.Center.imageset` and `LaunchScreen.AspectFill.imageset`, remember to rename to match the convention.\\n\\n**Device orientation:**\\n\\nAll the supported orientation is here, choose those you need.\\n\\n```\\n# Info.plist\\n<key>UISupportedInterfaceOrientations</key>\\n<array>\\n    <string>UIInterfaceOrientationPortrait</string>\\n    <string>UIInterfaceOrientationLandscapeLeft</string>\\n    <string>UIInterfaceOrientationLandscapeRight</string>\\n</array>\\n<key>UISupportedInterfaceOrientations~ipad</key>\\n<array>\\n    <string>UIInterfaceOrientationPortrait</string>\\n    <string>UIInterfaceOrientationPortraitUpsideDown</string>\\n    <string>UIInterfaceOrientationLandscapeLeft</string>\\n    <string>UIInterfaceOrientationLandscapeRight</string>\\n</array>\\n```\\n\\n**iOS APP security component:** You need to become familiar with the following five iOS app security components:\\n\\n1. Apple Developer Account associated with an Apple ID\\n\\n1. App identifiers\\n\\n1. Certificates\\n\\n1. Registered devices\\n\\n1. Provisioning profiles\\n\\n**Step by Step:**\\n\\n1. App IDs\\n\\n1. Certificates, iOS Distribution recommended\\n\\n1. Registered Devices\\n\\n1. Provisioning Profiles\\n\\n**Read the document please**\\n\\n[top](#best-practice)\\n\\n## Routing in NS-Ng\\n\\nThe complete document is [here](https://docs.nativescript.org/core-concepts/angular-navigation).\\n\\nWhat I want to point out is that You can also use the stock `Angular Route` and `Location` classes to handle your navigation \u2014 `RouterExtensions` actually invokes those APIs internally. However, `RouterExtensions` provides access to some NativeScript-specific features like clearing navigation history or defining page transitions, and the [detail](https://docs.nativescript.org/core-concepts/angular-navigation#navigation-options).\\n\\nBesides, it is ok to navigate back in `routerExtensions`.\\n\\n```ts\\n@Component({\\n  // ...\\n})\\nexport class MainComponent {\\n  constructor(private routerExtensions: RouterExtensions) {\\n    // ...\\n  }\\n\\n  public goBack() {\\n    this.routerExtensions.back();\\n  }\\n\\n  public goBackPage() {\\n    this.routerExtensions.backToPreviousPage();\\n  }\\n}\\n```\\n\\nGetting data passed in via the route parameters, importing `PageRoute` from `@nativescript-angular/router` and importing `rxjs/add/operator/switchMap`, the [doc](https://docs.nativescript.org/core-concepts/angular-navigation#passing-parameter).\\n\\n```ts\\nthis.pageRoute.activatedRoute\\n  .switchMap((activatedRoute) => activatedRoute.params)\\n  .forEach((params) => {\\n    id = +params[\'id\'];\\n  });\\n```\\n\\n**Note:** It seems routing to the children component won\'t change the router path. Redirect don\'t change either.\\n\\n[top](#best-practice)\\n\\n## Forms in Ng\\n\\nThe property in Native UI components when using `[(ngModle)]`\\n\\n![](/images/nativescript/ngmodel-ui-components.png)\\n\\n[top](#best-practice)\\n\\n## Amazing Plugins\\n\\n- [nativescript-appversion](https://github.com/eddyverbruggen/nativescript-appversion): NativeScript doesn\'t provide a built-in mechanism for getting an app\u2019s version number, but the nativescript-appversion plugin does.\\n\\n- [NativeScript + Angular Snippets for Visual Studio Code](https://github.com/NathanWalker/nativescript-ng2-vscode-snippets): Snippets for NativeScript + Angular 2 Development, available in VS Code Extensions.\\n\\n[top](#best-practice)\\n\\n## Tabview\\n\\nFind two ways to create tabview in the app without writing too much code in the same file.\\n\\nCode examples:\\n\\n- using child route, giving a `outlet` name to the child route, [code from here](https://discourse.nativescript.org/t/can-we-have-a-child-router-outlet-in-a-tabview/342/3)\\n\\n```xml\\n<TabView\\n    (selectedIndexChanged)=\\"onHomeSelectedIndexChanged($event)\\"\\n    [selectedIndex]=\\"homeSelectedIndex\\"\\n    selectedColor=\\"#1083BF\\"\\n>\\n    <StackLayout *tabItem=\\"{title: \'First\'}\\">\\n        <router-outlet name=\\"first\\"></router-outlet>\\n    </StackLayout>\\n    <StackLayout *tabItem=\\"{title: \'Second\'}\\">\\n        <router-outlet name=\\"second\\"></router-outlet>\\n    </StackLayout>\\n</TabView>\\n```\\n\\n```ts\\n// routing.ts\\n{\\n    path: \'home\',\\n    component: HomeComponent,\\n    children: [\\n        {path: \'\', redirectTo: \'social\', pathMatch: \'full\'},\\n        {path: \'first\', component: FirstComponent, outlet: \'first\'},\\n        {path: \'second\', component: SecondComponent, outlet: \'second\'},\\n    ]\\n}\\n```\\n\\n- using selector, write every component, [code from here](https://github.com/jlooper/Yowwlr/blob/master/app/home/home.html).\\n\\n```xml\\n<TabView #tabview [selectedIndex]=\\"tabindex\\" class=\\"tab-view\\" selectedColor=\\"#4099FF\\">\\n\\n    <StackLayout align=\\"top\\" *tabItem=\\"{title: \'Home\', iconSource:\'res://home\'}\\">\\n        <home-tab></home-tab>\\n    </StackLayout>\\n    <StackLayout *tabItem=\\"{title: \'Explore\', iconSource:\'res://explore\'}\\">\\n        <Label class=\\"border\\" borderWidth=\\"5\\" borderColor=\\"black\\" text=\\"hey\\"></Label>\\n    </StackLayout>\\n    <StackLayout *tabItem=\\"{title: \'Notifications\', iconSource:\'res://notifications\'}\\"> </StackLayout>\\n    <StackLayout *tabItem=\\"{title: \'Messages\', iconSource:\'res://messages\'}\\">\\n        <chat-tab></chat-tab>\\n    </StackLayout>\\n    <StackLayout *tabItem=\\"{title: \'Me\', iconSource:\'res://me\'}\\"> </StackLayout>\\n\\n</TabView>\\n```\\n\\n[top](#best-practice)\\n\\n## Color Schemas\\n\\n![](/images/nativescript/color-schemas-all.png)\\n\\n[top](#best-practice)"},{"id":"/2017/12/04/angular","metadata":{"permalink":"/blog/2017/12/04/angular","source":"@site/blog/2017-12-04-angular.md","title":"The ONLY Framework Angular","description":"As we all know, Angular is the only FRAMEWORK in frontend development.","date":"2017-12-04T00:00:00.000Z","formattedDate":"December 4, 2017","tags":[{"label":"angular","permalink":"/blog/tags/angular"}],"readingTime":2.1,"hasTruncateMarker":false,"authors":[],"frontMatter":{"title":"The ONLY Framework Angular","categories":["frontend","angular"],"tags":["angular"]},"prevItem":{"title":"Quick plays with NativeScript","permalink":"/blog/2017/12/08/nativescript"},"nextItem":{"title":"\u4ece\u96c6\u5408\u7684\u89d2\u5ea6\u7406\u89e3\u6570\u636e\u5e93","permalink":"/blog/2017/11/07/database-basic-concepts"}},"content":"As we all know, [Angular](https://angular.io) is the only FRAMEWORK in frontend development.\\n\\nI\'m glad I start using Angular from `ng@2.x` and growing as it evolves.\\n\\n> Google your questions proactively.\\n\\nThe three projects, [first-app](https://github.com/AkatQuas/kiddo-plays/tree/master/angular-playlist/first-app), [module-evolve](https://github.com/AkatQuas/kiddo-plays/tree/master/angular-playlist/module-evolve) and [recipe-app](https://github.com/AkatQuas/kiddo-plays/tree/master/angular-playlist/recipe-app), are built on `Angular 4`.\\n\\n[angular-new-tutorial-of-heroes](https://github.com/AkatQuas/kiddo-plays/tree/master/angular-playlist/angular-new-tour-of-heroes) built on `Angular 7`.\\n\\n`Angular` is evolving rapidly, you\'d better catch up!\\n\\n[custom-modal](https://github.com/AkatQuas/kiddo-plays/tree/master/angular-playlist/custom-modal) is about something deep in Angular, `NgZone`, ` ComponentFactoryResolver`.\\n\\n## Angular CLI\\n\\nThe official document is [here](https://github.com/angular/angular-cli/wiki), so you can find the all commands available.\\n\\n`ng` command will use the `angular-cli.json` file (located in the project root) to generate or serve.\\n\\n`ng new my-project --style=scss` make it possible to use `scss` in the project. You can choose any other style language as you wish.\\n\\nIt is recommended to config the `.angular-cli.json` file in advance. A personal practice is [here](https://github.com/AkatQuas/kiddo-plays/tree/master/angular-playlist/angular-cli.json). In Angular 6 or later, the `angular-cli.json` schema has changed a lot, so this file is kind of out-of-date. You\'d better configure properly.\\n\\nconfig in `package.json`\\n\\n```bash\\n# production build\\nnpm run build ---\x3e ng build --prod\\n\\n# development\\nnpm run start ---\x3e ng serve --aot\\n\\n# lint fix\\nnpm run lint ---\x3e ng lint --fix\\n```\\n\\n## In APP development\\n\\nSearch in the [API document](https://angular.io/api/) to find the interface of the APIs if you need it.\\n\\n- `*ngIF` can work like `ternary statement`, [examples](https://angular.io/api/common/NgIf)\\n\\n- the result in `*ngIf` condition statement can be stored as a local variable, the document has the [examples](https://angular.io/api/common/NgIf).\\n\\n- `*ngFor` allows customized templates. And, the iterator syntax is a little different. the [doc](https://angular.io/api/core/TrackByFunction) of `trackBy` function. The whole [document](https://angular.io/api/common/NgForOf).\\n\\n- `one-way data binding` has a different syntax like `bind-${attr}`, `(event)` works as well as `on-${event}`, check the [document](https://angular.io/guide/template-syntax#binding-syntax-an-overview)\\n\\n- the order of `imports` in `app.module.ts` matters, especially when dealing with the route navigation!\\n\\n- router guard, `canActivate`, `canDeactivate`, `canLoad` in lazy-loading (or asynchronous routing)\\n\\n- when observe on params, query ... on some `Observable`, try to `unsubsrcibe` them on Destroy hook.\\n\\n- `handleError` function in `http/Observable`\\n\\n- `debounceTime(500).distinctUntilChanged().` when listening to input and search\\n\\n- `async` pipe helps to unwrap a value from an asynchronous primitive. [doc](https://angular.io/api/common/AsyncPipe)\\n\\n- mock data with `rxjs`. observable, operators\\n\\n- `--aot` helps uglify the code.\\n\\n## Build\\n\\n- `ng build --base-href` helps you to define the `js` referred when the `index.html` is not on the website root folder. And the `image assets` should be written in relative mode like `assets/a.img` rather than beginning with `/` which is an absolute path.\\n\\n- `ng build --prod` to build production with `--aot` in default.\\n\\n[Project on GitHub](https://github.com/AkatQuas/kiddo-plays/tree/master/angular-playlist)"},{"id":"/2017/11/07/database-basic-concepts","metadata":{"permalink":"/blog/2017/11/07/database-basic-concepts","source":"@site/blog/2017-11-07-database-basic-concepts.md","title":"\u4ece\u96c6\u5408\u7684\u89d2\u5ea6\u7406\u89e3\u6570\u636e\u5e93","description":"\u201c\u5173\u7cfb\u201d\u7684\u6982\u5ff5\u4e0e\u5173\u7cfb\u7684\u96c6\u5408\u8bba\u5b9a\u4e49\u662f\u7d27\u5bc6\u76f8\u5173\u7684\u3002","date":"2017-11-07T00:00:00.000Z","formattedDate":"November 7, 2017","tags":[],"readingTime":20.215,"hasTruncateMarker":true,"authors":[],"frontMatter":{"title":"\u4ece\u96c6\u5408\u7684\u89d2\u5ea6\u7406\u89e3\u6570\u636e\u5e93","categories":["database"]},"prevItem":{"title":"The ONLY Framework Angular","permalink":"/blog/2017/12/04/angular"},"nextItem":{"title":"Hello World","permalink":"/blog/2017/03/07/hello-world"}},"content":"\u201c\u5173\u7cfb\u201d\u7684\u6982\u5ff5\u4e0e\u5173\u7cfb\u7684\u96c6\u5408\u8bba\u5b9a\u4e49\u662f\u7d27\u5bc6\u76f8\u5173\u7684\u3002\\n\\n\u5173\u7cfb\u4e5f\u662f\u5143\u7ec4\u7684\u96c6\u5408\uff0c\u8868\u4e2d\u5404\u884c\uff08\u4e5f\u79f0 _\u5143\u7ec4_ \uff09\u6392\u5217\u7684\u6b21\u5e8f\u4e0d\u91cd\u8981\u3002\\n\\n\u6bcf\u4e00\u884c\u7684\u5404\u4e2a\u7ec4\u5206\uff08\u4e5f\u79f0 _\u5c5e\u6027_ \uff09\u7684\u6b21\u5e8f\u5f88\u5173\u952e\u3002\\n\\n\u4e00\u5f20\u5173\u7cfb\u8868\u5305\u542b\u4e24\u4e2a\u65b9\u9762\uff1a\\n\\n1. \u5217\u540d\u7684\u96c6\u5408\uff08\u5c5e\u6027\u96c6\u5408\uff09\\n1. \u5305\u542b\u4fe1\u606f\u7684\u884c\uff08\u4fe1\u606f\u5143\u7ec4\uff09\\n\\n\u7b2c 1 \u9879\uff0c\u5c5e\u6027\u7684\u96c6\u5408\u4e5f\u88ab\u79f0\u4e3a\u5173\u7cfb\u7684\u6a21\u5f0f\uff08scheme\uff09\u3002\\n\\n\x3c!--truncate--\x3e\\n\\n# \u6570\u636e\u5e93\\n\\n\u5173\u7cfb\u7684\u96c6\u5408\u79f0\u4e3a\u6570\u636e\u5e93\u3002\\n\\n\u6570\u636e\u5e93\u4e2d\u5404\u5173\u7cfb\u7684\u6a21\u5f0f\u7ec4\u6210\u7684\u96c6\u5408\u5c31\u662f\u6570\u636e\u5e93\u7684\u6a21\u5f0f\u3002\u8981\u6ce8\u610f\u6570\u636e\u5e93\u6a21\u5f0f\uff08\u5b83\u544a\u8bc9\u6211\u4eec\u4e0e\u6570\u636e\u5e93\u4e2d\u4fe1\u606f\u7ec4\u7ec7\u65b9\u5f0f\u6709\u5173\u7684\u4fe1\u606f\uff09\u4e0e\u5404\u5173\u7cfb\u4e2d\u5143\u7ec4\u7684\u96c6\u5408\uff08\u6570\u636e\u5e93\u4e2d\u5b58\u50a8\u7684\u5b9e\u9645\u4fe1\u606f\uff09\u4e4b\u95f4\u7684\u533a\u522b\u3002\\n\\n## \u67e5\u8be2\u57fa\u672c\u64cd\u4f5c\\n\\n1. `insert(t,R)`\u3002\u5982\u679c\u5143\u7ec4 t \u5c1a\u672a\u51fa\u73b0\u5728\u5173\u7cfb R \u4e2d\uff0c\u5c31\u5c06\u5b83\u6dfb\u52a0\u5230 R \u4e2d\u3002\u8be5\u64cd\u4f5c\u4e0e\u8bcd\u5178\u6216\u4e8c\u5143\u5173\u7cfb\u7684 _\u63d2\u5165_ \u64cd\u4f5c\u6709\u7740\u76f8\u540c\u7684\u7cbe\u795e\u3002\\n2. `delete(X,R)`\u3002\u5728\u8fd9\u91cc\uff0cX \u662f\u67d0\u4e9b\u5143\u7ec4\u7684\u89c4\u8303\u3002\u5b83\u662f\u7531\u5bf9\u5e94 R \u5404\u5c5e\u6027\u7684\u7ec4\u5206\u7ec4\u6210\u7684\uff0c\u6bcf\u4e2a\u7ec4\u5206\u90fd\u4f1a\u662f\u4e0b\u9762\u4e24\u8005\u4e4b\u4e00\u3002\\n   - \u4e00\u4e2a\u503c\u3002\\n   - \u7b26\u53f7\\\\*\uff0c\u8868\u793a\u53ef\u4ee5\u63a5\u53d7\u4efb\u610f\u503c\u3002\u8be5\u64cd\u4f5c\u7684\u6548\u679c\u662f\u5220\u9664\u6ee1\u8db3\u89c4\u8303 X \u7684\u6240\u6709\u5143\u7ec4\u3002\\n3. `lookup(X,R)`\u3002\u8be5\u64cd\u4f5c\u7684\u7ed3\u679c\u662f\u5f97\u5230 R \u4e2d\u5339\u914d\u89c4\u8303 X \u7684\u5143\u7ec4\u5f62\u6210\u7684\u96c6\u5408\uff0cX \u662f\u4e2a\u8c61\u5f81\u6027\u7684\u5143\u7ec4\uff0c\u5c31\u8ddf\u7b2c(2)\u9879\u4e2d\u63cf\u8ff0\u7684\u4e00\u6837\u3002\\n\\n## \u8868\u793a\u5173\u7cfb\u7684\u6570\u636e\u7ed3\u6784\u7684\u8bbe\u8ba1\\n\\n> \u5728\u4f7f\u7528\u5173\u7cfb\u6570\u636e\u6a21\u578b\u65f6\uff0c\u5982\u4f55\u9009\u62e9\u5408\u9002\u7684\u6570\u636e\u5e93\u6a21\u5f0f\u5f88\u91cd\u8981\\n>\\n> 1. \u5982\u679c\u5c06\u4e24\u4e2a\u72ec\u7acb\u7c7b\u578b\u7684\u4fe1\u606f\u7ed3\u5408\u6210\u4e00\u4e2a\u5173\u7cfb\u6a21\u5f0f\uff0c\u5c31\u53ef\u80fd\u88ab\u8feb\u591a\u6b21\u91cd\u590d\u540c\u6837\u7684\u6570\u636e\u4e8b\u5b9e\u3002\\n> 2. \u5728\u5c5e\u6027\u8868\u793a\u76f8\u4e92\u8054\u7cfb\u7684\u4fe1\u606f\u65f6\uff0c\u4e0d\u8981\u628a\u5b83\u4eec\u5206\u5f00\u3002\\n\\n## \u952e\\n\\n\u5f88\u591a\u6570\u636e\u5e93\u5173\u7cfb\u53ef\u88ab\u89c6\u4f5c\u4ece\u67d0\u4e9b\u5c5e\u6027\u7684\u96c6\u5408\u5230\u5176\u4f59\u5c5e\u6027\u7684\u51fd\u6570\u3002\u56e0\u4e3a\u51fd\u6570\u7684\u6570\u636e\u7ed3\u6784\u6bd4\u4e00\u822c\u5173\u7cfb\u7684\u6570\u636e\u7ed3\u6784\u8981\u7b80\u5355\u4e00\u4e9b\uff0c\u6240\u4ee5\u5982\u679c\u77e5\u9053\u53ef\u4ee5\u4f5c\u4e3a\u51fd\u6570\u5b9a\u4e49\u57df\u7684\u5c5e\u6027\u96c6\u5408\u662f\u6bd4\u8f83\u597d\u7684\u3002\u8fd9\u6837\u7684\u5c5e\u6027\u96c6\u5408\u88ab\u79f0\u4f5c _\u952e_ \u3002\\n\\n\u5173\u7cfb\u7684 _\u952e_ \u662f\u4e00\u9879\u6216\u591a\u9879\u5c5e\u6027\u7684\u96c6\u5408\uff0c\u6ee1\u8db3\u201d\u5728\u4efb\u4f55\u60c5\u51b5\u4e0b\uff0c\u4ee5\u952e\u5c5e\u6027\u4e3a\u6807\u9898\u7684\u5217\u4e2d\u4e0d\u4f1a\u51fa\u73b0\u76f8\u540c\u7684\u503c\u201c\u3002\\n\\n> \u9009\u62e9\u5408\u9002\u7684\u952e\\n>\\n> 1. \u4e0d\u80fd\u53ea\u9760\u89c2\u5bdf\u5173\u7cfb\u7684\u51e0\u4e2a\u793a\u4f8b\u5c31\u786e\u5b9a\u952e\u3002\\n> 2. \u4e0d\u5b58\u5728\u6240\u8c13\u7684\u201c\u6b63\u786e\u7684\u952e\u201d\u7684\u9009\u62e9\uff0c\u9009\u62e9\u4ec0\u4e48\u5c5e\u6027\u4f5c\u4e3a\u952e\uff0c\u53d6\u51b3\u4e8e\u5bf9\u5173\u7cfb\u6240\u542b\u6570\u636e\u7684\u7c7b\u578b\u4f5c\u51fa\u7684\u5047\u8bbe\u3002\\n\\n# \u5173\u7cfb\u7684\u4e3b\u8981\u5b58\u50a8\u7ed3\u6784\\n\\n\u8fd9\u91cc\u6709\u4e00\u4e9b\u53ef\u7528\u4e8e\u8868\u793a\u5173\u7cfb\u7684\u7ed3\u6784\u3002\\n\\n1. \u4e8c\u53c9\u67e5\u627e\u6811\uff0c\u5728\u5b9a\u4e49\u57df\u503c\u4e0a\u6709\u201c\u5c0f\u4e8e\u201d\u5173\u7cfb\u4ee5\u5b89\u6392\u5143\u7ec4\u7684\u4f4d\u7f6e\uff0c\u53ef\u4ee5\u7528\u6765\u4fc3\u8fdb\u6307\u5b9a\u4e86\u5b9a\u4e49\u57df\u503c\u7684\u64cd\u4f5c\u3002\\n2. \u4ee5\u5b9a\u4e49\u57df\u503c\u4f5c\u4e3a\u6570\u7ec4\u7d22\u5f15\uff0c\u7528\u7279\u5f81\u5411\u91cf\u7684\u6570\u7ec4\u3002\\n3. \u6563\u5217\u5b9a\u4e49\u57df\u503c\u4ee5\u627e\u5230\u6563\u5217\u8868\u5143\u7684\u6563\u5217\u8868\u3002\\n4. \u539f\u5219\u4e0a\u770b\uff0c\u5143\u7ec4\u7ec4\u6210\u7684\u94fe\u8868\u662f\u4e00\u79cd\u5019\u9009\u7ed3\u6784\uff0c\u4f46\u662f\u5b83\u5bf9\u4efb\u4f55\u7c7b\u578b\u7684\u64cd\u4f5c\u90fd\u6ca1\u6709\u4fc3\u8fdb\u4f5c\u7528\u3002\\n\\n\u5f53\u5173\u7cfb\u4e0d\u662f\u4e8c\u5143\u5173\u7cfb\u65f6\uff0c\u540c\u6837\u7684\u7ed3\u6784\u4e5f\u662f\u53ef\u4ee5\u4f7f\u7528\u7684\u3002\u5b9a\u4e49\u57df\u4e0d\u518d\u53ea\u6709\u5355\u4e2a\u5c5e\u6027\uff0c\u800c\u662f\u53ef\u80fd\u7ed3\u5408 k \u4e2a\u5c5e\u6027\uff0c\u79f0\u4e3a _\u5b9a\u4e49\u57df\u5c5e\u6027_ \uff0c\u6216\u5728\u660e\u786e\u6240\u6307\u7684\u5c5e\u6027\u96c6\u5408\u65f6\uff0c\u76f4\u63a5\u79f0\u4e3a _\u5b9a\u4e49\u57df_ \u3002\u6b64\u65f6\uff0c\u5b9a\u4e49\u57df\u7684\u503c\u5c31\u662f k \u5143\u7ec4\uff0c\u5404\u7ec4\u5206\u5bf9\u5e94\u5b9a\u4e49\u57df\u7684\u5404\u5c5e\u6027\u3002\u800c _\u503c\u57df\u5c5e\u6027_ \u662f\u6307\u54ea\u4e9b\u5b9a\u4e49\u57df\u5c5e\u6027\u4ee5\u5916\u7684\u5c5e\u6027\uff0c\u53ef\u4ee5\u6709\u591a\u4e2a\u7ec4\u5206\u3002\\n\\n\u4e00\u822c\u800c\u8a00\uff0c\u5fc5\u987b\u9009\u51fa\u60f3\u8981\u4f5c\u4e3a\u5b9a\u4e49\u57df\u7684\u90a3\u4e9b\u5c5e\u6027\u3002\u7b80\u5355\u60c5\u5f62\uff0c\u5bf9\u4e8e\u5177\u6709\u4e00\u4e2a\u6216\u5c11\u91cf\u5c5e\u6027\u4f5c\u4e3a\u5173\u7cfb\u7684\u952e\u7684\u60c5\u51b5\uff0c\u76f4\u63a5\u62ff\u952e\u5c5e\u6027\u4f5c\u4e3a\u5b9a\u4e49\u57df\u5373\u53ef\uff0c\u5176\u4f59\u5c5e\u6027\u4f5c\u4e3a\u503c\u57df\u3002\u6ca1\u6709\u952e\u65f6\uff0c\u53ef\u4ee5\u9009\u62e9\u4efb\u610f\u5c5e\u6027\u96c6\u5408\u4f5c\u4e3a\u5b9a\u4e49\u57df\u3002\\n\\n\u4e00\u65e6\u9009\u62e9\u4e86\u5b9a\u4e49\u57df\uff0c\u5c31\u53ef\u4ee5\u4ece\u4e0a\u8ff0\u63d0\u5230\u7684 4 \u79cd\u6570\u636e\u7ed3\u6784\u4e2d\u4efb\u9009\u5176\u4e00\u8868\u793a\u8be5\u5173\u7cfb\uff0c\u6216\u8005\u5176\u5b9e\u4e5f\u53ef\u4ee5\u9009\u62e9\u53e6\u4e00\u79cd\u7ed3\u6784\u3002\u4e0d\u8fc7\uff0c\u901a\u5e38\u4f1a\u9009\u62e9\u4ee5\u5b9a\u4e49\u57df\u503c\u4f5c\u4e3a\u7d22\u5f15\u7684\u6563\u5217\u8868\uff0c\u800c\u4e14\u4e00\u822c\u90fd\u4f1a\u8fd9\u4e48\u505a\u3002\\n\\n\u6240\u9009\u7684\u7ed3\u6784\u5c31\u79f0\u4e3a\u8be5\u5173\u7cfb\u7684 _\u4e3b\u7d22\u5f15\u7ed3\u6784_ \u3002\u5f62\u5bb9\u8bcd\u201c\u4e3b\u201d\u8868\u793a\u5143\u7ec4\u7684\u4f4d\u7f6e\u662f\u7531\u8be5\u7ed3\u6784\u786e\u5b9a\u7684\u3002 _\u7d22\u5f15_ \u662f\u5728\u7ed9\u5b9a\u6240\u9700\u8981\u7684 \u7ec4\u7684\u4e00\u4e2a\u6216\u591a\u4e2a\u7ec4\u5206\u7684\u60c5\u51b5\u4e0b\u534f\u52a9\u627e\u5230\u5143\u7ec4\u7684\u6570\u636e\u7ed3\u6784\u3002\\n\\n> \u4e3b\u7d22\u5f15\u7684\u9009\u62e9\\n>\\n> 1. \u5c06\u5173\u7cfb\u6a21\u5f0f\u7684\u952e\u4f5c\u4e3a\u51fd\u6570\u7684\u5b9a\u4e49\u57df\uff0c\u5c06\u5176\u4f59\u5c5e\u6027\u4f5c\u4e3a\u503c\u57df\u901a\u5e38\u662f\u5f88\u5b9e\u7528\u7684\u3002\\n> 2. \u5982\u679c\u6700\u5e38\u89c1\u7684\u67e5\u8be2\u6240\u6307\u5b9a\u7684\u662f\u4e0d\u6784\u6210\u952e\u7684\u5c5e\u6027\u7684\u503c\uff0c\u5c31\u53ef\u80fd\u8981\u9009\u7528\u8be5\u5c5e\u6027\u96c6\u5408\u4f5c\u4e3a\u5b9a\u4e49\u57df\uff0c\u5c06\u5176\u4f59\u5c5e\u6027\u4f5c\u4e3a\u503c\u57df\u3002\\n> 3. \u4e3b\u7d22\u5f15\u7ed3\u6784\u5b9a\u4e49\u57df\u7684\u9009\u62e9\u53ef\u80fd\u5bf9\u6267\u884c\u201c\u5e38\u89c4\u201d\u67e5\u8be2\u901f\u5ea6\u6709\u7740\u6700\u5927\u7684\u5f71\u54cd\u3002\\n\\n## \u4e3b\u7d22\u5f15\u4e3a\u6563\u5217\u8868\u7684\u63d2\u5165\u3001\u5220\u9664\u3001\u67e5\u627e\\n\\n\u628a\u6ce8\u610f\u529b\u653e\u5728\u4f5c\u4e3a\u4e3b\u7d22\u5f15\u7ed3\u6784\u7684\u6563\u5217\u8868\u4e0a\u3002\u5982\u679c\u64cd\u4f5c\u6307\u5b9a\u4e86\u5b9a\u4e49\u57df\u7684\u503c\uff0c\u90a3\u4e48\u5c31\u8981\u6563\u5217\u8be5\u503c\u4ee5\u627e\u5230\u6563\u5217\u8868\u5143\u3002\\n\\n1. \u63d2\u5165\u5143\u7ec4 t\uff0c\u5c31\u8981\u68c0\u67e5\u76f8\u5e94\u7684\u6563\u5217\u8868\u5143\uff0c\u770b\u770b t \u662f\u5426\u5df2\u7ecf\u4f4d\u5217\u5176\u4e2d\uff0c\u5982\u679c\u6ca1\u6709\u5c31\u5728\u8be5\u6563\u5217\u8868\u5143\u5bf9\u5e94\u7684\u94fe\u8868\u4e2d\u65b0\u5efa\u65b0\u5355\u5143\u6765\u5bb9\u7eb3 t\u3002\\n2. \u8981\u5220\u9664\u5339\u914d\u89c4\u8303 X \u7684\u5143\u7ec4\uff0c\u5c31\u8981\u6839\u636e\u636e X \u627e\u51fa\u5b9a\u4e49\u57df\u503c\uff0c\u8fdb\u884c\u6563\u5217\u4ee5\u5f97\u51fa\u76f8\u5e94\u7684\u6563\u5217\u8868\u5143\uff0c\u7136\u540e\u6cbf\u7740\u8be5\u6563\u5217\u8868\u5143\u5bf9\u5e94\u7684\u94fe\u8868\u5411\u4e0b\u67e5\u627e\uff0c\u5c06\u5339\u914d\u89c4\u8303 X \u7684\u5404\u5143\u7ec4\u90fd\u5220\u9664\u3002\\n3. \u8981\u6839\u636e\u89c4\u8303 X \u67e5\u627e\u5143\u7ec4\uff0c\u8fd8\u662f\u8981\u4ece X \u627e\u5230\u5b9a\u4e49\u57df\u503c\uff0c\u8fdb\u884c\u6563\u5217\u4ee5\u5f97\u51fa\u76f8\u5e94\u7684\u6563\u5217\u8868\u5143\u3002\u6cbf\u7740\u5bf9\u5e94\u8be5\u6563\u5217\u8868\u5143\u7684\u94fe\u8868\u5411\u4e0b\u67e5\u627e\uff0c\u5c06\u94fe\u8868\u4e2d\u5339\u914d\u89c4\u8303 X \u7684\u5404\u5143\u7ec4\u5206\u522b\u4f5c\u4e3a\u56de\u5e94\u751f\u6210\u3002\\n\\n\u5982\u679c\u64cd\u4f5c\u6ca1\u6709\u6307\u5b9a\u5b9a\u4e49\u57df\u503c\uff0c\u5c31\u4e0d\u4f1a\u8fd9\u4e48\u8d70\u8fd0\u4e86\u3002\u63d2\u5165\u64cd\u4f5c\u5c31\u603b\u662f\u8981\u5b8c\u6574\u5730\u6307\u5b9a\u88ab\u63d2\u5165\u7684\u5143\u7ec4\uff0c\u800c\u5220\u9664\u6216\u67e5\u627e\u64cd\u4f5c\u53ef\u80fd\u4e0d\u80fd\u8fd9\u6837\u3002\u5728\u90a3\u6837\u7684\u60c5\u51b5\u4e0b\uff0c\u5fc5\u987b\u5bf9\u6240\u6709\u7684\u6563\u5217\u8868\u5143\u5217\u8868\u8fdb\u884c\u67e5\u627e\uff0c\u627e\u5230\u5339\u914d\u7684\u5143\u7ec4\uff0c\u5e76\u5206\u522b\u5220\u9664\u6216\u5217\u51fa\u5b83\u4eec\u3002\\n\\n## \u8f85\u52a9\u7d22\u5f15\\n\\n\u53ef\u4ee5\u5728\u7ed9\u5b9a\u67d0\u4e00\u5c5e\u6027\u6216\u67d0\u4e9b\u5c5e\u6027\u7684\u503c\u7684\u60c5\u51b5\u4e0b\u627e\u5230\u5143\u7ec4\uff0c\u4f46\u4e0d\u80fd\u7528\u6765\u5728\u6574\u4e2a\u7ed3\u6784\u4e2d\u653e\u7f6e\u5143\u7ec4\u7684\u6570\u636e\u7ed3\u6784\uff0c\u5c31\u662f _\u8f85\u52a9\u7d22\u5f15_ \u3002\\n\\n\u4e00\u822c\u800c\u8a00\uff0c\u5173\u7cfb R \u5c5e\u6027 A \u4e0a\u7684 _\u8f85\u52a9\u7d22\u5f15_ \u662f\u6ee1\u8db3\u4ee5\u4e0b\u6761\u4ef6\u7684\u6709\u5e8f\u5bf9(v, p)\u7684\u96c6\u5408\u3002\\n\\n1. v \u662f\u5c5e\u6027 A \u7684\u503c\u3002\\n2. p \u662f\u6307\u5411\u5173\u7cfb R \u4e3b\u7d22\u5f15\u7ed3\u6784\u4e2d\u67d0\u4e2a\u5143\u7ec4\u7684\u6307\u9488\uff0c\u8be5\u5143\u7ec4\u7684\u201cA\u201d\u7ec4\u5206\u7684\u503c\u4e3a v\u3002\\n\\n\u5bf9\u5c5e\u6027 A \u7684\u503c\u4e3a v \u7684\u5404\u5143\u7ec4\u6765\u8bf4\uff0c\u8f85\u52a9\u7d22\u5f15\u90fd\u6709\u5bf9\u5e94\u7684\u6709\u5e8f\u5bf9\u3002\\n\\n\u53ef\u4ee5\u4f7f\u7528\u8868\u793a\u4e8c\u5143\u5173\u7cfb\u7684\u4efb\u610f\u6570\u636e\u7ed3\u6784\u6765\u5b58\u50a8\u8f85\u52a9\u7d22\u5f15\u3002\u901a\u5e38\u4f1a\u671f\u671b\u4f7f\u7528\u57fa\u4e8e\u5c5e\u6027 A \u7684\u503c\u7684\u6563\u5217\u8868\u3002\u53ea\u8981\u6563\u5217\u8868\u5143\u7684\u6570\u91cf\u4e0d\u5927\u4e8e\u5c5e\u6027 A \u4e0d\u540c\u503c\u7684\u6570\u91cf\uff0c\u5728\u7ed9\u5b9a\u6240\u9700\u7684 v \u503c\u7684\u60c5\u51b5\u4e0b\uff0c\u5728\u6563\u5217\u8868\u4e2d\u67e5\u627e\u6709\u5e8f\u5bf9(v, p)\u901a\u5e38\u90fd\u53ef\u4ee5\u9884\u671f\u4e0d\u9519\u7684\u6027\u80fd\uff0c\u4e5f\u5c31\u662f\u5e73\u5747 O(n/B)\u7684\u65f6\u95f4\u3002\u8fd9\u91cc\u7684 n \u662f\u6709\u5e8f\u5bf9\u7684\u6570\u91cf\uff0c\u800c B \u662f\u6563\u5217\u8868\u5143\u7684\u6570\u91cf\u3002\\n\\n> \u521b\u5efa\u8f85\u52a9\u7d22\u5f15\u5982\u679c\u5143\u7ec4\u7684\u4e00\u4e2a\u6216\u591a\u4e2a\u7ec4\u5206\u7684\u503c\u5df2\u7ecf\u7ed9\u5b9a\uff0c\u8f85\u52a9\u7d22\u5f15\u7684\u5b58\u5728\u901a\u5e38\u4f1a\u8ba9\u67e5\u627e\u5143\u7ec4\u7684\u5de5\u4f5c\u53d8\u5f97\u66f4\u52a0\u5bb9\u6613\u3002\u8865\u8fc7\u8fd8\u8981\u8003\u8651\uff1a\\n>\\n> 1. \u6240\u521b\u5efa\u7684\u6bcf\u4e2a\u8f85\u52a9\u7d22\u5f15\u90fd\u4f1a\u8ba9\u6211\u4eec\u5728\u5173\u7cfb\u4e2d\u63d2\u5165\u6216\u5220\u9664\u4fe1\u606f\u65f6\u82b1\u8d39\u989d\u5916\u7684\u65f6\u95f4\u3002\\n>    - \u63d2\u5165\u3002\u5982\u679c\u8981\u63d2\u5165\u4e00\u4e2a\u65b0\u5143\u7ec4\uff0c\u5176\u5bf9\u5e94\u5c5e\u6027 A \u7684\u7ec4\u5206\u7684\u503c\u4e3a v\uff0c\u5c31\u5fc5\u987b\u521b\u5efa\u6709\u5e8f\u5bf9(v,p)\uff0c\u5176\u4e2d p \u662f\u6307\u5411\u4e3b\u7ed3\u6784\u4e2d\u65b0\u8bb0\u5f55\u7684\u6307\u9488\u3002\u7136\u540e\uff0c\u518d\u628a\u6709\u5e8f\u5bf9(v,p)\u63d2\u5165\u5230\u8f85\u52a9\u7d22\u5f15\u4e2d\u3002\\n>    - \u5220\u9664\u3002\u8981\u5220\u9664\u5bf9\u5e94 A \u7684\u7ec4\u5206\u7684\u503c\u4e3a v \u7684\u5143\u7ec4\u65f6\uff0c\u9996\u5148\u4e00\u5b9a\u8981\u8bb0\u5f97\u5df2\u7ecf\u5220\u9664\u4e86\u6307\u5411\u8be5\u5143\u7ec4\u7684\u6307\u9488\uff0c\u6bd4\u65b9\u8bf4\u662f p\u3002\u7136\u540e\uff0c\u8981\u6df1\u5165\u8f85\u52a9\u7d22\u5f15\u7ed3\u6784\uff0c\u5e76\u68c0\u67e5\u6240\u6709\u7b2c\u4e00\u4e2a\u7ec4\u5206\u4e3a v \u7684\u6709\u5e8f\u5bf9\uff0c\u76f4\u5230\u4ece\u5176\u4e2d\u627e\u51fa\u7b2c\u4e8c\u4e2a\u7ec4\u5206\u4e3a p \u7684\u6709\u5e8f\u5bf9\u4e3a\u6b62\u3002\u7136\u540e\u5c06\u8be5\u6709\u5e8f\u5bf9\u4ece\u8f85\u52a9\u7d22\u5f15\u7ed3\u6784\u4e2d\u5220\u9664\u3002\\n> 2. \u53ea\u4e3a\u90a3\u4e9b\u53ef\u80fd\u9700\u8981\u67e5\u627e\u6570\u636e\u7684\u5c5e\u6027\u6784\u5efa\u8f85\u52a9\u7d22\u5f15\u3002\\n\\n# \u5173\u7cfb\u95f4\u7684\u5bfc\u822a\\n\\n\u5173\u7cfb\u7684\u5bfc\u822a\u5c31\u662f\u4ece\u4e00\u4e2a\u5173\u7cfb\u8df3\u8f6c\u5230\u53e6\u4e00\u4e2a\u5173\u7cfb\u7684\u64cd\u4f5c\u3002\\n\\n\u7d22\u5f15\u7684\u5efa\u7acb\u4e0d\u4ec5\u4ec5\u5728\u4f7f\u5f97\u5728\u672c\u5173\u7cfb\u4e2d\u7684\u67e5\u8be2\u64cd\u4f5c\u53d8\u5f97\u7b80\u5355\uff0c\u4e5f\u4f7f\u5f97\u5bfc\u822a\u7684\u64cd\u4f5c\u53d8\u5f97\u7b80\u5355\u3002\\n\\n# \u5173\u7cfb\u4ee3\u6570\\n\\n## \u64cd\u4f5c\u6570\\n\\n\u5728\u5173\u7cfb\u4ee3\u6570\u4e2d\uff0c\u6240\u6709\u7684\u64cd\u4f5c\u6570\u90fd\u662f\u5173\u7cfb\uff0c\u53ef\u4ee5\u65f6\u5e38\u91cf\uff0c\u4e5f\u53ef\u4ee5\u662f\u672a\u77e5\u91cf\u3002\u6bcf\u4e2a\u64cd\u4f5c\u6570\u90fd\u6709\u7279\u5b9a\u7684\u6a21\u5f0f\uff08\u5373\u5173\u7cfb\u4e2d\u7684\u5217\u547d\u540d\u7684\u5c5e\u6027\u7684\u96c6\u5408\uff09\u3002\\n\\n## \u96c6\u5408\u8fd0\u7b97\u7b26\\n\\n3 \u79cd\u5e38\u89c1\u7684\u96c6\u5408\u8fd0\u7b97\uff1a\u5e76\u3001\u4ea4\u3001\u5dee\u3002\u4f7f\u7528\u8fd9\u4e9b\u8fd0\u7b97\u7b26\u7684\u64cd\u4f5c\u6570\u7684\u6a21\u5f0f\u4e00\u5b9a\u8981\u76f8\u540c\uff0c\u8fd9\u6837\u7ed3\u679c\u7684\u6a21\u5f0f\u81ea\u7136\u662f\u8fd9\u4e24\u4e2a\u53c2\u6570\u7684\u6a21\u5f0f\u3002\\n\\n## \u9009\u62e9\u8fd0\u7b97\u7b26\\n\\n\u4ece\u5173\u7cfb\u4e2d\u63d0\u53d6\u67d0\u4e9b\u6761\u4ef6\u7684\u5143\u7ec4\uff0c\u53ef\u4ee5\u4f7f\u7528 _\u9009\u62e9_ \u8fd0\u7b97\u7b26\uff0c\u8bb0\u4f5c \u03c3<sub>C</sub>(R)\uff0cC \u662f\u6761\u4ef6\uff0cR \u662f\u5173\u7cfb\u64cd\u4f5c\u6570\u3002\\n\\n\u9009\u62e9\u8fd0\u7b97\u7684\u7ed3\u679c\u662f\u6a21\u5f0f\u4e0e R \u7684\u6a21\u5f0f\u76f8\u540c\u7684\u5173\u7cfb\u3002\u628a\u5728\u5c06\u6761\u4ef6 C \u4e2d\u7684\u5c5e\u6027 A \u66ff\u6362\u4e3a\u5143\u7ec4 t \u5bf9\u5e94\u5217 A \u7684\u7ec4\u5206\u65f6\u4f7f\u5f97\u6761\u4ef6 C \u4e3a\u771f\u7684\u6bcf\u4e2a\u5143\u7ec4 t \u90fd\u653e\u5165\u8be5\u5173\u7cfb\u4e2d\u3002\\n\\n## \u6295\u5f71\u8fd0\u7b97\u7b26\\n\\n\u9009\u62e9\u8fd0\u7b97\u7b26\u4f1a\u751f\u6210\u67d0\u5173\u7cfb\u5220\u9664\u82e5\u5e72\u884c\u4e4b\u540e\u7684\u526f\u672c\uff0c\u4e3a\u4e86\u5f97\u5230\u5173\u7cfb\u5220\u9664\u82e5\u5e72\u5217\uff08\u5c5e\u6027\uff09\u7684\u526f\u672c\uff0c\u53ef\u4ee5\u4f7f\u7528 _\u6295\u5f71_ \u8fd0\u7b97\u7b26\uff0c\u8bb0\u4f5c \u03c0<sub>B<sub>1</sub>,...B<sub>n</sub></sub>(R)\uff0c\u8868\u793a\u5173\u7cfb R \u5728\u5c5e\u6027 B<sub>1</sub>,...B<sub>n</sub>\u4e0a\u7684\u6295\u5f71\u3002\\n\\n\u53d6 R \u4e2d\u7684\u5143\u7ec4 t\uff0c\u63d0\u53d6\u5176\u5c5e\u6027 B<sub>1</sub>,...B<sub>n</sub>\u4e2d\u7684\u7ec4\u5206\uff0c\u53ef\u80fd\u5b58\u5728\u591a\u4e2a\u5143\u7ec4\u5f97\u5230\u76f8\u540c\u7684\u6295\u5f71\uff0c\u6b64\u65f6\uff0c\u53ea\u4f1a\u6709\u4e00\u4e2a\u526f\u672c\u4f1a\u8fdb\u5165\u5230\u4e2d \u03c0<sub>B<sub>1</sub>,...B<sub>n</sub></sub>(R)\u3002\\n\\n## \u5173\u7cfb\u7684\u8054\u63a5\\n\\n\u7528\u6765\u8868\u793a\u4e24\u4e2a\u5173\u7cfb\u88ab\u5173\u8054\u8d77\u6765\uff0c\u4ece\u800c\u53ef\u4ee5\u4ece\u4e00\u4e2a\u5173\u7cfb\u5411\u53e6\u4e00\u4e2a\u5173\u7cfb\u5bfc\u822a\u7684\u6982\u5ff5\u3002\u5047\u8bbe\u6709\u4e24\u4e2a\u5173\u7cfb R \u548c S\uff0c\u5176\u5c5e\u6027\u96c6\u5408\uff08\u6a21\u5f0f\uff0cscheme\uff09\u5206\u522b\u662f{A<sub>1</sub>,...A<sub>m</sub>}\uff0c{B<sub>1</sub>,...B<sub>n</sub>}\u3002\u8981\u4ece\u4e24\u4e2a\u96c6\u5408\u4e2d\u5404\u9009\u51fa\u4e00\u4e9b\u5c5e\u6027\uff0c\u800c\u628a\u8fd9\u4e9b\u5c5e\u6027\u6210\u4e3a\u4ee5 R \u548c S \u4e3a\u53c2\u6570\u7684 _\u8054\u63a5_ \u8fd0\u7b97\u7684\u53c2\u6570\u3002\\n\\n\u5c31\u8981\u4ece R \u4e2d\u53d6\u51fa\u5404\u5143\u7ec4 r\uff0c\u4ece S \u4e2d\u53d6\u51fa\u5404\u5143\u7ec4 s \u52a0\u4ee5\u6bd4\u8f83\u3002\u5982\u679c\u5176\u4e2d\u7684\u5c5e\u6027\u6ee1\u8db3\u8054\u63a5\u8fd0\u7b97\u7684\u6761\u4ef6\uff0c\u90a3\u4e48 r \u548c s \u5c31\u5f62\u6210\u4e86\u4e00\u4e2a\u5143\u7ec4\uff08\u8981\u5254\u9664\u76f8\u540c\u7684\u7ec4\u5206\uff09\u3002\u5982\u679c\u5c5e\u6027\u540d\u76f8\u540c\uff0c\u4f46\u662f\u5c5e\u6027\u610f\u4e49\u4e0d\u76f8\u540c\uff0c\u9700\u8981\u91cd\u547d\u540d\u5176\u4e2d\u67d0\u4e2a\u5c5e\u6027\u3002\\n\\n# \u5173\u7cfb\u4ee3\u6570\u8fd0\u7b97\u7684\u5b9e\u73b0\\n\\n\u4ecb\u7ecd\u4e00\u4e9b\u5e38\u89c1\u800c\u53c8\u76f8\u5bf9\u7b80\u5355\u7684\u5173\u7cfb\u4ee3\u6570\u8fd0\u7b97\u7684\u5b9e\u73b0\u7b56\u7565\u3002\\n\\n## \u4ea4\u3001\u5e76\u3001\u5dee\\n\\n\u53ef\u4ee5\u5148\u6392\u5e8f\uff0c\u540e\u5408\u5e76\uff0c\u518d\u8fdb\u884c\u5e76\u3001\u4ea4\u3001\u5dee\u7684\u8fd0\u7b97\u3002\\n\\n\u5982\u679c\u53c2\u52a0\u8fd0\u7b97\u7684\u4e24\u4e2a\u5173\u7cfb R \u4e0e S \u5404\u542b n \u4e2a\u5143\u7ec4\uff0c\u5c31\u8981\u82b1 O(n log n)\u7684\u65f6\u95f4\u4e3a\u5176\u6392\u5e8f\u5e76\u7528 O(n)\u7684\u65f6\u95f4\u5408\u5e76\uff0c\u603b\u5171\u9700\u8981\u7684\u65f6\u95f4\u4e3a O(n log n)\u3002\\n\\n\u8fd8\u6709\u522b\u7684\u65b9\u5f0f\u3002\\n\\n1. \u9996\u5148\u4e0d\u53bb\u8003\u8651\u4e3a\u540c\u65f6\u51fa\u73b0\u5728 R \u548c S \u4e2d\u7684\u5143\u7ec4\u6d88\u9664\u91cd\u590d\u526f\u672c\u7684\u4e8b\u60c5\uff0c\u91cd\u590d\u7684\u5143\u7ec4\u53ef\u80fd\u6027\u6bd4\u8f83\u5c0f\u800c\u4e14\u4e5f\u8bb8\u91cd\u590d\u4e0d\u662f\u4e2a\u95ee\u9898\u3002\u6216\u8005\u5728\u540e\u7eed\u7684\u9636\u6bb5\u4e2d\u6d88\u9664\u91cd\u590d\u4f1a\u66f4\u52a0\u65b9\u4fbf\u3002\\n\\n1. \u4f7f\u7528\u7d22\u5f15\u3002\u4f8b\u5982 R \u5177\u6709\u5c5e\u6027 A \u4e0a\u7684\u7d22\u5f15\uff0c\u800c\u8be5\u5c5e\u6027\u65f6 S \u7684\u952e\u3002\u90a3\u4e48\u8981\u53d6\u4e8c\u8005\u7684\u5e76\u96c6 R \u222a S\uff0c\u53ef\u4ee5\u9996\u5148\u4ece S \u7684\u5143\u7ec4\u5f00\u59cb\uff0c\u5e76\u4f9d\u6b21\u68c0\u67e5 R \u7684\u6bcf\u4e2a\u5143\u7ec4 t\u3002\u4f1a\u5728\u7ec4\u5206 A \u4e2d\u627e\u5230 t \u7684\u503c\uff0c\u5e76\u4f7f\u7528\u8be5\u7d22\u5f15\u67e5\u627e S \u4e2d A \u7ec4\u5206\u7684\u503c\u76f8\u540c\u7684\u5143\u7ec4\u3002\u5982\u679c S \u4e2d\u7684\u8fd9\u4e00\u5143\u7ec4\u4e0e t \u76f8\u540c\uff0c\u5c31\u4e0d\u8981\u518d\u5c06 t \u7b2c\u4e8c\u6b21\u653e\u5165\u8be5\u5e76\u96c6\u4e2d\uff0c\u76f8\u53cd\u7684\uff0c\u5982\u679c S \u4e2d\u4e0d\u5b58\u5728\u952e\u7684\u503c\u4e0e t \u4e2d\u7ec4\u5206 A \u76f8\u540c\u7684\u5143\u7ec4\uff0c\u6216\u8005\u952e\u503c\u76f8\u540c\u4f46\u662f\u5143\u7ec4\u4e0d\u76f8\u540c\uff0c\u5219\u5c31\u8981\u5c06 t \u653e\u5165\u5e76\u96c6\u4e2d\u3002\\n\\n## \u6295\u5f71\u8fd0\u7b97\u7684\u5b9e\u73b0\\n\\n\u539f\u5219\u4e0a\u8bb2\uff0c\u5728\u6267\u884c\u6295\u5f71\u8fd0\u7b97\u65f6\uff0c\u53ea\u80fd\u68c0\u9a8c\u5b8c\u6bcf\u4e2a\u5143\u7ec4\uff0c\u5e76\u7565\u53bb\u90a3\u4e9b\u4e0e\u672a\u51fa\u73b0\u5728\u6295\u5f71\u5217\u8868\u4e2d\u7684\u5c5e\u6027\u5bf9\u5e94\u7684\u7ec4\u5206\u3002\u7d22\u5f15\u662f\u4e00\u70b9\u5fd9\u90fd\u5e2e\u4e0d\u4e0a\u7684\u3002\u6b64\u5916\uff0c\u5728\u8ba1\u7b97\u4e86\u5404\u5143\u7ec4\u7684\u6295\u5f71\u540e\uff0c\u53ef\u80fd\u53d1\u73b0\u4f1a\u7559\u4e0b\u5f88\u591a\u91cd\u590d\u7684\u5143\u7ec4\u3002\u4e8e\u662f\u5fc5\u987b\u8981\u6d88\u9664\u91cd\u590d\uff01\u6d88\u9664\u91cd\u590d\u6709\u4e24\u79cd\uff1a\\n\\n- \u5c06\u7ed3\u679c\u5173\u7cfb\u8fdb\u884c\u6392\u5e8f\uff0c\u6b21\u5e8f\u4e0a\u4e0e\u524d\u4e00\u4e2a\u5143\u7ec4\u76f8\u540c\u7684\u5143\u7ec4\u90fd\u8981\u88ab\u5220\u9664\\n- \u7528\u96c6\u5408\uff08\u6bd4\u5982\u6563\u5217\u8868\uff09\u53bb\u5b58\u50a8\u7ed3\u679c\u5173\u7cfb\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u907f\u514d\u63d2\u5165\u91cd\u590d\u5143\u7ec4\u3002\\n\\n\u5982\u679c\u5173\u7cfb R \u4e2d\u6709 n \u4e2a\u5143\u7ec4\uff0c\u90a3\u4e48\u8981\u6d88\u9664\u91cd\u590d\u524d\u4e3a\u5173\u7cfb S \u6392\u5e8f\u6240\u9700\u7684\u65f6\u95f4\u4e3a O(n log n)\u3002\u4f7f\u7528\u6563\u5217\u8868\u5219\u6574\u4e2a\u6295\u5f71\u8fd0\u7b97\u5e73\u5747\u8981\u82b1 O(n)\u7684\u65f6\u95f4\uff0c\u6563\u5217\u7565\u4f18\u4e8e\u6392\u5e8f\u3002\\n\\n## \u9009\u62e9\u8fd0\u7b97\u7684\u5b9e\u73b0\\n\\n\u5f53\u5173\u7cfb R \u6ca1\u6709\u4f7f\u7528\u7d22\u5f15\u65f6\uff0c\u5219\u5fc5\u987b\u8981\u68c0\u67e5 R \u4e2d\u6240\u6709\u5143\u7ec4\uff0c\u624d\u80fd\u5f97\u5230\u7ed3\u679c\u5173\u7cfb S\u3002\\n\\n\u5f53 R \u4e2d\u4f7f\u7528\u4e86\u7d22\u5f15\uff0c\u5219\u53ef\u4ee5\u5229\u7528\u7d22\u5f15\u6765\u76f4\u63a5\u627e\u5230\u6ee1\u8db3\u6761\u4ef6 C \u7684\u5143\u7ec4\uff0c\u4f1a\u8282\u7701\u5f88\u591a\u65f6\u95f4\u3002\\n\\n\u5f53\u6761\u4ef6\u4e2d\u540c\u65f6\u4f7f\u7528\u4e86\u7d22\u5f15\u548c\u975e\u7d22\u5f15\uff0c\u53ef\u4ee5\u5148\u5229\u7528\u6267\u884c\u7d22\u5f15\u6761\u4ef6\uff0c\u5f97\u5230\u521d\u7b5b\uff0c\u7136\u540e\u5bf9\u521d\u7b5b\u8fdb\u884c\u904d\u5386\uff0c\u4ee5\u5f97\u5230\u6ee1\u8db3\u5269\u4f59\u6761\u4ef6\u7684\u5143\u7ec4\u3002\\n\\n## \u8054\u63a5\u7684\u5b9e\u73b0\\n\\n\u5047\u8bbe\u60f3\u8981\u5bf9\u6a21\u5f0f\u4e3a{A,B}\u7684\u5173\u7cfb R \u548c\u6a21\u5f0f\u4e3a{B,C}\u7684\u5173\u7cfb S \u8fdb\u884c\u81ea\u7136\u8054\u63a5\uff0c\u5e76\u5047\u8bbe\u8be5\u8054\u63a5\u65f6\u4e24\u4e2a\u5173\u7cfb\u7684 B \u5c5e\u6027\u4e4b\u95f4\u5b58\u5728\u76f8\u7b49\u5173\u7cfb\u7684\u81ea\u7136\u8054\u63a5\u3002\\n\\n\u76f4\u89c2\u800c\u53c8\u7f13\u6162\u7684\u65b9\u5f0f\u5c31\u662f\u66b4\u529b\u5730\u5206\u522b\u904d\u5386\u4e24\u4e2a\u5173\u7cfb\uff0c\u79f0\u4f5c _\u5d4c\u5957\u5faa\u73af\u8054\u63a5_ \uff0c\u5bfb\u627e\u5176\u4e2d B \u5c5e\u6027\u76f8\u540c\u7684\u5143\u7ec4\u3002\\n\\n\u4e00\u79cd\u9ad8\u6548\u7684\u8054\u63a5\u65b9\u5f0f\u662f\u4f7f\u7528\u7d22\u5f15\u3002\u5047\u8bbe S \u6709\u5c5e\u6027 B \u4e0a\u7684\u7d22\u5f15\uff0c\u5219\u53ef\u4ee5\u5148\u904d\u5386 R \u7684\u5404\u5143\u7ec4\uff0c\u5e76\u5728 S \u7684\u7d22\u5f15\u4e2d\u67e5\u627e\u5339\u914d\u7684\u5143\u7ec4\u3002\u8fdb\u4e00\u6b65\u7684\uff0cS \u548c R \u5728\u5c5e\u6027 B \u4e0a\u90fd\u6709\u7d22\u5f15\uff0c\u5219\u53ef\u4ee5\u4efb\u9009\u5176\u4e00\u6765\u7528\u3002\\n\\n\u5982\u679c\u4e24\u8005\u5728\u5c5e\u6027 B \u4e0a\u4e0d\u5b58\u5728\u7d22\u5f15\uff0c\u5229\u7528 _\u6392\u5e8f\u8054\u63a5_ \u8fd8\u662f\u80fd\u6bd4 _\u5d4c\u5957\u5faa\u73af\u8054\u63a5_ \u505a\u7684\u66f4\u597d\u3002\u5148\u5c06 R \u548c S \u7684\u5143\u7ec4\u5408\u5e76\u5728\u4e00\u8d77\uff0c\u91cd\u65b0\u7ec4\u5408\u65f6\uff0cB \u7956\u575f\u6210\u4e3a\u6240\u6709\u5143\u7ec4\u7684\u7b2c\u4e00\u4e2a\u7ec4\u5206\uff0c\u5e76\u52a0\u4e0a\u989d\u5916\u7684\u7ec4\u5206\u6765\u533a\u5206\u5408\u5e76\u540e\u7684\u5143\u7ec4\u65f6\u6765\u81ea\u4e8e R \u8fd8\u662f S\u3002\u5408\u5e76\u5b8c\u6210\u540e\u6839\u636e B \u7ec4\u5206\u8fdb\u884c\u6392\u5e8f\uff0c\u518d\u6cbf\u7740\u6392\u5e8f\u8868\u5411\u4e0b\u904d\u5386\uff0c\u5bfb\u627e\u5177\u6709\u76f8\u540c B \u7ec4\u5206\u7684\u6765\u81ea R \u548c S \u7684\u7ec4\u5206\u8fdb\u884c\u8054\u63a5\uff0c\u751f\u6210\u8054\u63a5\u540e\u5173\u7cfb\u4e2d\u5143\u7ec4\u6240\u82b1\u65f6\u95f4\u65f6\u4e0e\u751f\u6210\u5143\u7ec4\u6570\u6210\u6bd4\u4f8b\u7684\u3002\\n\\n# \u5173\u7cfb\u7684\u4ee3\u6570\u6cd5\u5219\\n\\n\u5bf9\u8868\u8fbe\u5f0f\u8fdb\u884c\u7b49\u4ef7\u53d8\u5f62\uff0c\u53ef\u4ee5\u4f18\u5316\u8868\u8fbe\u5f0f\uff0c\u5373\u4f18\u5316\u67e5\u8be2\u8fc7\u7a0b\u3002\\n\\n\u56e0\u4e3a\u4e00\u822c\u800c\u8a00\u5f53\u8fd0\u7b97\u5e94\u7528\u5230\u8f83\u5c0f\u7684\u5173\u7cfb\u4e0a\u65f6\u6240\u82b1\u7684\u65f6\u95f4\u8f83\u5c11\uff0c\u6240\u4ee5\u5c3d\u53ef\u80fd\u65e9\u5730\u5e94\u7528\u9009\u62e9\u8fd0\u7b97\u662f\u6781\u4e3a\u6709\u5229\u7684\u3002\u4ece\u4ee3\u6570\u7684\u89d2\u5ea6\u6765\u770b\uff0c\u5982\u679c\u60f3\u65e9\u70b9\u5e94\u7528\u9009\u62e9\u8fd0\u7b97\uff0c\u53ef\u4ee5\u4f7f\u7528\u4ee3\u6570\u6cd5\u5219\u8ba9\u9009\u62e9\u8fd0\u7b97\u7b26\u6cbf\u7740\u8868\u8fbe\u5f0f\u6811\u5411\u4e0b\u4f20\u9012\uff0c\u8fdb\u884c\u4e0b\u538b\u64cd\u4f5c\u3002\\n\\n\u81f3\u4e8e\u6d89\u53ca\u6295\u5f71\u64cd\u4f5c\uff0c\u6295\u5f71\u4e0d\u80fd\u50cf\u9009\u62e9\u64cd\u4f5c\u4e00\u6837\u53ef\u4ee5\u88ab\u538b\u5012\u5e76\u3001\u5dee\u3001\u4ea4\u4e4b\u4e0b\uff0c\u6295\u5f71\u53ea\u80fd\u538b\u5230\u5e76\u96c6\u4e4b\u4e0b\u3002\\n\\n> \u6458\u6284\u81ea\u300a\u8ba1\u7b97\u673a\u79d1\u5b66\u57fa\u7840\u300b\uff0c\u5bf9\u6570\u636e\u5e93\u7684\u63cf\u8ff0\u5e76\u4e0d\u8be6\u5c3d\uff0c\u6bd4\u5982 SQL \u8bed\u53e5\u5c31\u6ca1\u6709\u4ecb\u7ecd\uff0c\u56e0\u6b64\u66f4\u591a\u5185\u5bb9\u53ef\u53c2\u89c1\u300a\u6570\u636e\u5e93\u7cfb\u7edf\u57fa\u7840\u6559\u7a0b\u300bJeffrey D. Ullman, Jennifer Widom \u7684\u7248\u672c\u3002"},{"id":"/2017/03/07/hello-world","metadata":{"permalink":"/blog/2017/03/07/hello-world","source":"@site/blog/2017-03-07-hello-world.md","title":"Hello World","description":"Some greener, who could only built static websites, found a job as a frontend programmer.","date":"2017-03-07T00:00:00.000Z","formattedDate":"March 7, 2017","tags":[],"readingTime":0.09,"hasTruncateMarker":false,"authors":[],"frontMatter":{"title":"Hello World","categories":["chatty"]},"prevItem":{"title":"\u4ece\u96c6\u5408\u7684\u89d2\u5ea6\u7406\u89e3\u6570\u636e\u5e93","permalink":"/blog/2017/11/07/database-basic-concepts"}},"content":"Some greener, who could only built [static websites](https://akatquas.github.io/dateless/), found a job as a frontend programmer.\\n\\nStay tuned, bye."}]}')}}]);