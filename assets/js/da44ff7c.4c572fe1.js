"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[2895],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>k});var a=n(67294);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,a,l=function(e,t){if(null==e)return{};var n,a,l={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var o=a.createContext({}),m=function(e){var t=a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},s=function(e){var t=m(e.components);return a.createElement(o.Provider,{value:t},e.children)},d="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,l=e.mdxType,r=e.originalType,o=e.parentName,s=p(e,["components","mdxType","originalType","parentName"]),d=m(n),u=l,k=d["".concat(o,".").concat(u)]||d[u]||c[u]||r;return n?a.createElement(k,i(i({ref:t},s),{},{components:n})):a.createElement(k,i({ref:t},s))}));function k(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var r=n.length,i=new Array(r);i[0]=u;var p={};for(var o in t)hasOwnProperty.call(t,o)&&(p[o]=t[o]);p.originalType=e,p[d]="string"==typeof e?e:l,i[1]=p;for(var m=2;m<r;m++)i[m]=n[m];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},69661:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>i,default:()=>d,frontMatter:()=>r,metadata:()=>p,toc:()=>m});var a=n(87462),l=(n(67294),n(3905));const r={title:"Quick learning on Shells",categories:["command line"],tags:["shell"]},i=void 0,p={permalink:"/blog/2020/12/25/shells",source:"@site/blog/2020-12-25-shells.md",title:"Quick learning on Shells",description:"Shell scripts examples",date:"2020-12-25T00:00:00.000Z",formattedDate:"December 25, 2020",tags:[{label:"shell",permalink:"/blog/tags/shell"}],readingTime:3.09,hasTruncateMarker:!0,authors:[],frontMatter:{title:"Quick learning on Shells",categories:["command line"],tags:["shell"]},prevItem:{title:"Runtime Performance",permalink:"/blog/2021/01/22/runtime-performance"},nextItem:{title:"Wander in webpack",permalink:"/blog/2020/12/06/wander-in-webpack"}},o={authorsImageUrls:[]},m=[{value:"Shell scripts examples",id:"shell-scripts-examples",level:2},{value:"How does shell execute commands",id:"how-does-shell-execute-commands",level:2},{value:"Learning materials",id:"learning-materials",level:2},{value:"Makefile",id:"makefile",level:2}],s={toc:m};function d(e){let{components:t,...n}=e;return(0,l.kt)("wrapper",(0,a.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h2",{id:"shell-scripts-examples"},"Shell scripts examples"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("a",{parentName:"p",href:"https://github.com/AkatQuas/kiddo-plays/tree/master/shells/select-job-from-procfile"},"select job from Procfile"),": Using scripts to select some job listed in Procfile.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("a",{parentName:"p",href:"https://github.com/AkatQuas/kiddo-plays/blob/master/shells/parsing-arguments.sh"},"parsing arguments from command line"),".")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("a",{parentName:"p",href:"https://github.com/AkatQuas/kiddo-plays/blob/master/shells/secure-shell-template.sh"},"secure shell template"),": Using this template to write your shell scripts."))),(0,l.kt)("h2",{id:"how-does-shell-execute-commands"},"How does shell execute commands"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"TLDR"),": When running an external command, the shell has to create a separate process to run that command, and wait for it to exit. When running a built-in command, there is no need to create a new thread of execution: the command is executed inside the main thread."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"detailed"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://tldp.org/LDP/Bash-Beginners-Guide/html/sect_01_03.html"},"Excuting Commands")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"http://uw714doc.xinuos.com/en/SHL_custom/How_shell_executes_cmds.html"},"how shell executes commands")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://unix.stackexchange.com/a/79920"},"What happens when a built-in command is running"),".")),(0,l.kt)("h2",{id:"learning-materials"},"Learning materials"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("a",{parentName:"p",href:"https://github.com/koalaman/shellcheck"},"Shell checks"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("a",{parentName:"p",href:"https://wangdoc.com/bash/intro.html"},"Shell quick tutorials (Simplified Chinese)"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("a",{parentName:"p",href:"https://github.com/huyubing/books-pdf/blob/master/Shell%E8%84%9A%E6%9C%AC%E5%AD%A6%E4%B9%A0%E6%8C%87%E5%8D%97.pdf"},"Shell \u811a\u672c\u5b66\u4e60\u6307\u5357.pdf (Simplified Chinese)"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("a",{parentName:"p",href:"https://www.explainshell.com/"},"Explain shell"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("a",{parentName:"p",href:"https://github.com/tldr-pages/tldr"},"tldr manpage for command"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("a",{parentName:"p",href:"https://tldp.org/LDP/abs/html/index.html"},"Advanced Bash-Scripting Guide"),": An in-depth exploration of the art of shell scripting.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("a",{parentName:"p",href:"https://missing.csail.mit.edu/2020/shell-tools/"},"Shell basic 101")),(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"sed"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"awk"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"grep"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"printf"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"head"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"tail"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"sort"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"less"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"more"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"cut"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"tr"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"wc"),"."),(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"bg"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"fg"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"jobs"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"kill"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"command"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"read"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"times"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"sleep"),"."),(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"gzip"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"tar"),"."),(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"mktemp"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"find"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"locate"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"dirname"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"basename"),"."),(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"ps"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"top"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"crontab"),"."),(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"kill")," ( ",(0,l.kt)("inlineCode",{parentName:"p"},"ABRT"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"HUP"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"KILL"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"TERM")," ), ",(0,l.kt)("inlineCode",{parentName:"p"},"trap"),"."),(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"set"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"unset"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"shopt"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"getopts"),"."),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Expansion"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"echo ~\necho $HOME\n\necho ~+\necho $PWD\n\necho ~-\necho $OLDPWD\n")),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"# $varname exist and not null, using $varname\n# #varname undefined, using `word`\n${varname:-word}\n")),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"# $varname exist and not null, using $varname\n# #varname undefined, using `word`\n${varname:=word}\n")),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"# $varname exist and not null, using $varname\n# #varname undefined, script exit with error message `message`\n${varname:?message}\n"))),(0,l.kt)("blockquote",{parentName:"li"},(0,l.kt)("p",{parentName:"blockquote"},(0,l.kt)("em",{parentName:"p"},"How should you organize your dotfiles?")," They should be in their own folder, under version control, and symlinked into place using a script.")),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Some special variables to refer to arguments, error codes, and other relevant variables"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"$0")," - Name of the script"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"$1")," to ",(0,l.kt)("inlineCode",{parentName:"li"},"$9")," - Arguments to the script. ",(0,l.kt)("inlineCode",{parentName:"li"},"$1")," is the first argument and so on."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"$@")," - All the arguments"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"$#")," - Number of arguments"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"$?")," - Return code of the previous command"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"$$")," - Process identification number (PID) for the current script"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"!!")," - Entire last command, including arguments. A common pattern is to execute a command only for it to fail due to missing permissions; you can quickly re-execute the command with sudo by doing ",(0,l.kt)("inlineCode",{parentName:"li"},"sudo !!")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"$_")," - Last argument from the last command. If you are in an interactive shell, you can also quickly get this value by typing ",(0,l.kt)("inlineCode",{parentName:"li"},"Esc")," followed by ."))),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Expanding expressions techniques "),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Wildcards - Whenever you want to perform some sort of wildcard matching, you can use ",(0,l.kt)("inlineCode",{parentName:"p"},"?")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"*")," to match one or any amount of characters respectively. For instance, given files ",(0,l.kt)("inlineCode",{parentName:"p"},"foo"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"foo1"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"foo2"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"foo10")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"bar"),", the command rm ",(0,l.kt)("inlineCode",{parentName:"p"},"foo?")," will delete ",(0,l.kt)("inlineCode",{parentName:"p"},"foo1")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"foo2")," whereas rm ",(0,l.kt)("inlineCode",{parentName:"p"},"foo*")," will delete all but ",(0,l.kt)("inlineCode",{parentName:"p"},"bar"),".")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Curly braces ",(0,l.kt)("inlineCode",{parentName:"p"},"{}")," - Whenever you have a common substring in a series of commands, you can use curly braces for bash to expand this automatically. This comes in very handy when moving or converting files."),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"touch index.{html,css,js}\n"))))),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Batch manipulation on files using globbing"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"# Find all python files that have a folder named test in their path\nfind . -path '*/test/*.py' -type f\n\n# Delete all files with .tmp extension\nfind . -name '*.tmp' -exec rm {} \\;\n\n# Find all conf files and back up them\nfind . -name '*.conf' -exec convert {} {}.bak \\;\n"))))),(0,l.kt)("h2",{id:"makefile"},"Makefile"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/AkatQuas/kiddo-plays/tree/master/shells/makefiles"},"Makefiles"),": Several Makefile templates."),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/huyubing/books-pdf/blob/master/%E8%B7%9F%E6%88%91%E4%B8%80%E8%B5%B7%E5%86%99makefile.pdf"},"\u8ddf\u6211\u4e00\u8d77\u5199 makefile.pdf"),": A book for beginners."),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/huyubing/books-pdf/blob/master/automake.pdf"},"GNU Automake"),"."),(0,l.kt)("hr",null),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/AkatQuas/kiddo-plays/tree/master/shells"},"Demo Project on GitHub")))}d.isMDXComponent=!0}}]);