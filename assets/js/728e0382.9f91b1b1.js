"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[6326],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>d});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},m="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),m=p(n),u=a,d=m["".concat(s,".").concat(u)]||m[u]||h[u]||o;return n?r.createElement(d,l(l({ref:t},c),{},{components:n})):r.createElement(d,l({ref:t},c))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,l=new Array(o);l[0]=u;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[m]="string"==typeof e?e:a,l[1]=i;for(var p=2;p<o;p++)l[p]=n[p];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},31019:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>m,frontMatter:()=>o,metadata:()=>i,toc:()=>p});var r=n(87462),a=(n(67294),n(3905));const o={title:"Markdown Press",categories:["frontend"],tags:["html","markdown"]},l=void 0,i={permalink:"/blog/2019/08/15/mdpress",source:"@site/blog/2019-08-15-mdpress.md",title:"Markdown Press",description:"A plain boilerplate project to generate static websites from markdown files.",date:"2019-08-15T00:00:00.000Z",formattedDate:"August 15, 2019",tags:[{label:"html",permalink:"/blog/tags/html"},{label:"markdown",permalink:"/blog/tags/markdown"}],readingTime:1.305,hasTruncateMarker:!0,authors:[],frontMatter:{title:"Markdown Press",categories:["frontend"],tags:["html","markdown"]},prevItem:{title:"\u7981\u6b62 body \u5143\u7d20\u5728\u6d6e\u5c42\u4e0b\u6eda\u52a8",permalink:"/blog/2019/08/17/mute-body-element-when-popup-shows"},nextItem:{title:"Lite store with Hooks",permalink:"/blog/2019/07/15/lite-store-with-hooks"}},s={authorsImageUrls:[]},p=[{value:"How it works",id:"how-it-works",level:2}],c={toc:p};function m(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"A plain boilerplate project to generate static websites from markdown files."),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"This project provides a naive way to generate static html files from markdown files, the robustness is still questionable. You'd better use some framework such as ",(0,a.kt)("a",{parentName:"p",href:"https://hexo.io/"},"hexo"),", ",(0,a.kt)("a",{parentName:"p",href:"https://gohugo.io/"},"hugo"),", ",(0,a.kt)("a",{parentName:"p",href:"https://jekyllrb.com/"},"jekyll"),", etc.")),(0,a.kt)("h2",{id:"how-it-works"},"How it works"),(0,a.kt)("p",null,"There is a property ",(0,a.kt)("inlineCode",{parentName:"p"},"templateParameters")," in ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/jantimon/html-webpack-plugin"},"html-webpack-plugin"),", which helps to inject some ",(0,a.kt)("inlineCode",{parentName:"p"},"string")," values into the template file."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"// html-webpack-plugin\n\nconst htmlPlugins = new HtmlWebpackPlugin({\n  template: 'path/to/template.html',\n  templateParameters: {\n    title: 'new title',\n    content: 'new content',\n    footer: '<footer>this is an html footer</footer>',\n  },\n});\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-html"},'\x3c!-- template --\x3e\n<!DOCTYPE html>\n<html lang="en">\n  <head>\n    <meta charset="UTF-8" />\n    <meta name="viewport" content="width=device-width, initial-scale=1.0" />\n    <meta http-equiv="X-UA-Compatible" content="ie=edge" />\n    <title><%= title%></title>\n  </head>\n\n  <body>\n    <section class="content"><%= content %></section>\n    <section class="footer"><%= footer %></section>\n  </body>\n</html>\n\n\x3c!-- output --\x3e\n<!DOCTYPE html>\n<html lang="en">\n  <head>\n    <meta charset="UTF-8" />\n    <meta name="viewport" content="width=device-width, initial-scale=1.0" />\n    <meta http-equiv="X-UA-Compatible" content="ie=edge" />\n    <title>new title</title>\n  </head>\n\n  <body>\n    <section class="content">new content</section>\n    <section class="footer">\n      <footer>this is an html footer</footer>\n    </section>\n  </body>\n</html>\n')),(0,a.kt)("p",null,"This helps to generate output html files dynamically."),(0,a.kt)("p",null,"I choose ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/markedjs/marked"},"marked")," for parsing markdown files, which return a string. Perfect, isn't it?"),(0,a.kt)("p",null,"Although the original ",(0,a.kt)("inlineCode",{parentName:"p"},"markedjs")," is powerful enough to handle most usage cases, it doesn't support:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"image size configuration, such as ",(0,a.kt)("inlineCode",{parentName:"p"},'![](src/to/image "100x200")')," or ",(0,a.kt)("inlineCode",{parentName:"p"},'![](src/to/image "width=100px hegiht=200px")'),".")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"baseUrl")," applied on raw html tags, such as ",(0,a.kt)("inlineCode",{parentName:"p"},'<img src="path/to/image.png">'),"."))),(0,a.kt)("p",null,"I tweak a little to the original project, ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/AkatQuas/marked#forked-changes"},"here are the changes"),", which is the markdown parser used in this project. You can choose either one as long as that meets your requirement."),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://github.com/AkatQuas/mdpress"},"The complete repository")))}m.isMDXComponent=!0}}]);