"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[7781],{3905:(t,e,n)=>{n.d(e,{Zo:()=>u,kt:()=>m});var a=n(67294);function r(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function o(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,a)}return n}function s(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?o(Object(n),!0).forEach((function(e){r(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function i(t,e){if(null==t)return{};var n,a,r=function(t,e){if(null==t)return{};var n,a,r={},o=Object.keys(t);for(a=0;a<o.length;a++)n=o[a],e.indexOf(n)>=0||(r[n]=t[n]);return r}(t,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);for(a=0;a<o.length;a++)n=o[a],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(r[n]=t[n])}return r}var c=a.createContext({}),l=function(t){var e=a.useContext(c),n=e;return t&&(n="function"==typeof t?t(e):s(s({},e),t)),n},u=function(t){var e=l(t.components);return a.createElement(c.Provider,{value:e},t.children)},p="mdxType",d={inlineCode:"code",wrapper:function(t){var e=t.children;return a.createElement(a.Fragment,{},e)}},y=a.forwardRef((function(t,e){var n=t.components,r=t.mdxType,o=t.originalType,c=t.parentName,u=i(t,["components","mdxType","originalType","parentName"]),p=l(n),y=r,m=p["".concat(c,".").concat(y)]||p[y]||d[y]||o;return n?a.createElement(m,s(s({ref:e},u),{},{components:n})):a.createElement(m,s({ref:e},u))}));function m(t,e){var n=arguments,r=e&&e.mdxType;if("string"==typeof t||r){var o=n.length,s=new Array(o);s[0]=y;var i={};for(var c in e)hasOwnProperty.call(e,c)&&(i[c]=e[c]);i.originalType=t,i[p]="string"==typeof t?t:r,s[1]=i;for(var l=2;l<o;l++)s[l]=n[l];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}y.displayName="MDXCreateElement"},54429:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>c,contentTitle:()=>s,default:()=>p,frontMatter:()=>o,metadata:()=>i,toc:()=>l});var a=n(87462),r=(n(67294),n(3905));const o={title:"Class Asynchronous Initialization",tags:["javascript"]},s=void 0,i={permalink:"/blog/2021/07/13/initialize-class-asynchronously",source:"@site/blog/2021-07-13-initialize-class-asynchronously.md",title:"Class Asynchronous Initialization",description:"Sometimes, the instance of Class is not completely initialized yet when we first see it, because its property is initialized asynchronously.",date:"2021-07-13T00:00:00.000Z",formattedDate:"July 13, 2021",tags:[{label:"javascript",permalink:"/blog/tags/javascript"}],readingTime:1.955,hasTruncateMarker:!0,authors:[],frontMatter:{title:"Class Asynchronous Initialization",tags:["javascript"]},prevItem:{title:"Fun with Chrome Devtools Protocol",permalink:"/blog/2021/08/18/chrome-devtools-protocol"},nextItem:{title:"Test-Driven Development in FrontEnd",permalink:"/blog/2021/05/06/tdd-in-frontend"}},c={authorsImageUrls:[]},l=[{value:"promise-based constructor",id:"promise-based-constructor",level:2},{value:"static factory method",id:"static-factory-method",level:2},{value:"factory function",id:"factory-function",level:2},{value:"private constructor via secret token",id:"private-constructor-via-secret-token",level:2}],u={toc:l};function p(t){let{components:e,...n}=t;return(0,r.kt)("wrapper",(0,a.Z)({},u,n,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Sometimes, the instance of Class is not completely initialized yet when we first see it, because its property is initialized asynchronously."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"class A {\n  data: string;\n  constructor() {\n    // asynchronous data\n    Promise.resolve('data').then(d => void this.data = d);\n  }\n}\n\nconst a = new A();\nassert.equal(a.data, undefined);\nsetTimeout(() => {\n  assert.equal(a.data, 'data');\n}, 0)\n")),(0,r.kt)("p",null,"Here are some simple solutions."),(0,r.kt)("h2",{id:"promise-based-constructor"},"promise-based constructor"),(0,r.kt)("p",null,"We delay access to the instance of Class until it is fully initialized by returning a Promise from the constructor."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"class A {\n  data: string;\n  constructor() {\n    // asynchronous data\n    return Promise.resolve('data').then((d) => {\n      this.data = d;\n      return this;\n    });\n  }\n}\n\nnew A().then((a) => {\n  assert.equal(a.data, 'data');\n});\n")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"It's kind of surprising to have a constructor return a Promise instead of an instance.")),(0,r.kt)("h2",{id:"static-factory-method"},"static factory method"),(0,r.kt)("p",null,"A static factory method of a Class creates instances and is an alternative to using ",(0,r.kt)("inlineCode",{parentName:"p"},"new Class()"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"class A {\n  data: string;\n  constructor(d: string) {\n    this.data = d;\n  }\n  static async create() {\n    // asynchronous data\n    const data = await Promise.resolve('data');\n    return new this(data);\n  }\n}\n\nA.create().then((a) => {\n  assert.equal(a.data, 'data');\n});\n")),(0,r.kt)("h2",{id:"factory-function"},"factory function"),(0,r.kt)("p",null,"Stand-alone functions as factories are occasionally useful."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"class A {\n  data: string;\n  constructor(d: string) {\n    this.data = d;\n  }\n}\n\nasync function createA() {\n  // asynchronous data\n  const data = await Promise.resolve('data');\n  return new A(data);\n}\n\ncreateA().then((a) => {\n  assert.equal(a.data, 'data');\n});\n")),(0,r.kt)("h2",{id:"private-constructor-via-secret-token"},"private constructor via secret token"),(0,r.kt)("p",null,"If we want to ensure that instances are always correctly set up, we must ensure that only the static factory can invoke the constructor of Class. We can achieve that via a secret token:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"// module variable, closured\nconst aToken = Symbol('aToken');\n\nclass A {\n  data: string;\n  constructor(token: Symbol, d: string) {\n    if (token !== aToken) {\n      throw new Error('Constructor is private');\n    }\n    this.data = d;\n  }\n  static async create() {\n    // asynchronous data\n    const data = await Promise.resolve('data');\n    return new this(aToken, data);\n  }\n}\n\nA.create().then((a) => {\n  assert.equal(a.data, 'data');\n});\n")),(0,r.kt)("p",null,"There's a variant way to achieve the same purpose."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"class A {\n  data: string;\n  constructor() {\n    throw new Error('Constructor is private');\n  }\n  private _init(d: string) {\n    this.data = d;\n    return this;\n  }\n  static async create() {\n    // asynchronous data\n    const data = await Promise.resolve('data');\n    return Object.create(this.prototype)._init(data);\n  }\n}\n\nA.create().then((a) => {\n  assert.equal(a.data, 'data');\n});\n")))}p.isMDXComponent=!0}}]);