"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[5584],{3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>d});var a=r(67294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function l(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?l(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):l(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function p(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},l=Object.keys(e);for(a=0;a<l.length;a++)r=l[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)r=l[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var i=a.createContext({}),s=function(e){var t=a.useContext(i),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},c=function(e){var t=s(e.components);return a.createElement(i.Provider,{value:t},e.children)},m="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,l=e.originalType,i=e.parentName,c=p(e,["components","mdxType","originalType","parentName"]),m=s(r),u=n,d=m["".concat(i,".").concat(u)]||m[u]||h[u]||l;return r?a.createElement(d,o(o({ref:t},c),{},{components:r})):a.createElement(d,o({ref:t},c))}));function d(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var l=r.length,o=new Array(l);o[0]=u;var p={};for(var i in t)hasOwnProperty.call(t,i)&&(p[i]=t[i]);p.originalType=e,p[m]="string"==typeof e?e:n,o[1]=p;for(var s=2;s<l;s++)o[s]=r[s];return a.createElement.apply(null,o)}return a.createElement.apply(null,r)}u.displayName="MDXCreateElement"},97637:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>i,contentTitle:()=>o,default:()=>m,frontMatter:()=>l,metadata:()=>p,toc:()=>s});var a=r(87462),n=(r(67294),r(3905));const l={title:"Learn some GraphQL",categories:["frontend","graphql"],tags:["graphql"]},o=void 0,p={permalink:"/blog/2019/05/05/graphql",source:"@site/blog/2019-05-05-graphql.md",title:"Learn some GraphQL",description:"Learning the GraphQL.",date:"2019-05-05T00:00:00.000Z",formattedDate:"May 5, 2019",tags:[{label:"graphql",permalink:"/blog/tags/graphql"}],readingTime:2.765,hasTruncateMarker:!0,authors:[],frontMatter:{title:"Learn some GraphQL",categories:["frontend","graphql"],tags:["graphql"]},prevItem:{title:"Mini Egg",permalink:"/blog/2019/05/20/mini-egg"},nextItem:{title:"Wish Reply Bot",permalink:"/blog/2019/02/03/wish-reply"}},i={authorsImageUrls:[]},s=[{value:"Example Projects",id:"example-projects",level:2},{value:"Quick notes",id:"quick-notes",level:2},{value:"Useful Links",id:"useful-links",level:2}],c={toc:s};function m(e){let{components:t,...r}=e;return(0,n.kt)("wrapper",(0,a.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("p",null,"Learning the GraphQL."),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://github.com/AkatQuas/kiddo-plays/tree/master/graphql-language"},"Project on GitHub"),"."),(0,n.kt)("h2",{id:"example-projects"},"Example Projects"),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://github.com/AkatQuas/kiddo-plays/tree/master/graphql-language/space-explorer"},"space-explorer"),": Full-stack apps with Apollo, ",(0,n.kt)("inlineCode",{parentName:"p"},"React")," in frontend, ",(0,n.kt)("inlineCode",{parentName:"p"},"sqlite"),", and ",(0,n.kt)("inlineCode",{parentName:"p"},"apollo-server")," in the backend."),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://github.com/AkatQuas/kiddo-plays/tree/master/graphql-language/quick-apollo"},"quick-apollo"),": Use ",(0,n.kt)("inlineCode",{parentName:"p"},"@apollo/client")," with ",(0,n.kt)("inlineCode",{parentName:"p"},"React"),", focusing on frontend usage."),(0,n.kt)("h2",{id:"quick-notes"},"Quick notes"),(0,n.kt)("p",null,"Each ",(0,n.kt)("inlineCode",{parentName:"p"},"type")," in schema should have a corresponding field definition in the resolver. Those ",(0,n.kt)("em",{parentName:"p"},"Scalar")," type could be omitted unless you want to do some introspection."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-graphql"},"## in schema\ntype Parent {\n  name: String!\n  children: [Child!]\n}\n\ntype Child {\n  name: String!\n  toys: [Toy]\n}\n\ntype Toy {\n  name: String!\n  createdAt: Date\n}\n\ntype Query {\n  parent(name: String!): Parent\n  child(name: String!): Child\n  toy(name: String!): Toy\n}\n")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-js"},"// in reslovers\nmodule.exports = {\n  // Query is defined in the top type level\n  Query: {\n    // there is a field `parent` in the type Query\n    parent: (root, args) => {\n      return new Parent(/* params */);\n    },\n    // there is a field `child` in the type Query\n    child: (root, args) => {\n      return new Child(/* params */);\n    },\n    // there is a field `toy` in the type Query\n    toy: (root, args) => {\n      return new Toy(/* params */);\n    },\n  },\n\n  // Parent is defined in the top type level\n  Parent: {\n    /* optional for scalar type */\n    name: (root, args) => root.name,\n\n    /* the children field is used for query for the list of child, and it's recommend to declare it */\n    children: (root, args) => {\n      /* do something with the nested args */\n      return [new Child(), new Child()];\n    },\n  },\n\n  // Child is defined in the top type level\n  Child: {\n    toys: (parent, args) => {\n      /* do something with the nested args */\n      return [new Toy(), new Toy()];\n    },\n  },\n\n  // Toy is defined in the top type level\n  Toy: {\n    createdAt: (parent, args) => {\n      /* do something with the nested args */\n      return new Date();\n    },\n  },\n};\n")),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://www.apollographql.com/docs/apollo-server/schema/directives/#default-directives"},"Builtin directives")),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://www.apollographql.com/docs/apollo-server/schema/creating-directives/"},"Custom directives")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-js"},"const { ApolloServer, gql, SchemaDirectiveVisitor } = require('apollo-server');\nconst { defaultFieldResolver } = require('graphql');\n\n// Create (or import) a custom schema directive\nclass UpperCaseDirective extends SchemaDirectiveVisitor {\n  visitFieldDefinition(field) {\n    const { resolve = defaultFieldResolver } = field;\n    field.resolve = async function (...args) {\n      const result = await resolve.apply(this, args);\n      if (typeof result === 'string') {\n        return result.toUpperCase();\n      }\n      return result;\n    };\n  }\n}\n\n// Construct a schema, using GraphQL schema language\nconst typeDefs = gql`\n  directive @upper on FIELD_DEFINITION\n\n  type Query {\n    hello: String @upper\n  }\n`;\n\n// Provide resolver functions for your schema fields\nconst resolvers = {\n  Query: {\n    hello: (parent, args, context) => {\n      return 'Hello world!';\n    },\n  },\n};\n\n// Add directive to the ApolloServer constructor\nconst server = new ApolloServer({\n  typeDefs,\n  resolvers,\n  schemaDirectives: {\n    upper: UpperCaseDirective,\n  },\n});\n")),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://www.apollographql.com/docs/apollo-server/security/authentication/#authorization-via-custom-directives"},"Authorization via Custom Directives")),(0,n.kt)("h2",{id:"useful-links"},"Useful Links"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("a",{parentName:"p",href:"https://graphql.org/learn/"},"Official GraphQL document"),".")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("a",{parentName:"p",href:"https://www.apollographql.com/"},"Apollo graphql"),"."),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("a",{parentName:"p",href:"https://www.apollographql.com/docs/apollo-server/data/subscriptions/"},"subscription"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("a",{parentName:"p",href:"https://www.apollographql.com/docs/apollo-server/data/file-uploads/"},"uploading file"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("a",{parentName:"p",href:"https://www.apollographql.com/docs/apollo-server/essentials/schema.html"},"writing a schema")),(0,n.kt)("p",{parentName:"li"},(0,n.kt)("em",{parentName:"p"},"ObjectType")),(0,n.kt)("p",{parentName:"li"},(0,n.kt)("em",{parentName:"p"},"Response Format")),(0,n.kt)("p",{parentName:"li"},(0,n.kt)("em",{parentName:"p"},"Input Type"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("a",{parentName:"p",href:"https://www.apollographql.com/docs/apollo-server/essentials/server.html"},"building a server")),(0,n.kt)("p",{parentName:"li"},"It has something about the middlewares.")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("a",{parentName:"p",href:"https://www.apollographql.com/docs/apollo-server/essentials/data.html"},"fetching data with resolvers")),(0,n.kt)("p",{parentName:"li"},(0,n.kt)("a",{parentName:"p",href:"https://www.apollographql.com/docs/apollo-server/essentials/data.html#result"},(0,n.kt)("em",{parentName:"a"},"Resolvers results")),":"),(0,n.kt)("blockquote",{parentName:"li"},(0,n.kt)("p",{parentName:"blockquote"},"related: ",(0,n.kt)("a",{parentName:"p",href:"https://blog.apollographql.com/graphql-explained-5844742f195e"},"How graphql execute the Query")),(0,n.kt)("p",{parentName:"blockquote"},"related: ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/facebook/dataloader#using-with-graphql"},"Dataloader for caching"))),(0,n.kt)("p",{parentName:"li"},(0,n.kt)("a",{parentName:"p",href:"https://www.apollographql.com/docs/apollo-server/essentials/data.html#parent"},(0,n.kt)("em",{parentName:"a"},"Parent argument")),": Every GraphQL query is a tree of function calls in the server."),(0,n.kt)("p",{parentName:"li"},(0,n.kt)("a",{parentName:"p",href:"https://www.apollographql.com/docs/apollo-server/essentials/data.html#context"},(0,n.kt)("em",{parentName:"a"},"Context argument")),": The context is how you access your shared connections and fetchers in resolvers to get data."),(0,n.kt)("p",{parentName:"li"},(0,n.kt)("a",{parentName:"p",href:"https://www.prisma.io/blog/graphql-server-basics-demystifying-the-info-argument-in-graphql-resolvers-6f26249f613a"},(0,n.kt)("em",{parentName:"a"},"Info argument")),": What is the ",(0,n.kt)("inlineCode",{parentName:"p"},"info")," argument in the last position??")))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("a",{parentName:"p",href:"https://github.com/prisma/graphql-yoga/"},"GraphQL yoga")))))}m.isMDXComponent=!0}}]);