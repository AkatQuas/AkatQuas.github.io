"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[3205],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>g});var o=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=o.createContext({}),p=function(e){var t=o.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=p(e.components);return o.createElement(s.Provider,{value:t},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},u=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,s=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),d=p(n),u=r,g=d["".concat(s,".").concat(u)]||d[u]||m[u]||a;return n?o.createElement(g,l(l({ref:t},c),{},{components:n})):o.createElement(g,l({ref:t},c))}));function g(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,l=new Array(a);l[0]=u;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[d]="string"==typeof e?e:r,l[1]=i;for(var p=2;p<a;p++)l[p]=n[p];return o.createElement.apply(null,l)}return o.createElement.apply(null,n)}u.displayName="MDXCreateElement"},75382:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>d,frontMatter:()=>a,metadata:()=>i,toc:()=>p});var o=n(87462),r=(n(67294),n(3905));const a={title:"Fun with Chrome Devtools Protocol",tags:["chrome devtools"]},l=void 0,i={permalink:"/blog/2021/08/18/chrome-devtools-protocol",source:"@site/blog/2021-08-18-chrome-devtools-protocol.md",title:"Fun with Chrome Devtools Protocol",description:"The Chrome DevTools Protocol allows for tools to instrument, inspect, debug and profile Chromium, Chrome and other Blink-based browsers.",date:"2021-08-18T00:00:00.000Z",formattedDate:"August 18, 2021",tags:[{label:"chrome devtools",permalink:"/blog/tags/chrome-devtools"}],readingTime:4.205,hasTruncateMarker:!0,authors:[],frontMatter:{title:"Fun with Chrome Devtools Protocol",tags:["chrome devtools"]},prevItem:{title:"\u8003\u51fa\u6469\u6258\u8bc1\u5e76\u559c\u63d0\u65b0\u8f66",permalink:"/blog/2021/11/10/motobike-test"},nextItem:{title:"Class Asynchronous Initialization",permalink:"/blog/2021/07/13/initialize-class-asynchronously"}},s={authorsImageUrls:[]},p=[{value:"Debugging a node process",id:"debugging-a-node-process",level:2},{value:"Debugging a webpage",id:"debugging-a-webpage",level:2},{value:"Tricky",id:"tricky",level:3},{value:"References",id:"references",level:2}],c={toc:p};function d(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,o.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"The ",(0,r.kt)("a",{parentName:"p",href:"https://chromedevtools.github.io/devtools-protocol/"},"Chrome DevTools Protocol")," allows for tools to instrument, inspect, debug and profile Chromium, Chrome and other Blink-based browsers."),(0,r.kt)("p",null,"The most familiar ",(0,r.kt)("a",{parentName:"p",href:"https://developer.chrome.com/docs/devtools/"},"Chrome DevTools")," uses this protocol to help debugging webpages."),(0,r.kt)("p",null,"Under the hood, the protocol relies on ",(0,r.kt)("em",{parentName:"p"},"WebSocket")," to work, ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/cyrus-and/chrome-remote-interface/wiki/Connect-to-a-raw-WebSocket"},"wiki"),". The ",(0,r.kt)("inlineCode",{parentName:"p"},"commands")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"events")," are serialized JSON objects on the protocol."),(0,r.kt)("img",{src:"/images/chrome-devtools-protocol.png",alt:"chrome devtools protocol"}),(0,r.kt)("p",null,"The package ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/cyrus-and/chrome-remote-interface/"},"chrome-remote-interface")," is a good tool, and we are going to demonstrate some cases with it."),(0,r.kt)("h2",{id:"debugging-a-node-process"},"Debugging a node process"),(0,r.kt)("p",null,"First let's start a node process with inspect option."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"$ node --inspect=9222 server.js\n\n# output\nDebugger listening on ws://127.0.0.1:9222/d4231410-13e5-463d-a5ba-23d206432a35\n#                       ^ debugger endpoint\n\n")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Example express server."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const express = require('express');\nconst app = express();\nconst port = 3000;\n\nconst marquee = ['log', 'warn', 'debug', 'error'];\n\nlet id = 0;\nfunction nonce() {\n  id = (id + 1) % 4;\n  const method = marquee[id];\n  console[method](`${method} works`);\n}\n\napp.get('/', (req, res) => {\n  nonce();\n  res.send('Hello World!');\n});\n\napp.listen(port, () => {\n  console.log(`Example app listening at http://localhost:${port}`);\n});\n"))),(0,r.kt)("p",null,"With ",(0,r.kt)("inlineCode",{parentName:"p"},"chrome-remote-interface"),", it's very easy to connect to the debugger endpoint."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const CDP = require('chrome-remote-interface');\n\nconst client = await CDP({\n  target: 'ws://127.0.0.1:9222/d4231410-13e5-463d-a5ba-23d206432a35',\n});\nconst { Debugger, Console, Runtime } = client;\nclient.on('Runtime.consoleAPICalled', (params) => {\n  console.log('received: ', params);\n});\nawait Runtime.runIfWaitingForDebugger();\nawait Runtime.enable();\nawait Debugger.enable({\n  maxScriptsCacheSize: 10000000,\n});\nawait Console.enable();\n")),(0,r.kt)("p",null,"Each time the server process invokes methods on ",(0,r.kt)("inlineCode",{parentName:"p"},"console"),", we would receive the payload."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-txt"},"received:  {\n  type: 'warning',\n  args: [ { type: 'string', value: 'warn works' } ],\n  executionContextId: 1,\n  timestamp: <timestamp in number>,\n  stackTrace: {\n    callFrames: [\n      // ... omitted\n    ]\n  }\n}\nreceived:  {\n  type: 'log',\n  args: [ { type: 'string', value: 'Visit /' } ],\n  executionContextId: 1,\n  timestamp: <timestamp in number>,\n  stackTrace: {\n    callFrames: [\n      // ... omitted\n    ]\n  }\n}\n")),(0,r.kt)("p",null,"And we will get the available protocol if visiting ",(0,r.kt)("inlineCode",{parentName:"p"},"http://localhost:9222/json/protocol"),"."),(0,r.kt)("details",null,(0,r.kt)("summary",null," protocol json "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "domains": [\n    {\n      "description": "This domain is deprecated - use Runtime or Log instead.",\n      "deprecated": true,\n      "domain": "Console",\n      "commands": [\n        // ...\n      ],\n      "types": [\n        // ...\n      ]\n      // ...\n    },\n    {\n      "domain": "Debugger",\n      "dependencies": ["Runtime"]\n      // ...\n    },\n    {\n      "domain": "HeapProfiler",\n      "dependencies": ["Runtime"],\n      "experimental": true\n      // ...\n    },\n    {\n      "domain": "Profiler",\n      "dependencies": ["Runtime", "Debugger"]\n      // ...\n    },\n    {\n      "domain": "Runtime",\n      "events": [\n        {\n          "name": "consoleAPICalled",\n          "parameters": [\n            // ...\n          ],\n          "description": "Issued when console API was called."\n        }\n        // ...\n      ]\n    },\n    {\n      "deprecated": true,\n      "domain": "Schema",\n      "description": "This domain is deprecated."\n      // ...\n    },\n    {\n      "experimental": true,\n      "domain": "NodeTracing"\n      // ...\n    },\n    {\n      "domain": "NodeWorker",\n      "experimental": true\n      // ...\n    },\n    {\n      "domain": "NodeRuntime",\n      "experimental": true\n      // ...\n    }\n  ],\n  "version": { "major": "1", "minor": "0" }\n}\n'))),(0,r.kt)("p",null,"According to the ",(0,r.kt)("a",{parentName:"p",href:"https://chromedevtools.github.io/devtools-protocol/v8/"},"document"),", the protocol in node only has few domains. We're very limited to debug the remote node process."),(0,r.kt)("h2",{id:"debugging-a-webpage"},"Debugging a webpage"),(0,r.kt)("p",null,"This is much easier to debug a webpage since we could use the already powerful Devtools built with Chrome."),(0,r.kt)("p",null,"The quick way is to open ",(0,r.kt)("inlineCode",{parentName:"p"},"chrome://inspect/#pages")," and you can start debugging."),(0,r.kt)("p",null,"But how to debug the webpage using ",(0,r.kt)("inlineCode",{parentName:"p"},"chrome-remote-interface")," ?"),(0,r.kt)("p",null,"First, we need some webpage running with available debugging port."),(0,r.kt)("p",null,"In this case, we'll start with the electron ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/electron/electron-quick-start"},"quick-start project"),"."),(0,r.kt)("p",null,"After cloning and installing the dependencies, add a line before ",(0,r.kt)("inlineCode",{parentName:"p"},"app.whenReady()")," in ",(0,r.kt)("inlineCode",{parentName:"p"},"main.js")," to enable remote debugging."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-diff"},"+ app.commandLine.appendSwitch('remote-debugging-port', '9222');\n\n// This method will be called when Electron has finished\n// initialization and is ready to create browser windows.\n// Some APIs can only be used after this event occurs.\napp.whenReady().then(() => {\n")),(0,r.kt)("p",null,"So the time we start the application using ",(0,r.kt)("inlineCode",{parentName:"p"},"npx electron ."),"\uff0c it would output something like this"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"DevTools listening on ws://127.0.0.1:9222/devtools/browser/a1df1a72-9dce-42ad-80ed-d8765dbb7520\n#                       ^ devtools debug endpoint\n")),(0,r.kt)("p",null,"However, this websocket url is only a devtools debug endpoint, not the chrome devtool protocol debug endpoint. We have to visit the ",(0,r.kt)("inlineCode",{parentName:"p"},"http://localhost:9222/json")," to find out the real ",(0,r.kt)("inlineCode",{parentName:"p"},"webSocketDebuggerUrl")," for ",(0,r.kt)("inlineCode",{parentName:"p"},"chrome-remote-interface")," to connect."),(0,r.kt)("details",null,(0,r.kt)("summary",null," Example output "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'[\n  {\n    "description": "",\n    "devtoolsFrontendUrl": "/devtools/inspector.html?ws=localhost:9222/devtools/page/D6F9769D8A20DCF2E8F574D231F9A8C6",\n    "id": "D6F9769D8A20DCF2E8F574D231F9A8C6",\n    "title": "Hello Vanilla!",\n    "type": "page",\n    "url": "file:///Users/workspace/quick-start/index.html",\n    "webSocketDebuggerUrl": "ws://localhost:9222/devtools/page/D6F9769D8A20DCF2E8F574D231F9A8C6"\n    //    ^ debugger endpoint\n  }\n]\n'))),(0,r.kt)("p",null,"With the ",(0,r.kt)("inlineCode",{parentName:"p"},"webSocketDebuggerUrl"),", we can write some code to interact with the webpage."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const CDP = require('chrome-remote-interface');\n\nconst options = {\n  target: 'ws://localhost:9222/devtools/page/D6F9769D8A20DCF2E8F574D231F9A8C6',\n};\n\nCDP(options, async (client) => {\n  console.log('Connected!');\n  const { Page } = client;\n  await Page.enable();\n\n  await Page.navigate({ url: 'https://cn.bing.com' });\n  await Page.loadEventFired();\n  client.close();\n}).on('error', (err) => {\n  console.error(err);\n});\n")),(0,r.kt)("p",null,"You'll find out the page is navigated if you check out the electron window."),(0,r.kt)("p",null,"We have more abilities to manipulate the webpage. Just take a look at the listed ",(0,r.kt)("a",{parentName:"p",href:"https://chromedevtools.github.io/devtools-protocol/tot/"},"protocol"),"."),(0,r.kt)("h3",{id:"tricky"},"Tricky"),(0,r.kt)("p",null,"Look at the output json, there's a property named ",(0,r.kt)("inlineCode",{parentName:"p"},"devtoolsFrontendUrl"),"."),(0,r.kt)("p",null,"We would get the devtool panel if visiting ",(0,r.kt)("inlineCode",{parentName:"p"},"http://localhost:9222/<devtoolsFrontendUrl>"),". Then open the devtool for the devtool page, for example, press ",(0,r.kt)("inlineCode",{parentName:"p"},"F12")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"cmd+option+I"),"."),(0,r.kt)("img",{src:"/images/chrome-devtool-for-devtool.png",alt:"devtool for protocol"}),(0,r.kt)("p",null,"We will find the message communication in devtool panel ",(0,r.kt)("inlineCode",{parentName:"p"},"Network>WS"),"."),(0,r.kt)("p",null,"These are the commands sent via chrome devtools protocol, we could do the same thing using ",(0,r.kt)("inlineCode",{parentName:"p"},"chrome-remote-interface"),"."),(0,r.kt)("h2",{id:"references"},"References"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"https://chromedevtools.github.io/devtools-protocol/"},"Chrome Devtools Protocol"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"https://github.com/cyrus-and/chrome-remote-interface"},"chrome-remote-interface")))))}d.isMDXComponent=!0}}]);