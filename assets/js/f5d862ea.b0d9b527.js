"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[7790],{3905:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>k});var r=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function c(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=r.createContext({}),l=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):c(c({},n),e)),t},d=function(e){var n=l(e.components);return r.createElement(s.Provider,{value:n},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),p=l(t),m=o,k=p["".concat(s,".").concat(m)]||p[m]||u[m]||a;return t?r.createElement(k,c(c({ref:n},d),{},{components:t})):r.createElement(k,c({ref:n},d))}));function k(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,c=new Array(a);c[0]=m;var i={};for(var s in n)hasOwnProperty.call(n,s)&&(i[s]=n[s]);i.originalType=e,i[p]="string"==typeof e?e:o,c[1]=i;for(var l=2;l<a;l++)c[l]=t[l];return r.createElement.apply(null,c)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},1691:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>c,default:()=>p,frontMatter:()=>a,metadata:()=>i,toc:()=>l});var r=t(87462),o=(t(67294),t(3905));const a={title:"Cheatsheet"},c=void 0,i={unversionedId:"docker/cheatsheet",id:"docker/cheatsheet",title:"Cheatsheet",description:"docker system",source:"@site/docs/docker/cheatsheet.md",sourceDirName:"docker",slug:"/docker/cheatsheet",permalink:"/docs/docker/cheatsheet",draft:!1,tags:[],version:"current",frontMatter:{title:"Cheatsheet"},sidebar:"tutorialSidebar",previous:{title:"Production Practices",permalink:"/docs/docker/production-practices"},next:{title:"Playing with Kubernetes",permalink:"/docs/kubernetes/"}},s={},l=[{value:"docker system",id:"docker-system",level:2},{value:"docker",id:"docker",level:2},{value:"docker-compose",id:"docker-compose",level:2}],d={toc:l};function p(e){let{components:n,...t}=e;return(0,o.kt)("wrapper",(0,r.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"docker-system"},"docker system"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"# show disk usage in Docker\ndocker system df\n\n")),(0,o.kt)("h2",{id:"docker"},"docker"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"# build images from configuration file\ndocker build -t <tag> -f <path/to/Dockerfile> .\n\n# files copying between host and containers\ndocker cp host_source_path container:destination_path\n\ndocker cp container:source_path host_destination_path\n\n\n# interactive with exisiting container\ndocker exec -it <container> bash\n\ndocker container run --interactive --tty <container>\n\n\n# list the processes running in the container\ndocker container top <container-name/container-id>\n\n\n# run container with environment variables\ndocker container run --env VAR=VAL VAR=VAL <image-name>\n\n\n# display any log entries the container\ndocker container logs <container-name/container-id>\n\n\n# show the details of a container\ndocker container inspect <container-name/container-id>\n\n\n# show images history\ndocker image history <image>\n\n\n# run images interactively\ndocker run -it <image>\n\n\n# remove container automatically when it exit\n## using --rm\ndocker run --rm <image>\n\n## clear exited containers\ndocker rm $(docker ps -a -q -f status=exited)\n\ndocker container rm -f $(docker container ls -aq)\n\ndocker container rm --force $(docker container ls --all --quiet)\n\ndocker image rm -f $(docker image ls -f reference='' -q)\n\n# in higher version\ndocker container prune\n\n\n# give an port automatically to container\ndocker run -d -P --name <GIVEN CONTAINER NAME> <image>\n\n\n# specify a port to a container\ndocker container run --publish <host port>:<container port> <webapp image>\n\n# background job\ndocker container run --detach --publish <host port>:<container port> <webapp image>\n\n\n# This would kill all the containers and remove all data volumes if there any. Then we need to remove the network\ndocker network rm <network-name>\n\n# list all the network we have now,\ndocker network ls\n\n# inspect a network\ndocker network inspect <network-name>\n")),(0,o.kt)("h2",{id:"docker-compose"},"docker-compose"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"# launch a composed application:\n# `-v` means verbose, `-d` means detaching from terminal.\ndocker-compose up -v -d\n\n# stop and remove a composed application\n# remove all the containers, networks, volumes\ndocker-compose down -v\n\n# check the network running\ndocker-compose ps\n")))}p.isMDXComponent=!0}}]);