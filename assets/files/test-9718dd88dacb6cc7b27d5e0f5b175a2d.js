const tokenizer=require("./tokenizer"),parser=require("./parser"),transformer=require("./transformer"),codeGenerator=require("./generator"),compiler=require("./compiler"),input="(add 2 (substract 4 2))",output="add(2, substract(4, 2))",tokens=[{type:"paren",value:"("},{type:"name",value:"add"},{type:"number",value:"2"},{type:"paren",value:"("},{type:"name",value:"subtract"},{type:"number",value:"4"},{type:"number",value:"2"},{type:"paren",value:")"},{type:"paren",value:")"}],ast={type:"Program",body:[{type:"CallExpression",name:"add",params:[{type:"NumberLiteral",value:"2"},{type:"CallExpression",name:"subtract",params:[{type:"NumberLiteral",value:"4"},{type:"NumberLiteral",value:"2"}]}]}]},newAst={type:"Program",body:[{type:"ExpressionStatement",expression:{type:"CallExpression",callee:{type:"Identifier",name:"add"},arguments:[{type:"NumberLiteral",value:"2"},{type:"CallExpression",callee:{type:"Identifier",name:"subtract"},arguments:[{type:"NumberLiteral",value:"4"},{type:"NumberLiteral",value:"2"}]}]}}]},logger_assert=e=>{const t=(e="end")=>console.log(`-----${e}-----`);t("tokenizer input");const r=tokenizer(input);console.log(r),t("tobe"),console.log(tokens),t(),t("parser toknens");const o=parser(r);console.log(JSON.stringify(o)),t("tobe"),console.log(JSON.stringify(ast)),t(),t("transformer ast");const a=transformer(o);console.log(JSON.stringify(a)),t("tobe"),console.log(JSON.stringify(newAst)),t(),t("codeGenerator output");const n=codeGenerator(a);console.log(n),t("tobe"),console.log(output),t(),t("compiler output");const s=compiler(input);console.log(s),t("tobe"),console.log(output),t()};logger_assert();